"use strict";var __createBinding=this&&this.__createBinding||(Object.create?function(e,i,t,n){void 0===n&&(n=t);var s=Object.getOwnPropertyDescriptor(i,t);s&&("get"in s?i.__esModule:!s.writable&&!s.configurable)||(s={enumerable:!0,get:function(){return i[t]}}),Object.defineProperty(e,n,s)}:function(e,i,t,n){e[n=void 0===n?t:n]=i[t]}),__setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(e,i){Object.defineProperty(e,"default",{enumerable:!0,value:i})}:function(e,i){e.default=i}),__importStar=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var i={};if(null!=e)for(var t in e)"default"!==t&&Object.prototype.hasOwnProperty.call(e,t)&&__createBinding(i,e,t);return __setModuleDefault(i,e),i},__importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.NativeWindowManager=exports.Nativize=void 0;let NativeManager;const path=__importStar(require("path")),addonRoot=path.join(Editor.App.path,"../tools/native-scene"),isWin32="win32"===process.platform,scene_window_1=(NativeManager=(isWin32,require(path.join(addonRoot,"addon")).NativeEngineManager),require("./scene-window")),index_1=__importDefault(require("./ipc/index"));class NativeWindowManager{constructor(){this._sceneWindows=new Map,this._previewWindows=new Map,this._isPreviewing=!1,this.ipc=index_1.default,this.mainWindowRect={x:0,y:0,w:0,h:0},this.previewWindowRect={x:0,y:0,w:0,h:0},this.manager=new NativeManager,this.onFuncMaps={}}onWindowCallback(e,i,t){e=this.onFuncMaps[e];e&&e(i,t)}init(e,i,t){this.editorHandle=e,this.parentWindow=this.manager.init(e,i,t),this.parentWindow||console.error("editorNative init fail")}setMainWindowRect(e){e.x&&(this.mainWindowRect.x=e.x),e.y&&(this.mainWindowRect.y=e.y),e.w&&(this.mainWindowRect.w=e.w),e.h&&(this.mainWindowRect.h=e.h)}setPreviewWindowRect(e){e.x&&(this.previewWindowRect.x=e.x),e.y&&(this.previewWindowRect.y=e.y),e.w&&(this.previewWindowRect.w=e.w),e.h&&(this.previewWindowRect.h=e.h)}getWindowRect(e){return"MainWindow"===e?this.mainWindowRect:this.previewWindowRect}on(e,i){this.onFuncMaps[e]=i}async createWindow(e,i,t="",n=!1){var s=(await this.request(n,"createWindow",e,i,t,this.editorHandle.toString("base64")))["handler"];try{var r=this.manager.createWindow(e,i,s,"MainWindow"===t,n),o=new scene_window_1.SceneWindow(r,s,t);return(o.isPreview=n)?(this._previewWindows.set(t,o),o.hide()):this._sceneWindows.set(t,o),o}catch(e){return console.error("createWindow error",e),null}}getWindow(e,i){return(i?this._previewWindows:this._sceneWindows).get(e)}async switchWindows(e){(this._isPreviewing=e)?(this.setAllWindowsVisible(!0,e),this.setAllWindowsVisible(!1)):this.setAllWindowsVisible(!0)}setAllWindowsVisible(t,e=!1){(e?this._previewWindows:this._sceneWindows).forEach((e,i)=>{t?(i=this.getWindowRect(i),e.restore(i)):e.hide()})}resizeWindow(e,i){var t;"MainWindow"===e?this.setMainWindowRect(i):"preview"===e&&this.setPreviewWindowRect(i),this._isPreviewing?null!=(t=this._previewWindows.get(e))&&t.resize(i):null!=(t=this._sceneWindows.get(e))&&t.resize(i)}redraw(){(this._isPreviewing?this._previewWindows:this._sceneWindows).forEach(e=>{e.redraw()})}async request(e=!1,i,...t){return this.ipc.request(e,i,...t)}onPreviewPanelReady(){return{previewing:this._isPreviewing,hasPreviewWindow:this._previewWindows.get("preview"),hasSceneWindow:this._sceneWindows.get("preview")}}}const instance=new(exports.NativeWindowManager=NativeWindowManager);exports.Nativize=instance,scene_window_1.SceneWindow.Nativize=instance;