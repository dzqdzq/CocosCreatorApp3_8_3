"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const WebSocketServer=require("websocket").server,{serialize,deserialize}=require("v8"),http=require("http"),PROFILER=!1,profilerStringify=PROFILER?e=>{var r=Date.now(),e=serialize(e),t=Date.now();return 1<t-r&&(console.log("JSON.stringify time out",t-r,e),console.trace()),e}:e=>serialize(e),profilerParse=PROFILER?e=>{var r=Date.now(),e=deserialize(e),t=Date.now();return 1<t-r&&console.log("JSON.parse time out",t-r,e.type),e}:e=>deserialize(e);class EditorServer{constructor(){this.resolveMap={},this.callbackMap={}}getPort(){return this.server.address().port}startServer(e){const o=this;this.server=http.createServer(function(e,r){console.log(new Date+" Received request for "+e.url),r.writeHead(404),r.end()}),this.server.on("error",e=>{"EADDRINUSE"===e.code&&console.error("Nativize IPC Serer error : EADDRINUSE",o.getPort())}),this.server.listen(e,function(){console.log(new Date+" Server is listening on port "+o.getPort())});this.wsServer=new WebSocketServer({httpServer:this.server,closeTimeout:18e5,keepaliveGracePeriod:18e5,autoAcceptConnections:!1,maxReceivedFrameSize:2048e4,maxReceivedMessageSize:2048e4}),this.wsServer.on("request",function(e){const t=e.accept("editor-native",e.origin);console.log(new Date+" Connection accepted."),t.on("message",function(e){var r;"utf8"!==e.type&&(PROFILER&&console.log("EditorReceiceTime",Date.now()),e=profilerParse(e.binaryData),(r=o.resolveMap[e.id])?(PROFILER&&console.log("requestResponseTime",e.id,Date.now()-r[2],r[3]),r[0](e),o.resolveMap[e.id]=null):e.ipc?o.retransmitIPC(e):console.log("receive nativize msg"))}),t.on("close",function(e,r){console.log("native ipc close",e,r),o.callbackMap.close&&o.callbackMap.close(t),o.connection=null}),o.connection=t,o.callbackMap.connect&&o.callbackMap.connect(t)}.bind(this))}send(e){this.connection?this.connection.sendBytes(profilerStringify(e)):console.error("nativize not connect")}request(t){return this.connection?new Promise((e,r)=>{this.resolveMap[t.id]=[e,r],this.connection.sendBytes(profilerStringify(t))}):Promise.reject("send fail!not connect")}on(e,r){this.callbackMap[e]=r}async retransmitIPC(e){var r=e.method;Editor.Message[r]?"broadcast"===r?await Editor.Message[r](e.msg,...e.data):(r=await Editor.Message[r](e.plugin,e.msg,...e.data),e={id:e.id,ipc:1,type:e.type,data:r},this.send(e)):console.error("retransmitIPC failed:wrong method")}}module.exports=EditorServer;