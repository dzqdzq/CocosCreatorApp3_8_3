require('runtime-adapter/ral.js');
require('runtime-adapter/web-adapter.js');
let _canvas = document.createElement("canvas");
_canvas.id = "canvas";
document.body.appendChild(_canvas);

<% if(polyfillsBundleFile) { %>
// Polyfills bundle.
require("<%= polyfillsBundleFile %>");
<% } %>

// SystemJS support.
window.self = window;
require("<%= systemJsBundleFile %>");

const importMapJson = ral.getFileSystemManager().readFileSync("<%= importMapFile%>", 'utf8');
const importMap = JSON.parse(importMapJson);
System.warmup({
    importMap,
    importMapUrl: '<%= importMapFile%>',
    defaultHandler: (urlNoSchema) => {
        require('.' + urlNoSchema);
    },
});

System.import('<%= applicationJs %>').then(({ createApplication }) => {
    return createApplication({
        loadJsListFile: (url) => require(`./${url}`),
        fetchWasm: (url) => url,
    });
}).then((application) => {
    return onApplicationCreated(application);
}).catch((err) => {
    console.error(err);
});

function onApplicationCreated(application) {
    return application.import('cc').then((cc) => {
        require('runtime-adapter/engine-adapter.js');
        cc.macro.CLEANUP_IMAGE_CACHE = false;
        var orientation = '{"orientation": <%=orientationNum%>}';
        loadRuntime().callCustomCommand({
            success(msg) {
                if(<%=orientationNum%> === 0) {
                    window.orientation = 90;
                }
            },
            fail(msg) {}
        }, 'setOrientation', orientation);
        return application.start({
            findCanvas: () => {
                var container = document.createElement('div');
                var frame = container.parentNode === document.body ? document.documentElement : container.parentNode;
                var canvas = ral.createCanvas();
                return { frame, canvas, container };
            },
        });
    });
}
