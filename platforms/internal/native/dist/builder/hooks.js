"use strict";var __importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.run=exports.make=exports.onAfterBuild=exports.onAfterBuildAssets=exports.onBeforeBuildAssets=exports.onAfterInit=exports.throwError=void 0;const path_1=require("path"),fs_extra_1=require("fs-extra"),index_1=require("./native-utils/index"),ejs_1=__importDefault(require("ejs")),default_1=require("../console/default"),cocosCli_1=require("../console/cocosCli"),os_1=__importDefault(require("os")),encrypted_1=require("./encrypted"),path=require("path");function fixPath(e){return"win32"===os_1.default.platform()?e.replace(/\\/g,"/").replace(/\/+/,"/"):e}async function genConsoleParams(a,e,t){const i=new default_1.ConsoleParams;i.pluginName=t;var t=e.paths.dir,e=path_1.dirname(t),t=a.name,t=(i.enginePath=await index_1.Path.queryNativeEnginePath(),i.projectName=t,i.cMakeConfig.APP_NAME=`set(APP_NAME ${t})`,i.cMakeConfig.COCOS_X_PATH=`set(COCOS_X_PATH "${fixPath(i.enginePath)}")`,a.packages),o=[];i.debug=a.debug,i.cMakeConfig.USE_JOB_SYSTEM_TASKFLOW="taskFlow"===t.native.JobSystem,i.cMakeConfig.USE_JOB_SYSTEM_TBB="tbb"===t.native.JobSystem,["mac","linux","windows"].includes(a.platform)&&(i.cMakeConfig.USE_SERVER_MODE=`set(USE_SERVER_MODE ${t.native.serverMode?"ON":"OFF"})`,i.cMakeConfig.NET_MODE=`set(NET_MODE ${Number(t.native.netMode)})`),t.android&&(t["huawei-agc"]?o.push("huawei-agc"):o.push("android"),i.android.ndkPath=t.android.ndkPath,i.android.sdkPath=t.android.sdkPath,i.android.androidInstant=t.android.androidInstant,i.android.remoteUrl=t.android.remoteUrl,i.android.packageName=t.android.packageName,i.android.apiLevel=Number(t.android.apiLevel.match(/[1-9][0-9]/)[0])),t.ios&&(o.push("ios"),t.ios.developerTeam&&(i.cMakeConfig.DEVELOPMENT_TEAM=`set(DEVELOPMENT_TEAM ${t.ios.developerTeam})`)&&(i.teamid=t.ios.developerTeam),i.cMakeConfig.TARGET_IOS_VERSION=`set(TARGET_IOS_VERSION ${t.ios.targetVersion||"12.0"})`,i.cMakeConfig.USE_PORTRAIT=!!t.ios.orientation.portrait,i.cMakeConfig.CUSTOM_COPY_RESOURCE_HOOK=t.ios.skipUpdateXcodeProject,i.ios.skipUpdateXcodeProject=t.ios.skipUpdateXcodeProject,t.ios.osTarget)&&(void 0!==t.ios.osTarget.simulator&&(i.ios.simulator=t.ios.osTarget.simulator),void 0!==t.ios.osTarget.iphoneos)&&(i.ios.iphoneos=t.ios.osTarget.iphoneos),t.windows&&(o.push("windows"),i.win.targetPlatform=t.windows.targetPlatform),t.mac&&(o.push("mac"),i.cMakeConfig.TARGET_OSX_VERSION=`set(TARGET_OSX_VERSION ${t.mac.targetVersion||"10.14"})`,i.cMakeConfig.CUSTOM_COPY_RESOURCE_HOOK=t.mac.skipUpdateXcodeProject,i.mac.skipUpdateXcodeProject=t.mac.skipUpdateXcodeProject),t.ohos&&(o.push("ohos"),i.ohos.ndkPath=t.ohos.ndkPath,i.ohos.sdkPath=t.ohos.sdkPath,i.ohos.packageName=t.ohos.packageName,i.ohos.orientation=t.ohos.orientation),t.android&&t.android.packageName&&(t.android.packageName,i.android.appBundle=t.android.appBundle,i.android.orientation=t.android.orientation,i.android.appABIs=t.android.appABIs,t.android.useDebugKeystore?(i.android.keyStorePath=path_1.join(Editor.App.path,"../tools/keystore/debug.keystore"),i.android.keystoreAlias="debug_keystore",i.android.keystorePassword="123456",i.android.keystoreAliasPassword="123456"):(i.android.keyStorePath=t.android.keystorePath,i.android.keystoreAliasPassword=t.android.keystoreAliasPassword,i.android.keystorePassword=t.android.keystorePassword,i.android.keystoreAlias=t.android.keystoreAlias)),t.ohos&&(i.ohos=t.ohos),"linux"===a.platform&&o.push("linux");let s;1===o.length?s=o[0]:console.error(`Invalidate platforms "${o}", size ${o.length}.`);let r=a.packages[a.platform].renderBackEnd;"huawei-agc"===a.platform&&(r=a.packages.android.renderBackEnd),r&&Object.keys(r).forEach(e=>{i.cMakeConfig["CC_USE_"+e.toUpperCase()]=r[e]});const n=await Editor.Profile.getConfig("engine","modules.moduleConfig","default");Object.keys(n).forEach(e=>{n[e].native&&(i.cMakeConfig[n[e].native]=`set(${n[e].native} ${a.includeModules.includes(e)?"ON":"OFF"})`)});o=e;return fs_extra_1.existsSync(o)||await fs_extra_1.mkdir(o),i.language=default_1.LANGUAGE.JS,i.directory=o,i.templateName="link",i.buildDir=path_1.join(e,"proj"),t.ios&&t.ios.packageName&&(i.ios.orientation=t.ios.orientation,i.ios.bundleId=t.ios.packageName,i.cMakeConfig.MACOSX_BUNDLE_GUI_IDENTIFIER=`set(MACOSX_BUNDLE_GUI_IDENTIFIER ${i.ios.bundleId})`),i.sharedDir=path_1.join(o,".."),s&&(i.platform=default_1.PLATFORM_ENUM[s.toUpperCase()]),t.mac&&t.mac.packageName&&(i.mac.bundleId=t.mac.packageName,i.cMakeConfig.MACOSX_BUNDLE_GUI_IDENTIFIER=`set(MACOSX_BUNDLE_GUI_IDENTIFIER ${i.mac.bundleId})`),i}async function copyNativeTemplates(e,a){e=await genConsoleParams(e,a,default_1.PLUGIN_NAME_ENUM.NEW);await new cocosCli_1.NativeConsole(e).run()}async function generateNativeProject(e,a){a=await genConsoleParams(e,a,default_1.PLUGIN_NAME_ENUM.GENERATE);await new cocosCli_1.NativeConsole(a).run(),e.packages.native.params=a.toJSON(),fs_extra_1.outputJSONSync(path_1.join(a.directory,"cocos.compile.config.json"),e)}async function getBrowserslistQuery(e){e=path_1.join(e,".browserslistrc");let a;try{a=await fs_extra_1.readFile(e,"utf8")}catch(e){return}e=function(e){var a=[];for(const i of e.split("\n")){var t=i.indexOf("#"),t=(t<0?i:i.substr(0,t)).trim();0!==t.length&&a.push(t)}return a}(a);if(0!==e.length)return e.join(" or ")}async function onAfterInit(e,a){e.assetSerializeOptions.exportCCON=!0,e.assetSerializeOptions.allowCCONExtension=!0;let t=e.packages.native.remoteServerAddress||"";t&&!t.endsWith("/")&&(t+="/"),Object.assign(e.appTemplateData,{server:t}),e.packages.native.makeAfterBuild&&(e.nextTasks=["make"]),e.packages.native.runAfterMake&&(e.nextTasks=["run"]);var i=(await Editor.Message.request("engine","query-info"))["nativePath"];index_1.Path._root=e.packages.native.engine||i,console.debug("Native engine root:"+index_1.Path._root),e.includeModules=e.includeModules.filter(e=>!["gfx-webgl2","gfx-webgl"].includes(e)),Object.assign(e.appTemplateData,{showFPS:!1}),Object.assign(e.buildEngineParam,{platform:"NATIVE",engineName:"src/cocos-js"});let o;i=await getBrowserslistQuery(index_1.Path._root),i&&(o=i),e.buildScriptParam.polyfills=e.packages.native.polyfills,o&&(e.buildEngineParam.targets=o,e.buildScriptParam.targets=o,e.buildScriptParam.polyfills||(e.buildScriptParam.polyfills={}),e.buildScriptParam.polyfills.targets=o,"asyncFunctions"in e.buildScriptParam.polyfills)&&delete e.buildScriptParam.polyfills.asyncFunctions,["mac","linux","windows"].includes(e.platform)&&(e.buildScriptParam.flags.SERVER_MODE=!!e.packages.native.serverMode,e.buildScriptParam.flags.NET_MODE=Number(e.packages.native.netMode)),e.buildScriptParam.system={preset:"commonjs-like"},a.paths.dir=path_1.join(a.paths.dir,"assets"),i=a.paths.dir;a.paths.applicationJS=path_1.join(a.paths.dir,"src",path_1.basename(a.paths.applicationJS)),window.__manager.taskManager.debug||await fs_extra_1.emptyDirSync(i),await index_1.outputJSBAdapter(i,{targets:o})}async function onBeforeBuildAssets(e,a,t){for(const s of t.scriptUuids){var i=t.getAssetInfo(s),o=await t.getMeta(s);i?o?o.userData.isPlugin&&o.userData.loadPluginInNative&&a.addPlugin(i):console.error(`Get meta of script {asset(${i.url})} failed!`):console.error(`Get asset info of script {asset(${s})} failed!`)}}async function onAfterBuildAssets(e,a){if(a.bundles.forEach(e=>{e.configOutPutName="cc.config"}),await copyNativeTemplates(e,a),!e.debug){if(!e.packages.native.xxteaKey)return Promise.reject(Error(Editor.I18n.t("native.encrypt.xxtea_key_empty")));if(e.packages.native.encrypted&&await encrypted_1.setEncryptConfig(a),!e.debug&&e.packages.native.encrypted){if(!e.packages.native.xxteaKey)return Promise.reject(Error(Editor.I18n.t("native.encrypt.xxtea_key_empty")));a.bundles.map(e=>e.scriptDest);await encrypted_1.encryptJs(a,{encrypted:e.packages.native.encrypted,compressZip:e.packages.native.compressZip,xxteaKey:e.packages.native.xxteaKey})}}}async function onAfterBuild(e,a){var t=e.packages.native.remoteServerAddress||"",i=path_1.resolve(a.paths.dir,"../remote"),t=(fs_extra_1.emptyDirSync(i),t&&fs_extra_1.existsSync(a.paths.remote)&&(fs_extra_1.moveSync(a.paths.remote,i),a.paths.remote=i),path_1.join(Build.buildTemplateDir,e.platform)),i=(fs_extra_1.existsSync(t)&&(fs_extra_1.copySync(t,path_1.dirname(a.paths.dir)),console.debug(`Use user build-template in {link(${t})}`)),fs_extra_1.ensureDirSync(path_1.join(a.paths.dir,"src")),path_1.join(__dirname,"../../static/build-template/index.ejs")),t={polyfillsBundleFile:a.paths.polyfillsJs&&Build.Utils.relativeUrl(a.paths.dir,a.paths.polyfillsJs)||!1,systemJsBundleFile:Build.Utils.relativeUrl(a.paths.dir,a.paths.systemJs),importMapFile:Build.Utils.relativeUrl(a.paths.dir,a.paths.importMap),applicationJs:"./"+Build.Utils.relativeUrl(a.paths.dir,a.paths.applicationJS)},i=(await ejs_1.default.renderFile(i,t)).toString();await fs_extra_1.writeFile(path_1.join(a.paths.dir,"main.js"),i,"utf8"),await generateNativeProject(e,a),e.packages.native.encrypted&&encrypted_1.replaceTeaKeyForGame(e)}async function make(e,a){a=a.packages.native.params;a.pluginName=default_1.PLUGIN_NAME_ENUM.COMPILE,await new cocosCli_1.NativeConsole(a).run()}async function run(e,a){a=a.packages.native.params;a.pluginName=default_1.PLUGIN_NAME_ENUM.RUN,await new cocosCli_1.NativeConsole(a).run()}exports.throwError=!0,exports.onAfterInit=onAfterInit,exports.onBeforeBuildAssets=onBeforeBuildAssets,exports.onAfterBuildAssets=onAfterBuildAssets,exports.onAfterBuild=onAfterBuild,exports.make=make,exports.run=run;