"use strict";var __createBinding=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[i]}})}:function(e,t,i,r){e[r=void 0===r?i:r]=t[i]}),__setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),__importStar=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&__createBinding(t,e,i);return __setModuleDefault(t,e),t};Object.defineProperty(exports,"__esModule",{value:!0}),exports.CCPluginGENERATE=void 0;const cocosCli_1=require("./cocosCli"),os=__importStar(require("os")),cocosConfig_1=require("./cocosConfig"),childProcess=__importStar(require("child_process")),afs_1=require("./afs"),default_1=require("./default"),path=__importStar(require("path")),fs=__importStar(require("fs-extra")),PackageNewConfig="cocos-project-template.json";class CCPluginGENERATE extends cocosCli_1.CCPlugin{depends(){return null}init(){return cocosConfig_1.cocosConfig.platforms.indexOf(this.getPlatform())<0&&console.error(`invalidate platform "${this.getPlatform()}"`),!0}async run(){var e=this.parser.platform;if(e)await this.generatePlatform(e);else for(const t of cocosConfig_1.cocosConfig.defaultGeneratePlatforms[this.getCurrentPlatform()])await this.generatePlatform(t);return!0}async generatePlatform(e){var t=this.getCurrentPlatform(),i=(e===default_1.PLATFORM_ENUM.IOSSIMULATOR&&(e=default_1.PLATFORM_ENUM.IOS,this.setPlatform(default_1.PLATFORM_ENUM.IOS),this.extendArgv(["--ios-simulator"]),this.args.ios.simulator=!0),cocosConfig_1.cocosConfig.availableTargetPlatforms[t]);i?i.indexOf(e)<0?console.error(`target platform "${e}" is not listed [${i.join(", ")}]`):e===default_1.PLATFORM_ENUM.MAC?await this.generateMac():e===default_1.PLATFORM_ENUM.IOS?await this.generateIos():e===default_1.PLATFORM_ENUM.WINDOWS?await this.generateWindows():e!==default_1.PLATFORM_ENUM.ANDROID&&e!==default_1.PLATFORM_ENUM["HUAWEI-AGC"]||await this.generateAndroid():console.error(`current host platform ${t} is not supported.`)}async generateAndroid(){console.log("generate android")}async generateIos(){await new IOSGenerateCMD(this).generate()}async generateMac(){await new MacGenerateCMD(this).generate()}async generateWindows(){await new WindowsGenerateCMD(this).generate()}}exports.CCPluginGENERATE=CCPluginGENERATE;class PlatformGenerateCmd{constructor(e){this.plugin=e}get projectSrcDir(){return path.join(this.plugin.projectDir,"..","common-"+this.plugin.args.templateName)}appendCmakeResDirArgs(e){e.push(`-DRES_DIR="${cocosCli_1.cchelper.fixPath(this.plugin.projectDir)}"`)}async xcodeDestroyZEROCHECK(){const t=this.plugin.getBuildDir();var e=require("../../static/xcode"),i=fs.readdirSync(t).filter(e=>e.endsWith(".xcodeproj")).map(e=>path.join(t,e));if(0===i.length)console.error("can not find xcode project file in "+t);else try{for(const c of i){var r=path.join(c,"project.pbxproj");console.log("parsing pbxfile "+r);const l=e.project(r);await new Promise((t,i)=>{l.parse(e=>{if(e)return i(e);t(l)})}),console.log("  modifiy Xcode project file "+r);{const p=path.join(this.plugin.projectDir,"assets"),u=l.hash.project.objects,f="Resources",[d]=Object.entries(u.PBXGroup).find(([,e])=>e.name===f);fs.readdirSync(p,{encoding:"utf8"}).filter(e=>"."!==e&&".."!==e).forEach(e=>{var t=path.normalize(path.join(p,e)),i={},i=(fs.statSync(t).isDirectory()&&(i.lastKnownFileType="folder"),l.addFile(t,d,i)),i={fileRef:i.fileRef,uuid:l.generateUuid(),isa:"PBXBuildFile",basename:""+e,group:f},[e]=(l.addToPbxBuildFileSection(i),Object.entries(u.PBXResourcesBuildPhase).find(([e,t])=>e.endsWith("_comment")&&t===f)),e=e.split("_comment")[0];u.PBXResourcesBuildPhase[e].files.push({value:i.uuid,comment:t})})}var a=l.hash.project.objects.PBXShellScriptBuildPhase,o=Object.keys(a),s=[];for(const h of o){var n=a[h];n.name&&0<n.name.indexOf("ZERO_CHECK")&&s.push(n)}s.forEach(e=>e.shellScript=`"echo 'Skip Xcode Update'"`),fs.writeFileSync(r,l.writeSync()),console.log(`  replace pbxfile: ${r}.`)}}catch(e){console.error("disable ZERO_CHECK, failed to update xcode."),console.error(e)}}}class IOSGenerateCMD extends PlatformGenerateCmd{async generate(){var e=this.plugin.getBuildDir();if(this.plugin.args.ios.skipUpdateXcodeProject&&fs.existsSync(path.join(e,"CMakeCache.txt")))console.log("Skip xcode project update");else{var t=path.join(this.plugin.platformTemplatePath,"CMakeLists.txt");if(!fs.existsSync(t))throw new Error("CMakeLists.txt not found in "+t);fs.existsSync(e)||cocosCli_1.cchelper.makeDirectoryRecursive(e);var t=["-DCMAKE_CXX_COMPILER=clang++","-DCMAKE_C_COMPILER=clang"],i=(this.appendCmakeResDirArgs(t),12<=this.plugin.getXcodeMajorVerion()?"12":"1");await this.plugin.runCmake(["-S",""+this.plugin.platformTemplatePath,"-GXcode","-B"+e,"-T","buildsystem="+i,"-DCMAKE_SYSTEM_NAME=iOS"].concat(t)),this.plugin.args.ios.skipUpdateXcodeProject&&await this.xcodeDestroyZEROCHECK()}return!0}}class MacGenerateCMD extends PlatformGenerateCmd{async generate(){var e=this.plugin.getBuildDir();if(this.plugin.args.mac.skipUpdateXcodeProject&&fs.existsSync(path.join(e,"CMakeCache.txt")))console.log("Skip xcode project update");else{var t=path.join(this.plugin.platformTemplatePath,"CMakeLists.txt");if(!fs.existsSync(t))throw new Error("CMakeLists.txt not found in "+t);fs.existsSync(e)||cocosCli_1.cchelper.makeDirectoryRecursive(e);t=12<=this.plugin.getXcodeMajorVerion()?"12":"1",t=["-S",""+this.plugin.platformTemplatePath,"-GXcode","-T","buildsystem="+t,"-B"+e,"-DCMAKE_SYSTEM_NAME=Darwin"];this.appendCmakeResDirArgs(t),await this.plugin.runCmake(t),this.plugin.args.mac.skipUpdateXcodeProject&&await this.xcodeDestroyZEROCHECK()}return!0}}class WindowsGenerateCMD extends PlatformGenerateCmd{async windowsSelectCmakeGeneratorArgs(){console.log("selecting visual studio generator ...");var e=cocosConfig_1.cocosConfig.cmake.windows.generators,t=await afs_1.afs.mkdtemp(path.join(os.tmpdir(),"cmakeTest_")),i=path.join(t,"CMakeLists.txt"),r=path.join(t,"test.cpp"),a=(await afs_1.afs.writeFile(i,`
            cmake_minimum_required(VERSION 3.8)
            set(APP_NAME test-cmake)
            project(\${APP_NAME} CXX)
            add_library(\${APP_NAME} test.cpp)
            `),await afs_1.afs.writeFile(r,`
            #include<iostream>
            int main(int argc, char **argv)
            {
                std::cout << "Hello World" << std::endl;
                return 0;
            }
            `),(t,r)=>new Promise((i,e)=>{childProcess.spawn(this.plugin.getCmakePath(),t,{cwd:r,env:process.env,shell:!0}).on("close",(e,t)=>{i(0===e)})}));const o=[];for(const c of e){var s=path.join(t,"build_"+c.G.replace(/ /g,"_")),n=[`-S"${t}"`,`-G"${c.G}"`,`-B"${s}"`];if(n.push("-A",this.plugin.args.win.targetPlatform),await afs_1.afs.mkdir(s),await a(n,s)){o.push(c.G);break}await cocosCli_1.cchelper.removeDirectoryRecursive(s)}await cocosCli_1.cchelper.removeDirectoryRecursive(t);i=[];return 0===o.length?[]:(r=e.filter(e=>e.G===o[0])[0],i.push("-A",this.plugin.args.win.targetPlatform),console.log(" using "+r.G),i)}async generate(){var e=this.plugin.getBuildDir(),t=path.join(this.plugin.platformTemplatePath,"CMakeLists.txt");if(!fs.existsSync(t))throw new Error("CMakeLists.txt not found in "+t);fs.existsSync(e)||cocosCli_1.cchelper.makeDirectoryRecursive(e);let i=[];if(!fs.existsSync(path.join(e,"CMakeCache.txt"))){const r=this.plugin.getCmakeGenerator();r?0===(t=cocosConfig_1.cocosConfig.cmake.windows.generators.filter(e=>e.G.toLowerCase()===r.toLowerCase())).length?i.push(`-G"${r}"`):(t[0],i.push("-A",this.plugin.args.win.targetPlatform)):i=i.concat(await this.windowsSelectCmakeGeneratorArgs()),this.appendCmakeResDirArgs(i)}return await this.plugin.runCmake([`-S"${cocosCli_1.cchelper.fixPath(this.plugin.platformTemplatePath)}"`,`-B"${cocosCli_1.cchelper.fixPath(e)}"`].concat(i)),!0}}