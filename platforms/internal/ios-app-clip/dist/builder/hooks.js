"use strict";var __createBinding=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[i]}})}:function(e,t,i,r){e[r=void 0===r?i:r]=t[i]}),__setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),__importStar=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&__createBinding(t,e,i);return __setModuleDefault(t,e),t},__importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.onAfterBuild=exports.onAfterInit=exports.throwError=void 0;const path_1=require("path"),fs_1=require("fs"),fs_extra_1=require("fs-extra"),ejs_1=__importDefault(require("ejs")),Editor=__importStar(require("editor")),utils_1=require("./utils"),xcode_proj_injection_1=require("../xcode-proj-injection"),console_1=__importDefault(require("console"));async function onAfterInit(e,t){var i=e.packages["ios-app-clip"].mainPackagePath;if("string"!=typeof i)throw new Error(Editor.I18n.t("ios-app-clip.tips.ios_app_path_error"));if(!fs_1.existsSync(i))throw new Error(`path ${i} does not exist!`);fs_extra_1.ensureDir(path_1.join(i,"ios-app-clip")),t.paths.dir=path_1.join(i,"ios-app-clip"),e.includeModules=e.includeModules.filter(e=>!["gfx-webgl2","gfx-webgl"].includes(e)),e.assetSerializeOptions["cc.EffectAsset"].glsl3=!1,e.assetSerializeOptions["cc.EffectAsset"].glsl4=!1;let r=e.packages["ios-app-clip"].remoteServerAddress||"";r&&!r.endsWith("/")&&(r+="/"),Object.assign(e.appTemplateData,{showFPS:!1,server:r}),Object.assign(e.buildEngineParam,{platform:"NATIVE",engineName:"src/cocos-js"}),fs_extra_1.ensureDirSync(t.paths.dir),fs_extra_1.emptyDirSync(t.paths.dir);i=(await Editor.Message.request("engine","query-info")).nativePath;let s;i=await utils_1.getBrowserslistQuery(i);i&&(s=i),e.buildScriptParam.polyfills=e.packages["ios-app-clip"].polyfills,s&&(e.buildEngineParam.targets=s,e.buildScriptParam.targets=s,e.buildScriptParam.polyfills||(e.buildScriptParam.polyfills={}),e.buildScriptParam.polyfills.targets=s,"asyncFunctions"in e.buildScriptParam.polyfills)&&delete e.buildScriptParam.polyfills.asyncFunctions,e.buildScriptParam.system={preset:"commonjs-like"},await utils_1.outputJSBAdapter(t.paths.dir,{targets:s})}async function onAfterBuild(e,t){var i=e.packages["ios-app-clip"].mainPackagePath,r=e.packages["ios-app-clip"].embedXcodeprojTarget,s=path_1.join(Editor.App.path,"../resources/3d/engine/native"),a=path_1.join(s,"templates/js-template-link/frameworks/runtime-src/proj.ios_mac"),o=utils_1.findXcodeProjects(a);if(1!==o.length)throw new Error(o.length+` Xcode projects found in ${a}, 1 expected`);a=path_1.join(a,o[0]);let n=null;try{r&&(console_1.default.log(`injection AppClip into Xcode project '${r}'`),n=new xcode_proj_injection_1.XcodeProjModifer({appName:e.name,refXcodeProject:a,inputXcodeProj:r,doBackup:!0,cocosRoot:s,projectResDir:i}))}catch(e){if(e.message.indexOf("already loaded")<0)throw e;console_1.default.log("[warning] "+e.message),n=null}!fs_1.existsSync(path_1.join(i,"project.json"))&&fs_1.existsSync(path_1.join(s,"templates/js-template-link/project.json"))&&fs_1.copyFileSync(path_1.join(s,"templates/js-template-link/project.json"),path_1.join(i,"project.json"));o=path_1.join(Build.buildTemplateDir,"ios-app-clip"),fs_1.existsSync(o)&&(fs_extra_1.copySync(o,t.paths.dir),console_1.default.debug(o)),await fs_extra_1.move(path_1.join(t.paths.dir,"application.js"),path_1.join(t.paths.dir,"src","application.js")),e=path_1.join(__dirname,"../../static/builder/index.ejs"),a={polyfillsBundleFile:t.paths.polyfillsJs&&Build.Utils.relativeUrl(t.paths.dir,t.paths.polyfillsJs)||!1,systemJsBundleFile:Build.Utils.relativeUrl(t.paths.dir,t.paths.systemJs),importMapFile:"src/import-map.json"},r=(await ejs_1.default.renderFile(e,a)).toString();await fs_extra_1.writeFile(path_1.join(t.paths.dir,"main.js"),r,"utf8"),null!==n&&(n.write(),console_1.default.log("injection done"))}exports.throwError=!0,exports.onAfterInit=onAfterInit,exports.onAfterBuild=onAfterBuild;