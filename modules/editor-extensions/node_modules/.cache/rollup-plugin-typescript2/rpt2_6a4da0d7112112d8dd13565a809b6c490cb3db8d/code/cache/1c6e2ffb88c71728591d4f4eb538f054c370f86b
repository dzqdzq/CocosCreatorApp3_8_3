{"code":"import fs from 'fs';\r\nimport { basename, join } from 'path';\r\nlet filesList = [];\r\n/**\r\n * 这种格式的时间转为正常的日期\r\n * Thu May 12 2016 08:00:00 GMT+0800 (中国标准时间)\r\n */\r\nfunction convertTime(target) {\r\n    const d = new Date(target);\r\n    return (d.getFullYear() + '-' + (d.getMonth() + 1).toString().padStart(2, '0') + '-' + d.getDate().toString().padStart(2, '0') + ' ' + d.getHours().toString().padStart(2, '0') + ':' + d.getMinutes().toString().padStart(2, '0') + ':' + d.getSeconds().toString().padStart(2, '0'));\r\n}\r\nexport default async function readImageList(path, isSub = false) {\r\n    isSub || (filesList = []);\r\n    const files = fs.readdirSync(path);\r\n    await Promise.all(files.map(async (itm) => {\r\n        const res = join(path, itm);\r\n        const stat = fs.statSync(res);\r\n        if (stat.isDirectory()) {\r\n            // 递归读取文件\r\n            readImageList(res, true);\r\n        }\r\n        else {\r\n            if (itm.endsWith('.png')) {\r\n                const url = await Editor.Message.request('asset-db', 'query-url', res);\r\n                let uuid = null;\r\n                if (url) {\r\n                    uuid = await Editor.Message.request('asset-db', 'query-uuid', url);\r\n                }\r\n                // 定义一个对象存放图片的路径和名字\r\n                const obj = {\r\n                    path: res,\r\n                    filename: itm,\r\n                    size: formatBytes(stat.size),\r\n                    birthtime: convertTime(stat.birthtime),\r\n                    uuid,\r\n                    mtime: convertTime(stat.mtime),\r\n                };\r\n                filesList.push(obj);\r\n            }\r\n        }\r\n    }));\r\n    return filesList;\r\n}\r\nexport async function getImageInfo(imageUUID) {\r\n    const path = await Editor.Message.request('asset-db', 'query-path', imageUUID);\r\n    if (!path) {\r\n        return null;\r\n    }\r\n    try {\r\n        const stat = fs.statSync(path);\r\n        const obj = {\r\n            path,\r\n            filename: basename(path),\r\n            size: formatBytes(stat.size),\r\n            birthtime: convertTime(stat.birthtime),\r\n            uuid: imageUUID,\r\n            mtime: convertTime(stat.mtime),\r\n        };\r\n        return obj;\r\n    }\r\n    catch (error) {\r\n        console.debug(error);\r\n        return null;\r\n    }\r\n}\r\nexport function formatBytes(bytes, decimals = 2) {\r\n    if (bytes === 0) {\r\n        return '0 Bytes';\r\n    }\r\n    const k = 1024;\r\n    const dm = decimals < 0 ? 0 : decimals;\r\n    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\r\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\r\n}\r\n","references":["/Users/mac/Documents/editor_3d/v3.8.3/app/node_modules/path/path.js"]}
