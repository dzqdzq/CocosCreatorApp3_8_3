{"code":"// Settings 编辑器要提供编辑界面\r\n//\r\nexport class LFX_Settings {\r\n    constructor() {\r\n        // 多重采样: 值(1, 2, 4, 8)\r\n        this.MSAA = 4;\r\n        // 高精度模式\r\n        this.Highp = false;\r\n        // 烘培贴图大小: 值(128, 256, 512, 1024, 2048)\r\n        this.Size = 1024;\r\n        // Gamma值\r\n        this.Gamma = 2.2;\r\n        // 天空辐照度(用于全局光照)\r\n        this.SkyRadiance = [0, 0, 0];\r\n        // 全局光照缩放\r\n        this.GIScale = 1.0;\r\n        // 全局光照采样数\r\n        this.GISamples = 25;\r\n        // 全局光照光线最大跟踪次数\r\n        this.GIPathLength = 2;\r\n        // Probe光照缩放\r\n        this.GIProbeScale = 1.0;\r\n        // Probe光照采样数\r\n        this.GIProbeSamples = 1024;\r\n        // Probe光线最大跟踪次数\r\n        this.GIProbePathLength = 2;\r\n        // AO等级(0：关闭，1：低，2：高)\r\n        this.AOLevel = 0;\r\n        // AO强度\r\n        this.AOStrength = 1.0;\r\n        // AO影响的范围\r\n        this.AORadius = 1.0;\r\n        // AO颜色\r\n        this.AOColor = [0.0, 0.0, 0.0];\r\n        // 线程数量\r\n        this.Threads = 1;\r\n        // 过滤开关\r\n        this.Filter = false;\r\n        // 烘培LightMap\r\n        this.BakeLightMap = true;\r\n        // 烘培LightProbe\r\n        this.BakeLightProbe = false;\r\n    }\r\n}\r\nexport class LFX_Vertex {\r\n    constructor() {\r\n        this.Position = [0, 0, 0];\r\n        this.Normal = [0, 0, 0];\r\n        this.UV = [0, 0];\r\n        this.LUV = [0, 0];\r\n    }\r\n}\r\nexport class LFX_Triangle {\r\n    constructor() {\r\n        this.Index = [0, 0, 0];\r\n        this.MaterialId = 0;\r\n    }\r\n}\r\nexport class LFX_Material {\r\n    constructor() {\r\n        this.AlphaCulloff = 0.5;\r\n        this.Metallic = 0;\r\n        this.Roughness = 0;\r\n        // Diffuse color\r\n        this.Diffuse = [1, 1, 1];\r\n        // Emissive color\r\n        this.Emissive = [0, 0, 0];\r\n        // 纹理，(所有'/'或者'\\\\'都必须转换成'$')\r\n        this.Texture = '';\r\n        // 纹理，(所有'/'或者'\\\\'都必须转换成'$')\r\n        //public MetallicMap = '';\r\n        // 纹理，(所有'/'或者'\\\\'都必须转换成'$')\r\n        //public RoughnessMap = '';\r\n        // 纹理，(所有'/'或者'\\\\'都必须转换成'$')\r\n        this.PBRMap = '';\r\n        // 纹理，(所有'/'或者'\\\\'都必须转换成'$')\r\n        this.EmissiveMap = '';\r\n    }\r\n}\r\n// 模型\r\nexport class LFX_Mesh {\r\n    constructor() {\r\n        this.CastShadow = false;\r\n        this.ReceiveShadow = false;\r\n        this.LightMapSize = 0;\r\n        this.VertexBuffer = new Array();\r\n        this.TriangleBuffer = new Array();\r\n        this.MaterialBuffer = new Array();\r\n    }\r\n}\r\n// 地形\r\nexport class LFX_Terrain {\r\n    constructor() {\r\n        this.Position = [0, 0, 0];\r\n        this.TileSize = 0;\r\n        this.BlockCount = [0, 0];\r\n        this.HeightField = new Uint16Array();\r\n        this.LightMapSize = 0;\r\n    }\r\n}\r\n// 灯光\r\nexport class LFX_Light {\r\n    constructor() {\r\n        // 类型\r\n        this.Type = LFX_Light.POINT;\r\n        // 位置\r\n        this.Position = [0, 0, 0];\r\n        // 方向\r\n        this.Direction = [0, 0, 0];\r\n        // 颜色\r\n        this.Color = [0, 0, 0];\r\n        // 强度\r\n        this.Illuminance = 1;\r\n        // 衰减开始距离\r\n        // public AttenStart = 0;\r\n        // 衰减结束距离\r\n        // public AttenEnd = 1;\r\n        this.Size = 0;\r\n        this.Range = 0;\r\n        // 衰减强度\r\n        this.AttenFallOff = 1;\r\n        // 聚光灯内角\r\n        this.SpotInner = 1;\r\n        // 聚光灯外角\r\n        this.SpotOuter = 0.7071;\r\n        // 聚光灯衰减强度\r\n        this.SpotFallOff = 1;\r\n        // 直接光照缩放\r\n        this.DirectScale = 1;\r\n        // 间接光照缩放\r\n        this.IndirectScale = 1;\r\n        // 是否开启全局光照\r\n        this.GIEnable = false;\r\n        // 是否投射阴影\r\n        this.CastShadow = false;\r\n        // 阴影饱和度\r\n        this.ShadowMask = 0.0;\r\n    }\r\n}\r\nLFX_Light.POINT = 0;\r\nLFX_Light.SPOT = 1;\r\nLFX_Light.DIRECTION = 2;\r\n// LightProbe\r\nexport class LFX_LightProbe {\r\n    constructor() {\r\n        // 位置\r\n        this.Position = [0, 0, 0];\r\n        // 法线\r\n        this.Normal = [0, 0, 0];\r\n    }\r\n}\r\n// tslint:disable-next-line: class-name\r\nexport class LFX_Buffer {\r\n    constructor() {\r\n        this.Length = 0;\r\n        this.Buffer = new Uint8Array(2048);\r\n        this._dview = new DataView(this.Buffer.buffer);\r\n        this._seekPos = 0;\r\n    }\r\n    Reserve(size) {\r\n        if (this.Buffer.byteLength > size) {\r\n            return;\r\n        }\r\n        let capacity = this.Buffer.byteLength;\r\n        while (capacity < size) {\r\n            capacity += capacity;\r\n        }\r\n        const temp = new Uint8Array(capacity);\r\n        for (let i = 0; i < this.Length; ++i) {\r\n            temp[i] = this.Buffer[i];\r\n        }\r\n        this.Buffer = temp;\r\n        this._dview = new DataView(this.Buffer.buffer);\r\n    }\r\n    Assign(buff) {\r\n        this.Buffer = buff;\r\n        this.Length = buff.length;\r\n        this._seekPos = buff.byteOffset;\r\n        this._dview = new DataView(buff.buffer);\r\n    }\r\n    WriteInt8(value) {\r\n        this.Reserve(this.Length + 1);\r\n        this._dview.setInt8(this.Length, value);\r\n        this.Length += 1;\r\n    }\r\n    WriteInt16(value) {\r\n        this.Reserve(this.Length + 2);\r\n        this._dview.setInt16(this.Length, value, true);\r\n        this.Length += 2;\r\n    }\r\n    WriteInt32(value) {\r\n        this.Reserve(this.Length + 4);\r\n        this._dview.setInt32(this.Length, value, true);\r\n        this.Length += 4;\r\n    }\r\n    WriteHeightField(value) {\r\n        this.Reserve(this.Length + 2 * value.length);\r\n        for (let i = 0; i < value.length; ++i) {\r\n            this._dview.setUint16(this.Length + i * 2, value[i], true);\r\n        }\r\n        this.Length += 2 * value.length;\r\n    }\r\n    WriteIntArray(value) {\r\n        this.Reserve(this.Length + 4 * value.length);\r\n        for (let i = 0; i < value.length; ++i) {\r\n            this._dview.setInt32(this.Length + i * 4, value[i], true);\r\n        }\r\n        this.Length += 4 * value.length;\r\n    }\r\n    WriteFloat(value) {\r\n        this.Reserve(this.Length + 4);\r\n        this._dview.setFloat32(this.Length, value, true);\r\n        this.Length += 4;\r\n    }\r\n    WriteFloatArray(value) {\r\n        this.Reserve(this.Length + 4 * value.length);\r\n        for (let i = 0; i < value.length; ++i) {\r\n            this._dview.setFloat32(this.Length + i * 4, value[i], true);\r\n        }\r\n        this.Length += 4 * value.length;\r\n    }\r\n    WriteString(value) {\r\n        this.Reserve(this.Length + value.length + 4);\r\n        this._dview.setInt32(this.Length, value.length, true);\r\n        for (let i = 0; i < value.length; ++i) {\r\n            this._dview.setInt8(this.Length + 4 + i, value.charCodeAt(i));\r\n        }\r\n        this.Length += value.length + 4;\r\n    }\r\n    ReadInt8() {\r\n        const value = this._dview.getInt8(this._seekPos);\r\n        this._seekPos += 1;\r\n        return value;\r\n    }\r\n    ReadInt16() {\r\n        const value = this._dview.getInt16(this._seekPos, true);\r\n        this._seekPos += 2;\r\n        return value;\r\n    }\r\n    ReadInt() {\r\n        const value = this._dview.getInt32(this._seekPos, true);\r\n        this._seekPos += 4;\r\n        return value;\r\n    }\r\n    ReadIntArray(value) {\r\n        for (let i = 0; i < value.length; ++i) {\r\n            value[i] = this._dview.getInt32(this._seekPos + i * 4, true);\r\n        }\r\n        this._seekPos += 4 * value.length;\r\n        return value;\r\n    }\r\n    ReadFloat() {\r\n        const value = this._dview.getFloat32(this._seekPos, true);\r\n        this._seekPos += 4;\r\n        return value;\r\n    }\r\n    ReadFloatArray(value) {\r\n        for (let i = 0; i < value.length; ++i) {\r\n            value[i] = this._dview.getFloat32(this._seekPos + i * 4, true);\r\n        }\r\n        this._seekPos += 4 * value.length;\r\n        return value;\r\n    }\r\n    ReadString() {\r\n        const length = this.ReadInt();\r\n        let value = '';\r\n        for (let i = 0; i < length; ++i) {\r\n            value += String.fromCharCode(this.ReadInt8());\r\n        }\r\n        return value;\r\n    }\r\n}\r\n// tslint:disable-next-line: class-name\r\nexport class LFX_World {\r\n    constructor() {\r\n        this.Name = '';\r\n        this.Settings = new LFX_Settings();\r\n        this.Textures = new Array();\r\n        this.Terrains = new Array();\r\n        this.Meshes = new Array();\r\n        this.Lights = new Array();\r\n        this.LightProbes = new Array();\r\n    }\r\n    AddUniqueTexture(tex) {\r\n        if (tex.length > 0) {\r\n            for (const i of this.Textures) {\r\n                if (i === tex) {\r\n                    return tex;\r\n                }\r\n            }\r\n            this.Textures.push(tex);\r\n        }\r\n        return tex;\r\n    }\r\n}\r\n// tslint:disable-next-line: class-name\r\nexport class LFX_TerrainLightMapInfo {\r\n    constructor() {\r\n        this.Id = 0;\r\n        this.BlockId = 0;\r\n        this.Index = 0;\r\n        this.Offset = [0, 0];\r\n        this.Scale = [0, 0];\r\n    }\r\n}\r\n// tslint:disable-next-line: class-name\r\nexport class LFX_MeshLightMapInfo {\r\n    constructor() {\r\n        this.Id = 0;\r\n        this.Index = 0;\r\n        this.Offset = [0, 0];\r\n        this.Scale = [0, 0];\r\n    }\r\n}\r\n// tslint:disable-next-line: class-name\r\nexport class LFX_LightProbeInfo {\r\n    constructor() {\r\n        this.Position = [0, 0, 0];\r\n        this.Normal = [0, 0, 0];\r\n        this.Coefficients = [0];\r\n    }\r\n}\r\n// tslint:disable-next-line: class-name\r\nexport class LFX_File {\r\n    constructor() {\r\n        this.Verison = 0;\r\n        this.MeshInfos = new Array();\r\n        this.TerrainInfos = new Array();\r\n        this.LightProbeInfos = new Array();\r\n    }\r\n}\r\n","references":[]}
