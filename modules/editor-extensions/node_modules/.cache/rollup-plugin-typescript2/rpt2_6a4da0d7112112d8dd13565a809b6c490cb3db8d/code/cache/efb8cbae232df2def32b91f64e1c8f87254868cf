{"code":"'use strict';\r\nimport { LFX_App } from './backer/LFX_App';\r\nimport fs from 'fs';\r\nimport cc from 'cc';\r\nimport ps from 'path';\r\nclass Lightmap {\r\n    constructor() {\r\n        // 当前场景\r\n        this.scene = null;\r\n        this.renderScene = null;\r\n        this._startBakerTim = 0;\r\n    }\r\n    init() {\r\n        this.lfxApp = new LFX_App();\r\n        this.lfxApp.Baker.on('login', (data) => {\r\n            console.debug('lightFX output info: login', data);\r\n            this._startBakerTim = new Date().getTime();\r\n            if (this.lfxApp?.Baker.World.Settings.BakeLightMap) {\r\n                Editor.Message.broadcast('lightmap:start');\r\n            }\r\n            if (this.lfxApp?.Baker.World.Settings.BakeLightProbe) {\r\n                Editor.Message.broadcast('lightmap:light-probe-start');\r\n            }\r\n        });\r\n        this.lfxApp.Baker.on('log', (data) => {\r\n            console.debug('lightFX output info: log', data);\r\n            if (this.lfxApp?.Baker.World.Settings.BakeLightMap) {\r\n                Editor.Message.broadcast('lightmap:log', data);\r\n            }\r\n            if (this.lfxApp?.Baker.World.Settings.BakeLightProbe) {\r\n                Editor.Message.broadcast('lightmap:light-probe-log', data);\r\n            }\r\n        });\r\n        this.lfxApp.Baker.on('progress', (data) => {\r\n            console.debug('lightFX output info: progress', data);\r\n            if (this.lfxApp?.Baker.World.Settings.BakeLightMap) {\r\n                Editor.Message.broadcast('lightmap:progress', data);\r\n            }\r\n            if (this.lfxApp?.Baker.World.Settings.BakeLightProbe) {\r\n                Editor.Message.broadcast('lightmap:light-probe-progress', data);\r\n            }\r\n        });\r\n        this.lfxApp.Baker.on('fineshed', (data) => {\r\n            console.debug('lightFX output info: fineshed', data);\r\n            if (this.lfxApp?.Baker.World.Settings.BakeLightMap) {\r\n                Editor.Message.broadcast('lightmap:finished');\r\n            }\r\n            if (this.lfxApp?.Baker.World.Settings.BakeLightProbe) {\r\n                Editor.Message.broadcast('lightmap:light-probe-finished');\r\n                this.scene?.globals.lightProbeInfo.onProbeBakeFinished();\r\n            }\r\n        });\r\n        this.lfxApp.Baker.on('end', (data) => {\r\n            console.debug('lightFX output info: end', data);\r\n            if (this.lfxApp?.Baker.World.Settings.BakeLightMap) {\r\n                Editor.Message.broadcast('lightmap:end', data);\r\n                // 光源数量 埋点\r\n                this.reportLightMap('A100002', this.lfxApp?.Baker.World.Lights.length);\r\n                // 烘焙时间记录 埋点 单位分钟\r\n                const endBakerTim = Number(((new Date().getTime() - this._startBakerTim) / 1000 / 60).toFixed(2));\r\n                this.reportLightMap('A100000', endBakerTim);\r\n            }\r\n            if (this.lfxApp?.Baker.World.Settings.BakeLightProbe) {\r\n                Editor.Message.broadcast('lightmap:light-probe-end', data);\r\n            }\r\n            cce.Engine.repaintInEditMode();\r\n        });\r\n        this.lfxApp.Baker.on('cancel', (data) => {\r\n            console.debug('lightFX output info: cancel', data);\r\n            if (this.lfxApp?.Baker.World.Settings.BakeLightMap) {\r\n                Editor.Message.broadcast('lightmap:cancel', data);\r\n            }\r\n            if (this.lfxApp?.Baker.World.Settings.BakeLightProbe) {\r\n                Editor.Message.broadcast('lightmap:light-probe-cancel', data);\r\n            }\r\n        });\r\n        // 加载场景\r\n        this.scene = cc.director.getScene();\r\n        cce.Scene.on('open', this.onLoadScene.bind(this));\r\n        cce.Scene.on('reload', this.onLoadScene.bind(this));\r\n    }\r\n    reportLightMap(id, value) {\r\n        const eventValue = {};\r\n        eventValue[id] = value;\r\n        Editor.Metrics.trackEvent({\r\n            sendToNewCocosAnalyticsOnly: true,\r\n            category: 'bakingSystem',\r\n            value: eventValue,\r\n        });\r\n    }\r\n    onLoadScene(scene) {\r\n        this.scene = scene;\r\n        this.renderScene = this.scene.renderScene;\r\n    }\r\n    async apply(data, appPath) {\r\n        if (!fs.existsSync(data.path)) {\r\n            fs.mkdirSync(data.path);\r\n        }\r\n        appPath && (this.lfxApp.Baker.lfxpath = ps.join(appPath, '../tools/lightmap-tools'));\r\n        this.lfxApp.Init(data);\r\n        await this.bake();\r\n    }\r\n    clear() {\r\n        LFX_App.Reset(this.scene);\r\n        cce.Engine.repaintInEditMode();\r\n    }\r\n    async bake() {\r\n        await this.lfxApp.BakeLightMap(this.scene);\r\n    }\r\n    cancel() {\r\n        this.lfxApp.Cancel();\r\n    }\r\n    bakeLightProbe(data, appPath) {\r\n        if (!fs.existsSync(data.path)) {\r\n            fs.mkdirSync(data.path);\r\n        }\r\n        appPath && (this.lfxApp.Baker.lfxpath = ps.join(appPath, '../tools/lightmap-tools'));\r\n        this.lfxApp.Init(data);\r\n        this.lfxApp.BakeLightProbe(this.scene);\r\n        try {\r\n            if (this.scene && this.scene.globals.lightProbeInfo && this.scene.globals.lightProbeInfo.data && this.scene.globals.lightProbeInfo.data.probes) {\r\n                const probes = this.scene.globals.lightProbeInfo.data.probes.length;\r\n                Editor.Metrics._trackEventWithTimer({\r\n                    category: 'bakingSystem',\r\n                    id: 'A100010',\r\n                    value: probes,\r\n                });\r\n            }\r\n        }\r\n        catch (error) {\r\n            console.debug(error);\r\n        }\r\n    }\r\n    cancelLightProbe() {\r\n        this.lfxApp.Cancel();\r\n    }\r\n}\r\nexport default new Lightmap();\r\n","references":["/Users/mac/Documents/editor_3d/v3.8.3/app/modules/editor-extensions/extensions/lightmap/source/lightmap/backer/LFX_App.ts","/Users/mac/Documents/editor_3d/v3.8.3/app/node_modules/cc/cc.d.ts","/Users/mac/Documents/editor_3d/v3.8.3/app/node_modules/path/path.js","/Users/mac/Documents/editor_3d/v3.8.3/app/modules/editor-extensions/extensions/lightmap/source/panel/components/manager.ts"]}
