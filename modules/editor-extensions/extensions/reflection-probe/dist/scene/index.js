"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.unload=exports.load=exports.methods=exports.EditorReflectionProbeManager=exports.BakeCommand=void 0;const cc_1=require("cc"),reflection_probe_1=require("cc/editor/reflection-probe"),child_process_1=require("child_process"),fs_extra_1=require("fs-extra"),graphics_1=require("../utils/graphics"),path_1=require("path");class BakeCommand{get nodeName(){return this.probe.node.name}get uuid(){return this.probe.uuid}constructor(e,t,a){this.probe=e,this.cancel=t,this.stopWaiting=a,this.isCancel=!1,this.stopWaiting=a?.bind(this)}toReflectionProbeBakeInfo(){return{uuid:this.uuid,nodeName:this.nodeName}}}exports.BakeCommand=BakeCommand;class EditorReflectionProbeManager{static GET_INSTANCE(){return this._INSTANCE??new EditorReflectionProbeManager}async onLoad(){this._bindOnAssetChange=this.onAssetChange.bind(this),cce.Asset.addListener("asset-change",this._bindOnAssetChange);var t=(await this._getConfig())?.fileUUIDs;const a=[];if(t instanceof Array){for(let e=0;e<t.length;e++){var s=t[e];"string"!=typeof s||await Editor.Message.request("asset-db","query-asset-info",s)||a.push(s)}t.filter(e=>!a.includes(e)).forEach(e=>this._existFileSet.add(e))}}async loadComponentAsset(e,s){this._existFileSet.add(s.slice(0,s.lastIndexOf("@"))),this._saveProfile();var t,a=await new Promise(a=>{cc_1.assetManager.loadAny(s,(e,t)=>{e?(console.error(`[reflection-probe]: asset can't be load:{asset(${s})},please ensure that resources are imported`),console.error(e),a(null)):a(t)})});a&&(e=cce.Component.query(e))instanceof cc_1.ReflectionProbe&&(t=cce.SceneFacadeManager.beginRecording(e.node.uuid),e.cubemap=a,cce.SceneFacadeManager.endRecording(t),reflection_probe_1.ReflectionProbeManager.probeManager.updateBakedCubemap(e.probe),reflection_probe_1.ReflectionProbeManager.probeManager.updatePreviewSphere(e.probe),cce.Engine.repaintInEditMode())}async onAssetChange(a,e,t){for(const s of this.textureCubeURLMap.keys())if(e.url.startsWith(s)&&e.url!==s)return void this.waitingList.add(a);if(this.textureCubeURLMap.has(e.url)){const i=this.textureCubeURLMap.get(e.url),r=(e,t)=>{this.waitingList.delete(t),Array.from(this.waitingList.values()).some(e=>e.startsWith(a))||(this.loadComponentAsset(i,a),cc_1.assetManager.assetListener.off(a,r))};cc_1.assetManager.assetListener.on(a,r),this.textureCubeURLMap.delete(e.url)}}onUnload(){this.stopBaking(),this._isClearing=!1,this._finished.length=0,cce.Asset.removeListener("asset-change",this._bindOnAssetChange)}stopBaking(){this._bakeQueue.forEach(e=>e.cancel?.()),this._bakeQueue.length=0,this._currentBakingInfo?.cancel?.(),this._currentBakingInfo=void 0,this._isLocked=!1}isBaking(t){return this._bakeQueue.some(e=>e.uuid===t)||this._currentBakingInfo?.uuid===t}bakeCubemaps(e){var t=[],a=cce.Component.queryAll();for(const r in a){var s=a[r];s instanceof cc_1.ReflectionProbe&&s.enabled&&s.node.active&&s.probeType===cc_1.renderer.scene.ProbeType.CUBE&&(e&&!e.includes(s.uuid)||t.push(s))}this._isLocked=!0;for(let e=0;e<t.length;e++){var i=t[e];this._bakeCubemap(i)}this._currentBakingInfo?this._broadcast("reflection-probe:update-bake-info",this.queryAllBakeInfos()):this.nextTick()}queryAllBakeInfos(){return{remaining:this._bakeQueue.map(e=>e.toReflectionProbeBakeInfo()),currentInfo:this._currentBakingInfo?.toReflectionProbeBakeInfo(),finished:this._finished}}async clearResults(){let t=!1;var e=cce.Component.queryAll();for(const i in e){var a=e[i];if(a instanceof cc_1.ReflectionProbe&&a.cubemap?.uuid){let e=a.cubemap.uuid;e=e.slice(0,e.lastIndexOf("@"));var s=await Editor.Message.request("asset-db","query-url",e);s&&await Editor.Message.request("asset-db","delete-asset",s),this._existFileSet.delete(e),a.clearBakedCubemap(),t=!0}}t&&(cce.Engine.repaintInEditMode(),this._saveProfile())}cancelBakes(t){if(t)for(let e=0;e<t.length;e++){const a=t[e];this._currentBakingInfo?.uuid===a?this._currentBakingInfo.cancel():this._bakeQueue.find(e=>e.uuid===a)?.cancel()}else this._bakeQueue.forEach(e=>e.cancel()),this._currentBakingInfo?.cancel()}"start-bake"(e){return this.bakeCubemaps(e)}"cancel-bake"(e){return this.cancelBakes(e)}async"clear-results"(){this._isClearing=!0,this._broadcast("reflection-probe:clear-end",this._isClearing);try{await this.clearResults()}catch(e){console.debug("[reflection-probe]: Clear result failed",e)}this._isClearing=!1,this._broadcast("reflection-probe:clear-end",this._isClearing)}"query-bake-info"(){return this.queryAllBakeInfos()}"query-is-clearing"(){return this._isClearing}get isBusy(){return this._isLocked}async _saveProfile(){await Editor.Profile.setProject("scene",EditorReflectionProbeManager._FILE_UUIDS_PROFILE_PATH,[...this._existFileSet.values()])}async _getConfig(){return Editor.Profile.getConfig("scene",EditorReflectionProbeManager._FILE_UUIDS_PROFILE_PATH,"local")}constructor(){this.waitingList=new Set,this.textureCubeURLMap=new Map,this._existFileSet=new Set,this._bakeQueue=[],this._isLocked=!1,this._isClearing=!1,this._finished=[],EditorReflectionProbeManager._INSTANCE=this}_broadcast(e,...t){if(!EditorReflectionProbeManager.BROADCAST_MESSAGE.includes(e))throw new Error(`[reflection-probe]: message: ${e} is not exist`);Editor.Message.broadcast(e,...t)}nextTick(){var e=this._bakeQueue.pop();e?e.stopWaiting():(this._isLocked=!1,this._currentBakingInfo=void 0,this._finished.length=0),this._broadcast("reflection-probe:update-bake-info",this["query-bake-info"]())}async _bakeCubemap(t){t=t instanceof cc_1.ReflectionProbe?t:cce.Component.query(t);if(t instanceof cc_1.ReflectionProbe&&t.enabled){const i=new BakeCommand(t,()=>{throw i.isCancel=!0,"cancel"});try{this.isBaking(t.uuid)||(this._isLocked&&await new Promise((e,t)=>{i.cancel=()=>{i.isCancel=!0,t("cancel")},i.stopWaiting=()=>e(void 0),this._bakeQueue.push(i)}),this._isLocked=!0,this._currentBakingInfo=i,this._broadcast("reflection-probe:update-bake-info",this["query-bake-info"]()),this._broadcast("reflection-probe:bake-start",i.toReflectionProbeBakeInfo()),this._captureCube(t).then(e=>{this._broadcast("reflection-probe:bake-end",null,i.toReflectionProbeBakeInfo())}).catch(e=>{this._broadcast("reflection-probe:bake-end",e,i.toReflectionProbeBakeInfo())}).finally(()=>{this._finished.push(i.toReflectionProbeBakeInfo()),this.nextTick()}))}catch(e){if("cancel"===e){t=this._bakeQueue.findIndex(e=>e.uuid===i.uuid);if(-1!==t){this._bakeQueue.splice(t,1);for(var[a,s]of this.textureCubeURLMap.entries())if(s===i.uuid){this.textureCubeURLMap.delete(a);break}}}}}}async _captureCube(a){this._currentBakingInfo,a.probe.captureCubemap(),this._assertNotCancel(),await this._waitForNextFrame();var s=cc_1.director.root.device.capabilities,i=[];for(let t=0;t<6;t++){this._assertNotCancel();var r=`capture_${t}.png`;i.push(r);let e=(0,graphics_1.readPixels)(a.probe.bakedCubeTextures[t]);-1===s.clipSpaceMinZ&&(e=(0,graphics_1.flipImage)(e,a._resolution,a._resolution)),(0,cc_1.assert)(null!==e),await(0,graphics_1.saveDataToImage)(Buffer.from(e),a._resolution,a._resolution,a.node.scene.name,r)}this._assertNotCancel();await this._bakeReflectionProbe(i,!0,a.node.scene.name,a.uuid,a.probe.getProbeId(),a.fastBake),cce.Engine.repaintInEditMode()}async _waitForNextFrame(){return new Promise((e,t)=>{cc_1.director.once(cc_1.Director.EVENT_END_FRAME,()=>{e()}),cce.Engine.repaintInEditMode()})}_assertNotCancel(){if(this._currentBakingInfo?.isCancel)throw"cancel"}async _bakeReflectionProbe(t,e,a,i,r,n){var o=await Editor.Message.request("asset-db","query-path","db://assets");if(null===o)console.error("[reflection-probe]: no asset directory");else{var c=[];for(let e=0;e<t.length;e++){var l=t[e],l=(0,path_1.join)(o,a,l);c.push(l),(0,fs_extra_1.existsSync)(l)||console.error(`[reflection-probe]: ${l} not exist`)}var u=(0,path_1.join)(o,a),d=((0,fs_extra_1.existsSync)(u)||(0,fs_extra_1.mkdirSync)(u),(0,path_1.join)(u,"reflectionProbe")),h=d+"_"+r.toString(),d=d+"_"+r.toString()+".png",f=`db://assets/${a}/reflectionProbe_${r.toString()}.png`,_=f+"/textureCube";let s;var h=["--bypassoutputtype","--output0params","png,"+(e?"rgbm":"bgra8")+",latlong","--inputFacePosX",c[0],"--inputFaceNegX",c[1],"--inputFacePosY",c[2],"--inputFaceNegY",c[3],"--inputFacePosZ",c[4],"--inputFaceNegZ",c[5],"--output0",h],b=(e&&h.splice(0,0,"--rgbm"),this._assertNotCancel(),s="darwin"===process.platform?(0,child_process_1.spawn)((0,path_1.join)(Editor.App.path,"../tools/cmft/cmftRelease64"),h):(0,child_process_1.spawn)((0,path_1.join)(Editor.App.path,"../tools/cmft/cmftRelease64.exe"),h),await new Promise((t,a)=>{const e=e=>{(0!==e?(console.error("[reflection-probe]: bake reflectionProbe failed."),console.error(e),a):t)(e)};this._currentBakingInfo.cancel=()=>{this._currentBakingInfo.isCancel=!0,s.removeListener("close",e),s.kill(),a("cancel")},s.on("close",e)}),(0,path_1.join)(u,`reflectionProbe_${r.toString()}_convolution`));for(let e=0;e<6;e++){var p=(0,path_1.join)(b,"mipmap_"+e.toString()+".png");(0,fs_extra_1.existsSync)(p)&&(0,fs_extra_1.removeSync)(p)}this._assertNotCancel();for(let e=0;e<c.length;e++)(0,fs_extra_1.removeSync)(c[e]);e=d+".meta",h=n?1:2,u={ver:"0.0.0",importer:"*",userData:{type:"texture cube",isRGBE:!0},subMetas:{b47c0:{userData:{mipBakeMode:h}}}};this.textureCubeURLMap.set(_,i),(0,fs_extra_1.existsSync)(e)?"texture cube"===(u=(0,fs_extra_1.readJSONSync)(e)).userData?.type&&u.subMetas?.b47c0?.userData?.mipBakeMode===h||(u.userData.type="texture cube",u.userData.isRGBE=!0,u.subMetas??={},u.subMetas.b47c0??={},u.subMetas.b47c0.userData??={},u.subMetas.b47c0.userData.mipBakeMode=h,this._assertNotCancel(),(0,fs_extra_1.outputJSONSync)(e,u,{spaces:2})):((0,fs_extra_1.outputJSONSync)(e,u,{spaces:2}),await Editor.Message.request("asset-db","refresh-asset",f)),await Editor.Message.request("asset-db","refresh-asset",(0,path_1.join)(o,a)),this._assertNotCancel()}}}(exports.EditorReflectionProbeManager=EditorReflectionProbeManager)._FILE_UUIDS_PROFILE_PATH="reflection-probe.fileUUIDs",EditorReflectionProbeManager.BROADCAST_MESSAGE=["reflection-probe:bake-end","reflection-probe:bake-start","reflection-probe:clear-end","reflection-probe:update-bake-info"];const instance=EditorReflectionProbeManager.GET_INSTANCE();async function load(){await instance.onLoad()}function unload(){instance.onUnload()}exports.methods={"start-bake":e=>instance["start-bake"](e),"cancel-bake":e=>instance.cancelBakes(e),"clear-results":async()=>instance["clear-results"](),"query-bake-info":()=>instance.queryAllBakeInfos(),"query-is-clearing":()=>instance["query-is-clearing"]()},exports.load=load,exports.unload=unload;