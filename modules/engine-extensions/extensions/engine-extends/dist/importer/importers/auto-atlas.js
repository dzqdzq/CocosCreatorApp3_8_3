"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.AutoAtlasImporter=void 0;const asset_db_1=require("@editor/asset-db"),texture_base_1=require("./texture-base"),migrations_1=require("./image/migrations"),utils_1=require("../utils"),defaultAutoAtlasUserData={maxWidth:1024,maxHeight:1024,padding:2,allowRotation:!0,forceSquared:!1,powerOfTwo:!1,algorithm:"MaxRects",format:"png",quality:80,contourBleed:!0,paddingBleed:!0,filterUnused:!0,removeTextureInBundle:!0,removeImageInBundle:!0,removeSpriteAtlasInBundle:!0,compressSettings:{},textureSetting:texture_base_1.makeDefaultTextureBaseAssetUserData()};class AutoAtlasImporter extends asset_db_1.Importer{get version(){return"1.0.8"}get name(){return"auto-atlas"}get assetType(){return"cc.SpriteAtlas"}get migrations(){return[{version:"1.0.5",migrate:migrations_1.migratePlatformSettings},{version:"1.0.6",migrate:e=>{const t=e.userData;["removeTextureInBundle","removeImageInBundle","removeSpriteAtlasInBundle"].forEach(e=>{"boolean"!=typeof t[e]&&(t[e]=!1)})}},{version:"1.0.8",migrate:e=>{e=e.userData;e.allowRotation||(e.allowRotation=!0),e.algorithm&&"MaxRects"===e.algorithm||(e.algorithm="MaxRects")}}]}async import(e){const t=e.userData;Object.keys(defaultAutoAtlasUserData).forEach(e=>{e in t||(t[e]=defaultAutoAtlasUserData[e])});var a=new cc.SpriteAtlas,a=(a.name=e.basename||"",EditorExtends.serialize(a)),a=(await e.saveToLibrary(".json",a),utils_1.getDependUUIDList(a));return e.setData("depends",a),!0}}exports.AutoAtlasImporter=AutoAtlasImporter;