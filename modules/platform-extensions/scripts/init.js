"use strict";const{existsSync,writeFileSync}=require("fs"),{readJSONSync,outputJSONSync}=require("fs-extra"),{join,relative,dirname}=require("path"),defaultConfig={};function fillConfig(e){let n=!1;return("string"!=typeof e.enginePath||defaultConfig.enginePath&&defaultConfig.enginePath!==e.enginePath)&&(e.enginePath=defaultConfig.enginePath||"",n=!0),n}process.argv.forEach(e=>{e=e.split("=");2<=e.length&&(defaultConfig[e[0].substr(2)]=e[1])});const configFile=join(__dirname,"../config.json");if(existsSync(configFile))try{const e=readJSONSync(configFile),f=fillConfig(e);f&&writeFileSync(configFile,JSON.stringify(e,null,4))}catch(e){console.error("config.json 格式错误，请检查文件内容"),console.error(e)}else{const h={};fillConfig(h),writeFileSync(configFile,JSON.stringify(h,null,4))}const relateNativePackToolPackage=["native","linux"],extensionBasePath=join(__dirname,"../extensions");relateNativePackToolPackage.forEach(e=>{try{var n=join(extensionBasePath,e,"tsconfig.json"),i=readJSONSync(n);i.compilerOptions.paths["native-pack-tool"]=[relative(dirname(n),join(defaultConfig.enginePath,"scripts/native-pack-tool")).replace(/\\/g,"/")],outputJSONSync(n,i,{spaces:4})}catch(e){console.error("native-pack-tools 模块路径生成失败"),console.error(e)}}),console.log("初始化配置成功");