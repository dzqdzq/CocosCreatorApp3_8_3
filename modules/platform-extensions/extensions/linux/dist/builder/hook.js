"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.onAfterBundleInit=exports.onAfterInit=exports.throwError=void 0;const fs_extra_1=require("fs-extra"),path_1=require("path");exports.throwError=!0;let nativePackToolManager=null;async function onAfterInit(e,t,a){const i=e.packages.linux.renderBackEnd={gles2:!1,gles3:!1,metal:!0},n=t.compileOptions;Object.keys(i).forEach(e=>{n.cMakeConfig["CC_USE_"+e.toUpperCase()]=i[e]}),n.cMakeConfig.USE_SERVER_MODE=`set(USE_SERVER_MODE ${e.packages.native.serverMode?"ON":"OFF"})`;var r=Number(e.packages.native.netMode);e.packages.native.netMode=isNaN(r)||2<r||r<0?0:r;n.cMakeConfig.NET_MODE=`set(NET_MODE ${e.buildScriptParam.flags.NET_MODE})`,await(0,fs_extra_1.outputJSON)(t.paths.compileConfig,n),await getNativePackToolMg(n.enginePath||e.engineInfo.typescript.path)}function onAfterBundleInit(e){var t=Number(e.packages.native.netMode),t=e.packages.native.netMode=isNaN(t)||2<t||t<0?0:t;e.buildScriptParam.flags.SERVER_MODE=!!e.packages.native.serverMode,e.buildScriptParam.flags.NET_MODE=t,e.buildScriptParam.platform="LINUX"}async function getNativePackToolMg(e=""){if(!nativePackToolManager){var t=require((0,path_1.join)(e,"scripts/native-pack-tool/dist/index")).NativePackTool,e=require((0,path_1.join)(e,"scripts/native-pack-tool/dist/index")).nativePackToolMg;class a extends t{async create(){return await this.copyCommonTemplate(),await this.copyPlatformTemplate(),await this.generateCMakeConfig(),await this.excuteCocosTemplateTask(),this.generateCMakeConfig(),await this.encrypteScripts(),!0}}t=new a;e.register("linux",t),nativePackToolManager=e}return nativePackToolManager}exports.onAfterInit=onAfterInit,exports.onAfterBundleInit=onAfterBundleInit;