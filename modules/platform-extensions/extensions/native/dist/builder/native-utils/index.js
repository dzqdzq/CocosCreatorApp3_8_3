"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.checkName=exports.acceptChineseName=exports.packToolHandler=exports._createBundle=exports.checkLiteVersion=exports.generateJsbAdapter=exports.compileJsbAdapter=exports.clearDest=void 0;const fs_extra_1=require("fs-extra"),path_1=require("path"),babelify=require("babelify"),browserify=require("browserify");async function clearDest(e){try{await(0,fs_extra_1.remove)((0,path_1.join)(e,"data"))}catch(e){console.error(e)}}async function compileJsbAdapter(){var e,t=(await Editor.Message.request("engine","query-engine-info")).typescript,a=(0,path_1.join)(t.path,"platforms/native"),t=(0,path_1.join)(t.path,"bin/.cache/dev/native-preview-adapter");hasChanged(a,t)&&(e=(0,path_1.join)(a,"builtin/index.js"),a=(0,path_1.join)(a,"engine/index.js"),await _createBundle(e,(0,path_1.join)(t,"web-adapter.js"),{targets:"chrome 80"}),await _createBundle(a,(0,path_1.join)(t,"engine-adapter.js"),{targets:"chrome 80"}))}async function generateJsbAdapter(e,t){var e=(0,path_1.join)(e,"platforms/native"),a=(0,path_1.join)(e,"builtin/index.js"),e=(0,path_1.join)(e,"engine/index.js");await _createBundle(a,(0,path_1.join)(t,"web-adapter.js"),{targets:"chrome 80"}),await _createBundle(e,(0,path_1.join)(t,"engine-adapter.js"),{targets:"chrome 80"})}async function checkLiteVersion(e){e=(0,path_1.join)(e,".cocos-project.json");(0,fs_extra_1.existsSync)(e)?(await(0,fs_extra_1.readJSON)(e)).engine_version:console.error(`Can't find project json [{link(${e})}]`)}function checkFileStat(a,r){return(0,fs_extra_1.readdirSync)(a).some(e=>{var e=(0,path_1.join)(a,e),t=(0,fs_extra_1.statSync)(e);return t.isDirectory()?checkFileStat(e,r):t.mtime.getTime()>r||void 0})}function hasChanged(e,t){var a,r;return!(0,fs_extra_1.existsSync)(t)||(r=(0,path_1.join)(t,"web-adapter.js"),a=(0,path_1.join)(t,"engine-adapter.js"),!(0,fs_extra_1.existsSync)(r))||!(0,fs_extra_1.existsSync)(a)||(r=(0,fs_extra_1.statSync)(t),checkFileStat((0,path_1.dirname)(e),r.mtime.getTime()))}async function _createBundle(e,n,t){let a,i;Array.isArray(t)?a=t:t&&(a=t.excludes,i=t.targets);const s=browserify(e);return a&&a.forEach(function(e){s.exclude(e)}),await(0,fs_extra_1.ensureDir)((0,path_1.dirname)(n)),new Promise((a,r)=>{s.transform(babelify,{presets:[[require("@babel/preset-env"),{targets:i}]]}).bundle((e,t)=>{e?(console.error(e),r(e)):((0,fs_extra_1.writeFileSync)(n,t,"utf8"),a())})})}exports.clearDest=clearDest,exports.compileJsbAdapter=compileJsbAdapter,exports.generateJsbAdapter=generateJsbAdapter,exports.checkLiteVersion=checkLiteVersion,exports._createBundle=_createBundle;class PackToolHandler{constructor(){this._init=!1}get ready(){return this._init}async init(e){this._init||(this.packRoot=(0,path_1.join)(e,"scripts","native-pack-tool"),this.manager=require((0,path_1.join)(this.packRoot,"dist/index")).nativePackToolMg)}async runTask(e,t){this.ready||await this.init(t.enginePath),await this.manager.init(t),await this.manager[e](t.platform)}}function acceptChineseName(e){return["mac","ios","windows","android"].includes(e.platform)}function checkName(e,t){return(acceptChineseName(t)?/^[\u4e00-\u9fa5A-Za-z0-9-_]+$/:/^[A-Za-z0-9-_]+$/).test(e)}exports.packToolHandler=new PackToolHandler,exports.acceptChineseName=acceptChineseName,exports.checkName=checkName;