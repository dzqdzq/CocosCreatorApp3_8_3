"use strict";var __createBinding=this&&this.__createBinding||(Object.create?function(i,e,t,a){void 0===a&&(a=t),Object.defineProperty(i,a,{enumerable:!0,get:function(){return e[t]}})}:function(i,e,t,a){i[a=void 0===a?t:a]=e[t]}),__setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(i,e){Object.defineProperty(i,"default",{enumerable:!0,value:e})}:function(i,e){i.default=e}),__importStar=this&&this.__importStar||function(i){if(i&&i.__esModule)return i;var e={};if(null!=i)for(var t in i)"default"!==t&&Object.prototype.hasOwnProperty.call(i,t)&&__createBinding(e,i,t);return __setModuleDefault(e,i),e};Object.defineProperty(exports,"__esModule",{value:!0}),exports.CCPluginCOMPILE=void 0;const cocosCli_1=require("./cocosCli"),path=__importStar(require("path")),cocosConfig_1=require("./cocosConfig"),fs=__importStar(require("fs-extra")),default_1=require("./default"),native_utils_1=require("../builder/native-utils"),PackageNewConfig="cocos-project-template.json";class CCPluginCOMPILE extends cocosCli_1.CCPlugin{depends(){return default_1.PLUGIN_NAME_ENUM.GENERATE}init(){return!0}async run(){return await this.compilePlatform(this.getPlatform()),!0}async compilePlatform(i){var e=this.getCurrentPlatform(),t=cocosConfig_1.cocosConfig.availableTargetPlatforms[e];t?t.indexOf(i)<0?console.error(`target platform "${i}" is not listed [${t.join(", ")}]`):i===default_1.PLATFORM_ENUM.MAC?await this.compileMac():i===default_1.PLATFORM_ENUM.IOS?await this.compileIos():i===default_1.PLATFORM_ENUM.WINDOWS?await this.compileWindows():i===default_1.PLATFORM_ENUM.ANDROID||i===default_1.PLATFORM_ENUM["HUAWEI-AGC"]||i===default_1.PLATFORM_ENUM["XR-HUAWEIVR"]||i===default_1.PLATFORM_ENUM["XR-META"]||i===default_1.PLATFORM_ENUM["XR-PICO"]||i===default_1.PLATFORM_ENUM["XR-ROKID"]||i===default_1.PLATFORM_ENUM["XR-MONADO"]?await this.compileAndroid():i===default_1.PLATFORM_ENUM.OHOS&&await this.compileOHOS():console.error(`current host platform ${e} is not supported.`)}async compileAndroid(){await new AndroidCompileCMD(this).compile()}async compileIos(){await new IOSCompileCMD(this).compile()}async compileMac(){await new MacCompileCMD(this).compile()}async compileWindows(){await new WindowsCompileCMD(this).compile()}async compileOHOS(){await new OHOSCompileCMD(this).compile()}}exports.CCPluginCOMPILE=CCPluginCOMPILE;class PlatformCompileCmd{constructor(i){this.plugin=i}}class IOSCompileCMD extends PlatformCompileCmd{async compile(){if(this.plugin.args.ios.iphoneos&&!this.plugin.getAppTeamId())throw new Error("Error: Try to build iphoneos application but no developer team id was given!");var i=this.plugin.getBuildDir(),e=this.plugin.args.projectName,t=require("os").cpus(),t=t&&t[0]&&t[0].model?t[0].model:"";/Apple/.test(t);const a=new RegExp(e+".xcworkspace$");t=fs.readdirSync(i).find(i=>a.test(i));return t?(e=`-workspace ${i}/${t} -scheme ALL_BUILD `+`-parallelizeTargets -quiet -configuration ${this.plugin.args.debug?"Debug":"Release"} `+"-hideShellScriptEnvironment -allowProvisioningUpdates SYMROOT="+i,this.plugin.args.ios.simulator&&await this.plugin.runXcodeBuild(["-destination generic/platform='iOS Simulator'",e,"CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO"]),this.plugin.args.ios.iphoneos&&await this.plugin.runXcodeBuild(["-destination generic/platform='iOS'",e,"DEVELOPMENT_TEAM="+this.plugin.args.teamid])):(t=`--build ${i} --config ${this.plugin.args.debug?"Debug":"Release"} -- -allowProvisioningUpdates -quiet`,this.plugin.args.ios.iphoneos&&await this.plugin.runCmake([t,"-sdk","iphoneos","-arch arm64"]),this.plugin.args.ios.simulator&&await this.plugin.runCmake([t,"-sdk","iphonesimulator","-arch x86_64"])),!0}}class MacCompileCMD extends PlatformCompileCmd{async compile(){var i=this.plugin.getBuildDir(),e=this.plugin.isAppleSilicon()?"-arch arm64":"-arch x86_64";return await this.plugin.runCmake(["--build",""+i,"--config",this.plugin.args.debug?"Debug":"Release","--","-quiet",e]),!0}}class WindowsCompileCMD extends PlatformCompileCmd{async compile(){var i=this.plugin.getBuildDir();return await this.plugin.runCmake(["--build",`"${cocosCli_1.cchelper.fixPath(i)}"`,"--config",this.plugin.args.debug?"Debug":"Release","--","-verbosity:quiet"]),!0}}class AndroidCompileCMD extends PlatformCompileCmd{async compile(){native_utils_1.mergeAndroidPlatformConfig(this);this.plugin.getBuildDir();var i=path.join(this.plugin.projectDir,"proj");if(!fs.existsSync(i))return console.error(`dir ${i} not exits`),!1;let e="gradlew",t=(this.plugin.getCurrentPlatform()===default_1.PLATFORM_ENUM.WINDOWS&&(e+=".bat"),e=path.join(i,e),"");var a=this.plugin.args.debug?"Debug":"Release";return t=this.plugin.args.projectName+":assemble"+a,await cocosCli_1.cchelper.runCmd(e,[t],!1,i),this.plugin.args.android.androidInstant&&(t="instantapp:assemble"+a,await cocosCli_1.cchelper.runCmd(e,[t],!1,i)),this.plugin.args.android.appBundle&&(t=this.plugin.args.android.androidInstant?"bundle"+a:this.plugin.args.projectName+":bundle"+a,await cocosCli_1.cchelper.runCmd(e,[t],!1,i)),this.copyToDist()}async copyToDist(){var i=this.plugin.args.debug?"debug":"release",e=path.join(this.plugin.projectDir,"publish",i);fs.ensureDirSync(e);let t=this.plugin.args.projectName+`-${i}.apk`,a=path.join(this.plugin.projectDir,`proj/build/${this.plugin.args.projectName}/outputs/apk/${i}/`+t);if(!fs.existsSync(a))return console.error("apk not found at ",a),!1;if(fs.copyFileSync(a,path.join(e,t)),this.plugin.args.android.androidInstant){if(t=`instantapp-${i}.apk`,a=path.join(this.plugin.projectDir,`proj/build/instantapp/outputs/apk/${i}/`+t),!fs.existsSync(a))return console.error("instant apk not found at ",a),!1;fs.copyFileSync(a,path.join(e,t))}if(this.plugin.args.android.appBundle){if(t=this.plugin.args.projectName+`-${i}.aab`,a=path.join(this.plugin.projectDir,`proj/build/${this.plugin.args.projectName}/outputs/bundle/${i}/`+t),!fs.existsSync(a))return console.error("instant apk not found at ",a),!1;fs.copyFileSync(a,path.join(e,t))}return!0}}class OHOSCompileCMD extends PlatformCompileCmd{async compile(){cocosCli_1.cchelper.checkJavaHome();var i=this.plugin.platformTemplatePath;let e="gradlew";this.plugin.getCurrentPlatform()===default_1.PLATFORM_ENUM.WINDOWS&&(e+=".bat"),e=path.join(i,e);try{fs.accessSync(e,fs.constants.X_OK)}catch(i){fs.chmodSync(e,508)}var t="assemble"+(this.plugin.args.debug?"Debug":"Release");return await cocosCli_1.cchelper.runCmd(e,[t],!1,i),!0}}