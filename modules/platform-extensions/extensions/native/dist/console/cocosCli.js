"use strict";var ArgumentItemType,__createBinding=this&&this.__createBinding||(Object.create?function(e,t,r,s){void 0===s&&(s=r),Object.defineProperty(e,s,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,s){e[s=void 0===s?r:s]=t[r]}),__setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),__importStar=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&__createBinding(t,e,r);return __setModuleDefault(t,e),t};Object.defineProperty(exports,"__esModule",{value:!0}),exports.NativeConsole=exports.cchelper=exports.EXT_LIST=exports.CCPlugin=exports.pa=void 0;const fs=__importStar(require("fs")),path=__importStar(require("path")),ml=__importStar(require("./multiLanguage")),cocosConfig_1=require("./cocosConfig"),os=__importStar(require("os")),afs_1=require("./afs"),childProcess=__importStar(require("child_process")),default_1=require("./default"),iconv=require("iconv-lite");!function(e){e[e.BOOLFLAG=0]="BOOLFLAG",e[e.STRINGVALUE=1]="STRINGVALUE",e[e.ACTION=2]="ACTION",e[e.ENUM=3]="ENUM"}(ArgumentItemType=ArgumentItemType||{}),exports.pa={help:{short:"-h",long:"--help",help:"show this message",argType:ArgumentItemType.ACTION},srcDir:{short:"-s",long:"--src",help:ml.getString("COCOSHELPARGSRC"),argType:ArgumentItemType.STRINGVALUE},quiet:{short:"-q",long:"--quiet",help:ml.getString("COCOS_HELP_ARG_QUIET"),argType:ArgumentItemType.BOOLFLAG},platform:{short:"-p",long:"--platform",help:ml.getString("COCOSHELPARGPLATFORM"),argType:ArgumentItemType.ENUM,enumValues:cocosConfig_1.cocosConfig.platforms},doListPlatforms:{short:"",long:"--list-platforms",help:"list available platforms",argType:ArgumentItemType.ACTION},projDir:{short:"",long:"--proj-dir",help:ml.getString("COCOSHELPARGPROJDIR"),argType:ArgumentItemType.STRINGVALUE},buildDir:{short:"",long:"--build-dir",help:"specify directory where to build project",argType:ArgumentItemType.STRINGVALUE},packageName:{short:"-p",long:"--package",help:ml.getString("NEWARGPACKAGE"),argType:ArgumentItemType.STRINGVALUE},directory:{short:"-d",long:"--directory",help:ml.getString("NEWARGDIR"),argType:ArgumentItemType.STRINGVALUE},iosBundleid:{short:"",long:"--ios-bundleid",help:ml.getString("NEWARGIOSBUNDLEID"),argType:ArgumentItemType.STRINGVALUE},macBundleid:{short:"",long:"--mac-bundleid",help:ml.getString("NEWARGMACBUNDLEID"),argType:ArgumentItemType.STRINGVALUE},enginePath:{short:"-e",long:"--engine-path",help:ml.getString("NEWARGENGINEPATH"),argType:ArgumentItemType.STRINGVALUE},portrait:{short:"",long:"--portrait",help:ml.getString("NEWARGPORTRAIT"),argType:ArgumentItemType.BOOLFLAG},noNative:{short:"",long:"--no-native",help:ml.getString("NEWARGNONATIVE"),argType:ArgumentItemType.BOOLFLAG},language:{short:"-l",long:"--language",help:ml.getString("NEWARGLANG"),argType:ArgumentItemType.ENUM,enumValues:cocosConfig_1.cocosConfig.languages},doListTemplates:{short:"",long:"--list-templates",help:"List available templates. To be used with --template option.",argType:ArgumentItemType.ACTION},templateName:{short:"-k",long:"--template-name",help:"Name of the template to be used to create the game. To list available names, use --list-templates.",argType:ArgumentItemType.STRINGVALUE},cmakeGenerator:{short:"-G",long:"--cmake-generator",help:"Set cmake generator",argType:ArgumentItemType.STRINGVALUE},cmakePath:{short:"",long:"--cmake-path",help:"path to cmake.exe or cmake",argType:ArgumentItemType.STRINGVALUE},iosSimulator:{short:"",long:"--ios-simulator",help:"enable iOS simulator support",argType:ArgumentItemType.BOOLFLAG},teamid:{short:"",long:"--team-id",help:"Apple developer team id",argType:ArgumentItemType.STRINGVALUE},sharedDir:{short:"",long:"--shared-dir",help:"Shared source directory",argType:ArgumentItemType.STRINGVALUE}};class CCPlugin{constructor(e){this._cocos2dPath=null,this._templatePath=null,this._pluginName=null,this.extArgs=[],this.parser=e,this.nativeTemplateDir=path.join(Editor.Project.path,"native","engine")}get platformTemplatePath(){return path.join(this.nativeTemplateDir,this.platformTemplateDirName)}get sourceTemplatePath(){return path.join(this.getTemplatesRootPath(),this.parser.platform)}get platformTemplateDirName(){let e=this.parser.platform;return e=e===default_1.PLATFORM_ENUM.WINDOWS?"win64":e}extendArgv(e){this.extArgs=this.extArgs.concat(e)}getCocosRoot(){var e=this.getEnginePath();return e||(this._cocos2dPath||(this._cocos2dPath=path.join(__dirname,"../../.."),fs.existsSync(path.join(this._cocos2dPath,"cocos")))||(console.warn(ml.getString("COCOS_WARNING_ENGINE_NOT_FOUND")),this._cocos2dPath=null),this._cocos2dPath)}getConsleRoot(){var e=this.getEnginePath();return e?path.join(e,"tools/cocos-console"):path.join(__dirname,"..")}getTemplatesRootPath(){return this.args.templatePath}get projectDir(){var e=this.args.directory;return cchelper.replaceEnvVariables(e)}getCmakeGenerator(){return this.args.cmakeGenerator}getBuildDir(){return this.args.buildDir}isAppleSilicon(){var e=os.cpus(),e=e&&e[0]&&e[0].model?e[0].model:"";return/Apple/.test(e)&&"darwin"===process.platform}getXcodeMajorVerion(){try{var e=childProcess.execSync("xcrun xcodebuild -version").toString("utf8");return Number.parseInt(e.match(/Xcode\s(\d+)\.\d+/)[1])}catch(e){return console.error(e),11}}selectExecutable(e){return(e="win32"===process.platform?e.map(e=>e+".exe"):e).map(e=>path.join(Editor.App.path,e)).find(e=>fs.existsSync(e))}getCmakePath(){let e=this.args.cmakePath;if(e=e||this.selectExecutable(["../tools/cmake/bin/cmake",`../tools/cmake/${this.isAppleSilicon()?"arm64":"x86_64"}/bin/cmake`]))return e="win32"===process.platform&&-1<e.indexOf(" ")?`"${e}"`:e.replace(/ /g,"\\ ");throw new Error("cmake command is not found!")}enableIosSimulator(){return this.args.ios.simulator}getAppTeamId(){return this.args.teamid}async runXcodeBuild(a){const t={};return Object.assign(t,process.env),Object.keys(t).filter(e=>e.toLowerCase().startsWith("npm_")).forEach(e=>delete t[e]),new Promise((r,s)=>{console.log("run xcodebuild with "+a.join(" "));var e=cchelper.which("xcodebuild");e?(console.log("run xcodebuild with "+a.join(" ")),(e=childProcess.spawn(e,a,{stdio:["pipe","pipe","pipe"],env:t,shell:!0})).stdout.on("data",e=>{console.log("[xcodebuild] "+iconv.decode(e,"gbk").toString())}),e.stderr.on("data",e=>{console.error("[xcodebuild] "+iconv.decode(e,"gbk").toString())}),e.on("close",(e,t)=>{0!==e?s(new Error(`run xcodebuild failed "xcodebuild ${a.join(" ")}", code: ${e}, signal: `+t)):r()})):console.error("'xcodebuild' is not in the path")})}async runCmake(a){const t={};return Object.assign(t,process.env),Object.keys(t).filter(e=>e.toLowerCase().startsWith("npm_")).forEach(e=>delete t[e]),new Promise((r,s)=>{var e=this.getCmakePath(),e=(console.log(`run ${e} `+a.join(" ")),childProcess.spawn(e,a,{stdio:["pipe","pipe","pipe"],env:t,shell:!0}));e.stdout.on("data",e=>{console.log("[cmake] "+iconv.decode(e,"gbk").toString())}),e.stderr.on("data",e=>{console.error("[cmake-err] "+iconv.decode(e,"gbk").toString())}),e.on("close",(e,t)=>{0!==e?s(new Error(`run cmake failed "cmake ${a.join(" ")}", code: ${e}, signal: `+t)):r()})})}doListPlatforms(){console.log("support platforms:");for(const e of cocosConfig_1.cocosConfig.platforms)console.log(" - "+e)}doShowHelp(){this.parser}setEnv(e,t){process.env[e]=t}getEnv(e){return process.env[e]}getCurrentPlatform(){var e=os.platform();return"darwin"===e?default_1.PLATFORM_ENUM.MAC:"win32"===e?default_1.PLATFORM_ENUM.WINDOWS:(console.warn(`platform ${e} is not supported!`),default_1.PLATFORM_ENUM.UNKNOWN)}getEnginePath(){return this.args.enginePath}getTemplatesDirNames(){const t=this.getTemplatesRootPath();let e=[];return e=t?(e=fs.readdirSync(t).filter(e=>!e.startsWith("."))).filter(e=>{e=path.join(t,e);return fs.statSync(e).isDirectory()}):e}getTemplateDirPaths(){const t=this.getTemplatesRootPath();return this.getTemplatesDirNames().map(e=>path.join(t,e))}getPlatform(){let e=this.parser.platform;return e||(e=this.getCurrentPlatform(),console.log("platform not specified, use current platform "+e)),e}setPlatform(e){this.parser.platform=e}getPluginName(){return this._pluginName}setPluginName(e){this._pluginName=e}async exec(){console.log(`[plugin ${this.getPluginName()}]: running ...`),this.init(),await this.run(),console.log(`  [plugin ${this.getPluginName()}]: done!`)}get args(){return this.parser}}exports.CCPlugin=CCPlugin,exports.EXT_LIST=[".js",".ccc",".ccd",".jsg",".jsc"];class cchelper{static replaceEnvVariables(e){return e.replace(/\$\{([^}]*)\}/g,(e,t)=>void 0===process.env[t]?e:process.env[t]).replace(/(~)/g,(e,t)=>process.env.HOME)}static fixPath(e){return e=this.replaceEnvVariables(e),"win32"===os.platform()?e.replace(/\\/g,"/").replace(/\/+/,"/"):e}static async delay(r){return new Promise((e,t)=>{setTimeout(async()=>{e()},r)})}static join(e,...t){var r=t.map(e=>this.replaceEnvVariables(e));return path.isAbsolute(r[r.length-1])?r[r.length-1]:path.join(this.replaceEnvVariables(e),...t)}static copyFileSync(e,t,r,s){e=this.replaceEnvVariables(e),t=this.replaceEnvVariables(t),r=this.replaceEnvVariables(r),s=this.replaceEnvVariables(s);e=path.isAbsolute(t)?t:path.join(e,t),t=path.isAbsolute(s)?s:path.join(r,s);this.makeDirectoryRecursive(path.dirname(t)),fs.copyFileSync(e,t)}static async copyFileAsync(e,t){this.makeDirectoryRecursive(path.parse(t).dir),await afs_1.afs.copyFile(e,t)}static async copyRecursiveAsync(t,r){t=this.replaceEnvVariables(t),r=this.replaceEnvVariables(r);var e,s=[],a=await afs_1.afs.stat(t);if(a){if(a.isDirectory()){this.makeDirectoryRecursive(r);for(const o of await afs_1.afs.readdir(t))"."!==o&&".."!==o&&(e=path.join(t,o),e=this.copyRecursiveAsync(e,path.join(r,o)),s.push(e));await Promise.all(s)}else if(a.isFile())try{await this.copyFileAsync(t,r)}catch(e){await this.delay(10),await this.copyFileAsync(t,r)}}else console.error("failed to stat "+t)}static prepareDirsForFiles(e,t,r){var s={};for(const o of t){let e=s;for(const i of o.split("/"))e=i in e?e[i]:e[i]={}}const a=(e,t,r)=>{if(fs.statSync(e).isDirectory()){fs.existsSync(r)||fs.mkdirSync(r);for(const s in t)"."!==s&&".."!==s&&a(path.join(e,s),t[s],path.join(r,s))}};a(e,s,r)}static parallelCopyFiles(o,i,n,l){let c=0;return l=this.replaceEnvVariables(l),cchelper.prepareDirsForFiles(i,n,l),new Promise((r,e)=>{const s=async(e,t)=>{c+=1,await this.copyRecursiveAsync(e,t),--c,a()},a=()=>{var e,t;0<n.length&&c<o&&(e=n.shift(),t=path.join(i,e),fs.existsSync(t)?s(t,path.join(l,e)):console.warn(`warning: copyFile: ${t} not exists!`)),0===n.length&&0===c&&r()};for(let e=0;e<o;e++)a()})}static makeDirectoryRecursive(t){if(0!==t.length){var r=[];let e=t;for(;!fs.existsSync(e);)r.push(e),e=path.join(e,"..");for(;0<r.length;)fs.mkdirSync(r[r.length-1]),r.length=r.length-1}}static async removeDirectoryRecursive(e){var t=await afs_1.afs.stat(e);if(t.isFile())await afs_1.afs.unlink(e);else if(t.isDirectory()){var r,s=[];for(const a of await afs_1.afs.readdir(e))"."!==a&&".."!==a&&(r=path.join(e,a),s.push(this.removeDirectoryRecursive(r)));await Promise.all(s),await afs_1.afs.rmdir(e)}}static async copyFilesWithConfig(r,s,a){if(fs.existsSync(s)){s=this.replaceEnvVariables(s),a=this.replaceEnvVariables(a);let e=this.replaceEnvVariables(r.from),t=this.replaceEnvVariables(r.to);path.isAbsolute(e)&&(s=e,e="."),path.isAbsolute(t)&&(a=t,t=".");var o=e=>{for(var t={},r=e.map(e=>Array.from(e));0<r.length;){var s=r.shift();let e=t;for(;0<s.length;){var a=s.shift();a in e||(e[a]={}),e=e[a]}}return t};const l=(e,t)=>{if(null===t)return!1;var r=Array.from(e);let s=0,a=t;for(;r[s]in a;)a=a[r[s]],s++;return s===r.length&&0===Object.keys(a).length},c=r.include?o(r.include):null,p=r.exclude?o(r.exclude):null,h=async(e,t,r)=>{var s=path.join(e,t),a=await afs_1.afs.stat(s);if(a.isDirectory()){var o,i=[];for(const n of await afs_1.afs.readdir(s))"."!==n&&".."!==n&&(o=path.join(t,n),!p||!l(o,p)||c&&l(o,c)?i.push(h(e,o,r)):console.log(` - skip copy ${e} ${o} to `+r));await Promise.all(i)}else a.isFile()&&await this.copyFileAsync(s,path.join(r,t))};this.replaceEnvVariables(path.normalize(path.join(s,e)));o=this.replaceEnvVariables(path.normalize(path.join(a,t)));await h(s,e,o)}else console.error(`copy file srcRoot ${s} is not exists!`)}static async replaceInFile(e,t){var r;t=this.replaceEnvVariables(t),fs.existsSync(t)&&(r=(await afs_1.afs.readFile(t)).toString("utf8").split("\n").map(t=>(e.forEach(e=>{t=t.replace(new RegExp(e.reg),this.replaceEnvVariables(e.text))}),t)).join("\n"),await afs_1.afs.writeFile(t,r))}static exactValueFromFile(e,t,r){if(fs.existsSync(t))for(const a of fs.readFileSync(t).toString("utf-8").split("\n")){var s=a.match(e);if(s)return s[r]}else console.error(`file ${t} not exist!`)}static async runCmd(a,o,i,t){return new Promise((r,s)=>{console.log(`[runCmd]: ${a} `+o.join(" "));var e=childProcess.spawn(a,o,{shell:!0,env:process.env,cwd:t||process.cwd()});i||(e.stdout.on("data",e=>{console.log(`[runCmd ${a}] `+e)}),e.stderr.on("data",e=>{console.log(`[runCmd ${a} - error] `+e)})),e.on("close",(e,t)=>{0===e||i?r():s(`failed to exec ${a} `+o.join(" "))})})}static existsSync(t){var e=path.extname(t),e=path.basename(t,e);return t=path.join(path.dirname(t),e),!!exports.EXT_LIST.find(e=>fs.existsSync(t+e))}static checkJavaHome(){process.env.JAVA_HOME||console.warn("$JAVA_HOME is not set!");var e=cchelper.which("java");if(e)try{var t=childProcess.execSync(e+" --version").toString();if(/Java\(TM\)/.test(t))return!0;console.error("Oracle JDK is expected.")}catch(e){console.error("Error checking java runtime..."),console.error(e)}else console.error("'java' is not found in PATH");return!1}static accessSync(e,t){try{return fs.accessSync(e,t),!0}catch(e){}return!1}static which(e){var t=[e],r="win32"===os.platform(),e=(r&&t.push(e+".exe"),r?null==(e=process.env.PATH)?void 0:e.split(";"):null==(e=process.env.PATH)?void 0:e.split(":"));if(e&&0!==e.length)for(const a of e)for(const o of t){var s=path.join(a,o);if(fs.existsSync(s)&&(r||cchelper.accessSync(s,fs.constants.X_OK)))return s}return null}}exports.cchelper=cchelper;class NativeConsole{constructor(e){this._params=e}loadPlugin(e){let t=null;var r,s=path.join(__dirname,"plugin"+e);return cchelper.existsSync(s)?(s=require(s),(r="CCPlugin"+e.toUpperCase())in s?(t=new s[r](this._params)).setPluginName(e):console.error(r+` not defined in plugin_${e}.js`)):console.error(`Plugin ${e} is not defined!`),t}async run(){let e=this._params.pluginName;for(var t,r=[];t=this.loadPlugin(e),r.push(t),null!==(e=t.depends()););for(let e=r.length-1;0<=e;e--)await r[e].exec()}}exports.NativeConsole=NativeConsole,process.on("unhandledRejection",(e,t)=>{console.error("----unhandledRejection---"),console.error(e)});