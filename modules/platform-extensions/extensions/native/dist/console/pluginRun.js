"use strict";var __createBinding=this&&this.__createBinding||(Object.create?function(e,t,r,i){void 0===i&&(i=r),Object.defineProperty(e,i,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,i){e[i=void 0===i?r:i]=t[r]}),__setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),__importStar=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&__createBinding(t,e,r);return __setModuleDefault(t,e),t};Object.defineProperty(exports,"__esModule",{value:!0}),exports.CCPluginRUN=void 0;const childProcess=__importStar(require("child_process")),crypto_1=require("crypto"),fs=__importStar(require("fs-extra")),os=__importStar(require("os")),path=__importStar(require("path")),cocosCli_1=require("./cocosCli"),default_1=require("./default"),native_utils_1=require("../builder/native-utils"),PackageNewConfig="cocos-project-template.json";class CCPluginRUN extends cocosCli_1.CCPlugin{depends(){return null}init(){return!0}async run(){var e=this.getPlatform();return e===default_1.PLATFORM_ENUM.MAC?new MacRunCMD(this).run():e===default_1.PLATFORM_ENUM.IOS?new IOSRunCMD(this).run():e===default_1.PLATFORM_ENUM.ANDROID||e===default_1.PLATFORM_ENUM["XR-HUAWEIVR"]||e===default_1.PLATFORM_ENUM["XR-META"]||e===default_1.PLATFORM_ENUM["XR-PICO"]||e===default_1.PLATFORM_ENUM["XR-ROKID"]||e===default_1.PLATFORM_ENUM["XR-MONADO"]||e===default_1.PLATFORM_ENUM["HUAWEI-AGC"]?new AndroidRunCMD(this).run():e===default_1.PLATFORM_ENUM.WINDOWS?new WindowsRunCMD(this).run():e!==default_1.PLATFORM_ENUM.OHOS||new OHOSRunCMD(this).run()}getProjectNameFromCmake(){var e=path.join(this.getBuildDir(),"CMakeCache.txt"),e=(fs.existsSync(e)||console.error(`can not find "CMakeCache.txt" in ${this.getBuildDir()}, please run "cmake -G" first`),cocosCli_1.cchelper.exactValueFromFile(/CMAKE_PROJECT_NAME:\w+=(.*)/,e,1));return e}}exports.CCPluginRUN=CCPluginRUN;class PlatformRunCmd{constructor(e){this.plugin=e}get projectName(){return this.plugin.args.projectName||this.plugin.getProjectNameFromCmake()}}class MacRunCMD extends PlatformRunCmd{async run(){return await this.macRun(this.projectName),!0}macOpen(r){console.log("open "+r);var e=childProcess.spawn("open",[r],{shell:!0,env:process.env});e.stdout.on("data",e=>{console.log("[open app] "+e)}),e.stderr.on("data",e=>{console.error("[open app error] "+e)}),e.on("close",(e,t)=>{console.log(r+` exit with ${e}, sig: `+t)})}macRun(e){var t=path.join(this.plugin.getBuildDir(),this.plugin.args.debug?"Debug":"Release");if(!fs.existsSync(t))throw new Error(`[mac run] ${t} is not exist!`);if(e&&(e=path.join(t,e+"-desktop.app"),fs.existsSync(e)))this.macOpen(e);else{e=fs.readdirSync(t).filter(e=>e.endsWith(".app"));if(1!==e.length)throw new Error(`found ${e.length} apps, failed to open.`);this.macOpen(path.join(t,e[0]))}}}class IOSRunCMD extends PlatformRunCmd{async run(){return this.runIosSimulator()}selectSimulatorId(){var e=childProcess.execSync("xcrun xctrace list devices").toString("utf-8").split("\n").filter(e=>e.startsWith("iPhone")&&0<=e.indexOf("Simulator"));const r=e=>{var t=e.split("(")[0].substr(6),r=e.match(/\((\d+\.\d+)\)/);return r?parseInt(r[1])+r.index:100*parseInt(t)+e.length};var e=e.filter(e=>e.indexOf("Apple Watch")<0).sort((e,t)=>r(t)-r(e))[0],t=e.match(/\(([A-Z0-9-]+)\)/);return console.log("selected simualtor "+e),t[1]}selectIosDevices(){var e=childProcess.execSync("xcrun simctl list").toString("utf-8").split("\n"),t=((e,t)=>{for(;t<e.length&&!e[t].match(/== Devices ==/);)t++;return t<e.length?t:-1})(e,0);return t<0?(console.error("can not find devices section!"),[]):((e,t)=>{for(var r=[];!e[t].match(/-- iOS [^ ]* --/);)t++;if(e[t].indexOf("iOS")<0)return console.error("can not find iOS section!"),r;for(t++;e[t].startsWith(" ");)r.push(e[t++]);return r.map(e=>e.trim())})(e,t).filter(e=>e.startsWith("iPhone"))}readBundleId(){const t=this.projectName;var e=fs.readdirSync(path.join(this.plugin.getBuildDir(),"CMakeFiles")).filter(e=>e.startsWith(t))[0],e=path.join(this.plugin.getBuildDir(),"CMakeFiles",e,"Info.plist");if(fs.existsSync(e)){var r=fs.readFileSync(e).toString("utf-8").split("\n");for(let e=0;e<r.length;e++)if(r[e].match(/CFBundleIdentifier/)){for(e++;!r[e].match(/<string>/);)e++;return r[e].match(/<string>([^<]*)<\/string>/)[1]}}else console.error("Info.plist not found "+e);return null}queryIosDevice(){var t=childProcess.execSync("xcrun xctrace list devices").toString("utf-8").split("\n"),r=[];for(let e=1;e<t.length;e++)0<=t[e].indexOf("Simulator")||t[e].match(/iPhone|iPad|iPod/)&&r.push(t[e]);return 0<r.length?(console.log("select ios device "+r[0]),r[0].match(/\(([A-Z0-9-]+)\)/)[1]):null}async runIosDevice(){var e,t=this.plugin.getBuildDir(),t=childProcess.execSync(`find ${t} -name "*.app"`).toString("utf-8").split("\n").filter(e=>0<e.trim().length),r=this.queryIosDevice();return r?(0<t.length&&(e=fs.mkdtempSync(path.join(os.tmpdir(),this.projectName)),await cocosCli_1.cchelper.runCmd("xcrun",["xctrace","record","--template","'App Launch'","--device",`'${r}'`,"--launch","--",""+t[0]],!1,e)),!0):(console.error("no connected device found!"),!1)}async runIosSimulator(){var e=this.selectSimulatorId(),t=this.plugin.getBuildDir(),r=this.readBundleId(),t=(console.log(` - build dir ${t} - simId `+e),console.log(" - bundle id "+r),childProcess.execSync(`find ${t} -name "*.app"`).toString("utf-8").split("\n").filter(e=>0<e.trim().length));return 0<t.length&&r&&(await cocosCli_1.cchelper.runCmd("xcrun",["simctl","boot",e],!0),await cocosCli_1.cchelper.runCmd("open",["`xcode-select -p`/Applications/Simulator.app"],!0),await cocosCli_1.cchelper.runCmd("xcrun",["simctl","boot",e],!0),await cocosCli_1.cchelper.runCmd("xcrun",["simctl","install",e,t[0].trim()],!1),await cocosCli_1.cchelper.runCmd("xcrun",["simctl","launch",e,`"${r}"`],!1)),!1}}class WindowsRunCMD extends PlatformRunCmd{async run(){var e=path.join(this.plugin.getBuildDir(),this.plugin.args.debug?"Debug":"Release",this.plugin.args.projectName+".exe");return fs.existsSync(e)?(await cocosCli_1.cchelper.runCmd(e,[],!1),!0):(console.error("exe file not found at"+e),!1)}}class AndroidRunCMD extends PlatformRunCmd{constructor(e){super(e),native_utils_1.mergeAndroidPlatformConfig(this)}async run(){return!!await this.install()&&this.startApp()}getAdbPath(){return path.join(this.plugin.args.android.sdkPath,"platform-tools/adb"+("win32"===process.platform?".exe":""))}getApkPath(){var e=this.plugin.args.debug?"debug":"release",t=this.plugin.args.projectName+`-${e}.apk`;return path.join(this.plugin.projectDir,`proj/build/${this.plugin.args.projectName}/outputs/apk/${e}/`+t)}get applicationID(){return this.plugin.args.android.packageName}async install(){var e=this.getApkPath(),t=this.getAdbPath();return fs.existsSync(e)?fs.existsSync(t)?(await this.checkApkInstalled()&&await cocosCli_1.cchelper.runCmd(t,["uninstall",this.applicationID],!1),await cocosCli_1.cchelper.runCmd(t,["install","-r",e],!1),!0):(console.error("can not find adb at",t),!1):(console.error("can not find apk at",e),!1)}async checkApkInstalled(){return(await new Promise((r,e)=>{var t=this.getAdbPath(),t=childProcess.spawn(t,["shell pm list packages | grep",this.applicationID],{shell:!0,env:process.env,cwd:process.cwd()});t.stdout.on("data",e=>{r(e.toString())}),t.stderr.on("data",e=>{r("")}),t.on("close",(e,t)=>{r("")})})).includes(this.applicationID)}async startApp(){var e=this.getAdbPath();return await cocosCli_1.cchelper.runCmd(e,["shell","am","start","-n",this.applicationID+"/com.cocos.game.AppActivity"],!1),!0}}class OHOSRunCMD extends PlatformRunCmd{async run(){var e=this.plugin.args.ohos.packageName,t=this.plugin.platformTemplatePath,r=this.plugin.args.debug?"debug":"release",t=this.selectHap(t,r);if(!fs.existsSync(t))return console.error(`File ${t} does not exist!`),!1;r=this.hdcPath;if(!r)return console.error("Failed to locate hdc"),!1;var i="/sdcard/"+this.randString(32);try{await cocosCli_1.cchelper.runCmd(r,["shell","am","force-stop",e],!0),await cocosCli_1.cchelper.runCmd(r,["shell","bm","uninstall",e],!0),await cocosCli_1.cchelper.runCmd(r,["file","send",cocosCli_1.cchelper.fixPath(t),cocosCli_1.cchelper.fixPath(path.join(i,"entry-debug-signed.hap"))],!1),await cocosCli_1.cchelper.runCmd(r,["shell","bm","install","-p",i],!1),await cocosCli_1.cchelper.runCmd(r,["shell","am","start","-n",`"${e}/com.example.cocosdemo.MainAbilityShellActivity"`],!1)}finally{await cocosCli_1.cchelper.runCmd(r,["shell","rm","-rf",i],!0)}return!0}selectHap(e,t){e=path.join(e,"entry/build/outputs/hap/"+t);return path.join(e,this.selectHapFile(e,t))}selectHapFile(e,t){if(!fs.existsSync(e))throw new Error(`directory ${e} does not exist!`);var r,i=fs.readdirSync(e).filter(e=>e.endsWith(".hap"));if(0===i.length)throw new Error("no hap found in "+e);return(1===i.length?i:(e=i.filter(e=>e.endsWith("-signed.hap")&&e.startsWith(`entry-${t}-`)),r=i.filter(e=>e.startsWith("entry-"+t)),0<e.length?e:0<r.length?r:i))[0]}get hdcPath(){return this.plugin.args.ohos.sdkPath?path.join(this.plugin.args.ohos.sdkPath,"toolchains/hdc"):null}randString(r){if(r<=0)return"";let i="";try{i=crypto_1.randomBytes(Math.ceil(r/2)).toString("hex").slice(0,r)}catch(e){i="";var n=r%8,s=(r-n)/8;let t=0;for(;t<s;t++)i+=Math.random().toString(16).slice(2);0<n&&(i+=Math.random().toString(16).slice(2,t))}return i}}