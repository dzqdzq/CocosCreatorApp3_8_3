'use strict';
// @ts-check
var __importDefault = (this && this.__importDefault) || function(mod) {
    return (mod && mod.__esModule) ? mod : { 'default': mod };
};
Object.defineProperty(exports, '__esModule', { value: true });
exports.loadDynamic = void 0;
const module_1 = __importDefault(require('module'));
const path_1 = __importDefault(require('path'));
let hasPreload = false;
let loader = null;
/**
 * 初始化引擎加载器。预先引擎模块，并将其映射为在编辑器内可用的 CommonJS 模块。
 * @param options 选项。
 */
async function preload(options) {
    var _a, _b;
    function isEngineModule(request) {
        return request === 'cc' || (request.startsWith('cc/') && !request.startsWith('cc/preload')) || request.startsWith('cce:/internal/');
    }
    try {
        if (hasPreload) {
            throw new Error('You can only preload engine once.');
        }
        hasPreload = true;
        const { requiredModules, editorExtensions = true, editorPath } = options;
        const root = (_a = options.root) !== null && _a !== void 0 ? _a : (await (async () => {
            const ipc = require('@base/electron-base-ipc');
            const info = ipc.sendSync('packages-engine:query-engine-info');
            return info.path;
        })());
        const dist = (_b = options.dist) !== null && _b !== void 0 ? _b : path_1.default.join(root, 'bin', '.cache', 'dev', 'editor');
        // 设置 CC_EDITOR 标记，引擎加载的时候会使用标记进行部分判断
        // @ts-ignore
        globalThis.CC_EDITOR = true;
        if (editorExtensions) {
            const ipc = require('@base/electron-base-ipc');
            // 向 engine 插件查询信息
            const info = ipc.sendSync('packages-engine:query-engine-info');
            // 加载编辑器扩展
            // @ts-ignore
            globalThis.EditorExtends = require(path_1.default.join(info.editor, './builtin/engine/dist/editor-extends'));
        }
        const engineModules = {};
        const loaderModule = require(path_1.default.resolve(dist, 'loader'));
        loader = loaderModule.default;
        for (const requiredModule of requiredModules) {
            engineModules[requiredModule] = await loader.import(requiredModule);
        }
        const ModuleInternal = module_1.default;
        const vendorResolveFilename = ModuleInternal._resolveFilename;
        ModuleInternal._resolveFilename = function(request) {
            if (isEngineModule(request)) {
                return request;
            }
            else {
                // @ts-ignore
                // eslint-disable-next-line prefer-rest-params
                return vendorResolveFilename.apply(this, arguments);
            }
        };
        const vendorLoad = ModuleInternal._load;
        ModuleInternal._load = function(request) {
            if (isEngineModule(request)) {
                const module = engineModules[request];
                if (module) {
                    return module;
                }
                else {
                    throw new Error(`Can not load engine module: ${request}. Valid engine modules are: ${Object.keys(engineModules).join(',')}`);
                }
            }
            else {
                // @ts-ignore
                // eslint-disable-next-line prefer-rest-params
                return vendorLoad.apply(this, arguments);
            }
        };
        if (requiredModules.includes('cc')) {
            postProcess(editorPath);
        }
    }
    catch (error) {
        let msg = 'preload engine failed!';
        console.error(msg);
        console.error(error);
        if (error instanceof Error) {
            msg += '\n' + error.stack ? error.stack : error.toString();
        }
        // @ts-ignore
        Editor.Message.send('engine', 'import-engine-error', msg);
        throw error;
    }
}
exports.default = preload;
/**
 * 动态加载指定模块。应确保引擎加载器已经初始化过。
 * @param id 引擎模块 ID。
 * @returns 引擎模块。
 */
async function loadDynamic(id) {
    if (!loader) {
        throw new Error(`Failed to load engine module ${id}. ` + 'Loader has not been initialized. You should call preload() first.');
    }
    return await loader.import(id);
}
exports.loadDynamic = loadDynamic;
function postProcess(editorPath) {
    let info;
    if (!editorPath) {
        const ipc = require('@base/electron-base-ipc');
        info = ipc.sendSync('packages-engine:query-engine-info');
    }
    else {
        info = {
            editor: editorPath,
        };
    }
    const vStacks = require('v-stacks');
    if ('__MAIN__' in window) {
        const error = new Error('Try not to run the engine in the window process.');
        error.stack = vStacks.ignoreStack(error.stack, 1);
        console.warn(error);
    }
    const timeLabel = 'Import engine';
    console.time(timeLabel);
    let ccm;
    try {
        ccm = require('cc');
    }
    catch (error) {
        let msg = 'require cc failed!';
        if (error instanceof Error) {
            msg += '\n' + error.stack ? error.stack : error.toString();
        }
        // @ts-ignore
        Editor.Message.send('engine', 'import-engine-error', msg);
        throw error;
    }
    console.timeEnd(timeLabel);
    // ---- 加载引擎主体 ----
    // @ts-ignore
    window.ccm = ccm;
    // ---- hack creator 使用的一些 engine 参数
    require('./polyfill/engine');
    // @ts-ignore
    globalThis.EditorExtends.init();
    const handle = require('./overwrite');
    handle(ccm, info);
}
//# sourceMappingURL=data:application/json;base64,