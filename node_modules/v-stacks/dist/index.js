'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.ignoreStack = exports.decode = exports.encode = void 0;
/**
 * 将一个 Error 对象压缩成 Object
 * @param error
 * @param ignore 忽略 error 的调用栈行数
 */
function encode(error, ignore) {
    if (ignore === void 0) { ignore = 0; }
    if (!(error instanceof Error)) {
        if (typeof error === 'string') {
            // 如果传入字符串，则生成 error 并将忽略计数加 1，忽略当前函数内的调用栈
            error = new Error(error);
            ignore++;
        }
        else {
            return null;
        }
    }
    var message = error.message;
    // 忽略指定数量的调用栈信息
    error.stack = ignoreStack(error.stack, ignore);
    return {
        message: message,
        stack: error.stack || '',
    };
}
exports.encode = encode;
/**
 * 解码一个 Error
 * @param object å
 */
function decode(object) {
    if (!object) {
        return null;
    }
    var error = new Error(object.message || '(Missing Error)');
    error.stack = object.stack;
    return error;
}
exports.decode = decode;
/**
 * 裁剪一个调用栈信息
 * @param stack
 * @param ignore
 */
function ignoreStack(stack, ignore) {
    if (ignore <= 0) {
        return stack;
    }
    if (!stack) {
        return '';
    }
    var reg = new RegExp("(\n +[^\n]+){" + ignore + "}");
    return stack.replace(reg, '');
}
exports.ignoreStack = ignoreStack;
