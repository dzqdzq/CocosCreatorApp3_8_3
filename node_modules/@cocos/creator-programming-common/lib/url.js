"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.hasFileProtocol = exports.getBaseName = exports.assignPathname = exports.tryParseURL = exports.replaceExtension = exports.hasExtension = exports.parseExtensionName = void 0;
const url_1 = require("url");
function parseExtensionName(pathname) {
    const segments = pathname.split('/');
    if (segments.length > 0) {
        const last = segments[segments.length - 1];
        if (last.length > 1) {
            const iLastDot = last.lastIndexOf('.');
            if (iLastDot >= 0) {
                return last.substr(iLastDot);
            }
        }
    }
    return '';
}
exports.parseExtensionName = parseExtensionName;
function hasExtension(pathname) {
    return !!parseExtensionName(pathname);
}
exports.hasExtension = hasExtension;
function replaceExtension(url, ext) {
    const parts = url.pathname.split('/');
    if (parts.length !== 0) {
        const baseName = parts[parts.length - 1];
        const dot = baseName.lastIndexOf('.');
        if (dot >= 0) {
            const originalExtension = baseName.substr(dot + 1);
            parts[parts.length - 1] = `${baseName.substr(0, dot)}${ext}`;
            assignPathname(url, parts.join('/'));
            return '.' + originalExtension;
        }
    }
}
exports.replaceExtension = replaceExtension;
function tryParseURL(input, base) {
    try {
        return new url_1.URL(input, base);
    }
    catch (_a) {
        return;
    }
}
exports.tryParseURL = tryParseURL;
function assignPathname(url, pathname) {
    if (!url.pathname.startsWith('/')) {
        console.warn(`Cannot change pathname of URL ${url} since it's a 'cannot-be-a-base-URL' URL.`);
    }
    // https://gist.github.com/shrinktofit/50f2380782b6219ed6a4cb3a210a75f7
    url.pathname = pathname;
    return url;
}
exports.assignPathname = assignPathname;
function getBaseName(url) {
    const segments = url.pathname.split('/');
    if (segments.length === 0) {
        return '';
    }
    else {
        const last = segments[segments.length - 1];
        const iDot = last.lastIndexOf('.');
        if (iDot >= 0) {
            return last.substr(0, iDot);
        }
        else {
            return last;
        }
    }
}
exports.getBaseName = getBaseName;
function hasFileProtocol(url) {
    return url.protocol === 'file:';
}
exports.hasFileProtocol = hasFileProtocol;
//# sourceMappingURL=url.js.map