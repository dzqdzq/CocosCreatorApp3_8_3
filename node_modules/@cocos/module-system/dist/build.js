"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.build = void 0;
const rollup_1 = require("rollup");
const rollup_plugin_terser_1 = require("rollup-plugin-terser");
const plugin_replace_1 = __importDefault(require("@rollup/plugin-replace"));
const path_1 = require("path");
const plugin_node_resolve_1 = __importDefault(require("@rollup/plugin-node-resolve"));
const plugin_typescript_1 = __importDefault(require("@rollup/plugin-typescript"));
const ejs_1 = require("ejs");
const virtual_entry_source_js_1 = __importDefault(require("./virtual-entry-source.js"));
async function build({ out, sourceMap, minify, platform, hmr = false, editor = false, }) {
    const input = (0, path_1.join)(__dirname, '../lib/index.js');
    const browser = platform === 'web-mobile' || platform === 'web-desktop' || platform === 'fb-instant-games';
    const ejsResult = await compileEjs((0, path_1.join)(__dirname, '../lib/index.ejs'), {
        preset: browser ? 'web' : 'commonjs-like',
        hmr,
        editor,
    });
    const modules = {};
    modules[ejsResult.path] = ejsResult.source;
    await (await (0, rollup_1.rollup)({
        input,
        plugins: [
            (0, virtual_entry_source_js_1.default)(modules),
            (0, plugin_replace_1.default)({
                preventAssignment: true,
                'process.env.SYSTEM_PRODUCTION': minify ? 'true' : 'false',
                'process.env.SYSTEM_BROWSER': browser ? 'true' : 'false',
            }),
            (0, plugin_node_resolve_1.default)({
                modulesOnly: true
            }),
            minify ? (0, rollup_plugin_terser_1.terser)({}) : undefined,
            (0, plugin_typescript_1.default)({ tsconfig: (0, path_1.join)(__dirname, '../lib/tsconfig.json') }),
        ],
    })).write({
        file: out,
        sourcemap: sourceMap,
        format: 'iife',
    });
}
exports.build = build;
async function compileEjs(ejsFile, options) {
    const source = await (0, ejs_1.renderFile)(ejsFile, options);
    const parsedPath = (0, path_1.parse)(ejsFile);
    const path = (0, path_1.join)(parsedPath.dir, parsedPath.name) + '.js';
    return {
        path,
        source,
    };
}
//# sourceMappingURL=build.js.map