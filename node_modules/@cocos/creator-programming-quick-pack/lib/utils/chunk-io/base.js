"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChunkIOBase = void 0;
const url_1 = require("url");
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
class ChunkIOBase {
    constructor({ chunkHomePath, }) {
        this._build = {
            chunks: {},
            entries: {},
        };
        this._chunkHomeURL = (0, url_1.pathToFileURL)(chunkHomePath + path_1.default.sep);
    }
    serializeRecord() {
        return this._build;
    }
    deserializeRecord(json) {
        this._build = json;
    }
    async clear() {
        try {
            await fs_extra_1.default.remove((0, url_1.fileURLToPath)(this._chunkHomeURL));
        }
        catch (err) {
        }
    }
    _calculateChunkCodeFileName(chunkId) {
        return (0, url_1.fileURLToPath)(new url_1.URL(this.calculateChunkCodeFileRelativePath(chunkId), this._chunkHomeURL));
    }
    calculateChunkCodeFileRelativePath(chunkId) {
        return `${chunkId.slice(0, 2)}/${chunkId}.js`;
    }
    async queryAllTimestamps() {
        const result = {};
        for (const [chunkId, { timestamp }] of Object.entries(this._build.chunks)) {
            const relativePath = this.calculateChunkCodeFileRelativePath(chunkId);
            result[relativePath] = timestamp;
        }
        return result;
    }
}
exports.ChunkIOBase = ChunkIOBase;
//# sourceMappingURL=base.js.map