"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const url_1 = require("url");
const share_1 = require("@cocos/creator-programming-mod-lo/lib/cjs/share");
const specifier_1 = require("@cocos/creator-programming-common/lib/specifier");
// NOTE: DO NOT REMOVE the null character `\0` as it may be used by other plugins
// e.g. https://github.com/rollup/rollup-plugin-node-resolve/blob/313a3e32f432f9eb18cc4c231cc7aac6df317a51/src/index.js#L74
const HELPERS = 'cce:/internal/rollupPluginModLoBabelHelpers.js';
function $({ modLo, origin, }) {
    const myName = 'rollup-plugin-mod-lo';
    const loadMetaMap = {};
    const originURL = origin !== null && origin !== void 0 ? origin : (0, url_1.pathToFileURL)(path_1.default.join(process.cwd(), path_1.default.sep));
    return {
        name: myName,
        resolveId,
        load,
    };
    async function resolveId(source, importer, _options) {
        var _a;
        if (source === HELPERS) {
            return {
                id: HELPERS,
            };
        }
        let resolved;
        try {
            if (!importer) {
                resolved = await modLo.resolve(source);
            }
            else {
                const loadMeta = loadMetaMap[importer];
                if (!loadMeta) {
                    return null;
                }
                const { url: importerURL, type: importerModLoType, } = loadMeta;
                resolved = await modLo.resolve(source, importerURL, importerModLoType);
            }
        }
        catch (err) {
            // If we can't resolve a bare specifier from CommonJS, treat it as external
            const importerModLoType = importer && ((_a = loadMetaMap[importer]) === null || _a === void 0 ? void 0 : _a.type);
            if ((0, specifier_1.isBareSpecifier)(source) && importerModLoType === 'commonjs') {
                return {
                    id: `data:text/javascript,${encodeURIComponent(`
                    export const ${share_1.cjsMetaUrlExportName} = '${source}';
                    `)}`,
                };
            }
            // For otherwise errors, we deliver them to "messages".
            return this.error(err);
        }
        if (resolved.isExternal) {
            return {
                external: true,
                id: source,
            };
        }
        else {
            return {
                id: resolved.url.href,
            };
        }
    }
    async function load(id) {
        let url;
        try {
            url = new url_1.URL(id);
        }
        catch (_a) {
            return null;
        }
        let modLoModule;
        try {
            modLoModule = await modLo.load(url);
        }
        catch (err) {
            return null;
        }
        loadMetaMap[id] = {
            url,
            type: modLoModule.type,
        };
        const source = await modLoModule.module();
        return {
            code: source.code,
            map: source.map,
        };
    }
}
(function ($) {
    function filterWarns(warning, defaultHandler) {
        if (warning.code === 'CIRCULAR_DEPENDENCY') {
            if (warning.cycle && warning.cycle.every((id) => id.includes('node_modules'))) {
                return;
            }
        }
        defaultHandler(warning);
    }
    $.filterWarns = filterWarns;
    $.helperModule = HELPERS;
})($ || ($ = {}));
exports.default = $;
//# sourceMappingURL=index.js.map