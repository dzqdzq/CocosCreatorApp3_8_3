"use strict";

var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  var desc = Object.getOwnPropertyDescriptor(m, k);
  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
    desc = {
      enumerable: true,
      get: function () {
        return m[k];
      }
    };
  }
  Object.defineProperty(o, k2, desc);
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});
var __importStar = this && this.__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  __setModuleDefault(result, mod);
  return result;
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.readdirR = exports.toExtensionLess = exports.filePathToModuleRequest = exports.rebasePath = exports.replaceExtname = exports.absolutePathFuncFactory = exports.formatPath = exports.relative = exports.join = exports.basename = exports.dirname = exports.resolve = exports.isAbsolute = void 0;
const ps = __importStar(require("path"));
const fs = __importStar(require("fs-extra"));
exports.isAbsolute = ps.isAbsolute;
function resolve(...args) {
  return formatPath(ps.resolve(...args));
}
exports.resolve = resolve;
function dirname(path) {
  return formatPath(ps.dirname(path));
}
exports.dirname = dirname;
function basename(path) {
  return formatPath(ps.basename(path));
}
exports.basename = basename;
function join(...args) {
  return formatPath(ps.join(...args));
}
exports.join = join;
function relative(from, to) {
  return formatPath(ps.relative(from, to));
}
exports.relative = relative;
function formatPath(path) {
  return path.replace(/\\/g, '/');
}
exports.formatPath = formatPath;
function absolutePathFuncFactory(dirname) {
  return function absolutePath(relativePath) {
    return join(dirname, relativePath);
  };
}
exports.absolutePathFuncFactory = absolutePathFuncFactory;
function replaceExtname(path, originalExtname, newExtName) {
  return path.slice(0, -originalExtname.length) + newExtName;
}
exports.replaceExtname = replaceExtname;
function rebasePath(path, originDir, rebaseDir) {
  return join(rebaseDir, ps.relative(originDir, path));
}
exports.rebasePath = rebasePath;
function filePathToModuleRequest(path) {
  return path.replace(/\\/g, '\\\\');
}
exports.filePathToModuleRequest = filePathToModuleRequest;
function toExtensionLess(path) {
  return path.slice(0, -ps.extname(path).length);
}
exports.toExtensionLess = toExtensionLess;
async function readdirR(item, reduceOutput) {
  if ((await fs.stat(item)).isDirectory()) {
    const dirItems = await fs.readdir(item);
    for (const subItem of dirItems) {
      await readdirR(join(item, subItem), reduceOutput);
    }
  } else {
    reduceOutput.push(item);
  }
}
exports.readdirR = readdirR;