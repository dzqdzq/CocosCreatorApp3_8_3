"use strict";

var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rpNamedChunk = void 0;
const transformer_1 = require("../../../../transformer/lib/index.js");
var babel = transformer_1.babel.core;
const path_1 = __importDefault(require("path"));
function toNamedRegister({
  types
}, options) {
  if (!options || !options.name) {
    throw new Error('\'name\' options is required.');
  }
  return {
    visitor: {
      CallExpression: path => {
        if (types.isMemberExpression(path.node.callee) && types.isIdentifier(path.node.callee.object) && path.node.callee.object.name === 'System' && types.isIdentifier(path.node.callee.property) && path.node.callee.property.name === 'register' && path.node.arguments.length === 2) {
          // Change `System.register([], function (exports, module) {});` to 
          // `System.register('my_chunk_name', [], function (exports, module) {});`
          path.node.arguments.unshift(types.stringLiteral(options.name));
        }
      }
    }
  };
}
function getChunkUrl(chunk) {
  if (path_1.default.basename(chunk.fileName, '.js') === 'cc') {
    return 'cc';
  }
  return `cocos-js/${chunk.fileName}`;
}
function rpNamedChunk() {
  return {
    name: 'named-chunk',
    renderChunk: async function (code, chunk, options) {
      const chunkId = getChunkUrl(chunk);
      // Input format: System.register([], function(){...});
      // Output format: transformResult.code ä¸º System.register('chunk_id', [], function(){...});
      const transformResult = await babel.transformAsync(code, {
        sourceMaps: true,
        compact: false,
        plugins: [[toNamedRegister, {
          name: chunkId
        }]]
      });
      if (!transformResult) {
        this.warn('Failed to render chunk.');
        return null;
      }
      return {
        code: transformResult.code,
        map: transformResult.map
      };
    }
  };
}
exports.rpNamedChunk = rpNamedChunk;