"use strict";

var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
const transformer_1 = require("../../../../transformer/lib/index.js");
const path_1 = __importDefault(require("path"));
var ts = transformer_1.typescript.core;
function default_1({
  configFileName
}) {
  const parsedCommandLine = ts.getParsedCommandLineOfConfigFile(configFileName, {}, {
    onUnRecoverableConfigFileDiagnostic: () => {},
    useCaseSensitiveFileNames: ts.sys.useCaseSensitiveFileNames,
    readDirectory: ts.sys.readDirectory,
    getCurrentDirectory: ts.sys.getCurrentDirectory,
    fileExists: ts.sys.fileExists,
    readFile: ts.sys.readFile
  });
  if (!parsedCommandLine) {
    throw new Error(`Failed to read tsconfig`);
  }
  const {
    baseUrl,
    paths
  } = parsedCommandLine.options;
  let resolveId;
  if (paths) {
    const baseUrlNormalized = path_1.default.resolve(configFileName, baseUrl !== null && baseUrl !== void 0 ? baseUrl : '.');
    const simpleMap = {};
    for (const [key, mapped] of Object.entries(paths)) {
      simpleMap[key] = path_1.default.resolve(baseUrlNormalized, mapped[0]);
    }
    resolveId = function (source, importer) {
      if (!(source in simpleMap)) {
        return null;
      } else {
        return simpleMap[source];
      }
    };
  }
  return {
    name: 'ts-paths',
    resolveId
  };
}
exports.default = default_1;