"use strict";

var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  var desc = Object.getOwnPropertyDescriptor(m, k);
  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
    desc = {
      enumerable: true,
      get: function () {
        return m[k];
      }
    };
  }
  Object.defineProperty(o, k2, desc);
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});
var __importStar = this && this.__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  __setModuleDefault(result, mod);
  return result;
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FieldDecoratorHelper = void 0;
const fs = __importStar(require("fs-extra"));
const ps = __importStar(require("path"));
const transformer_1 = require("../../../transformer/lib/index.js");
var addNamed = transformer_1.babel.helpers.addNamed;
class FieldDecoratorHelper {
  constructor() {
    this._moduleName = 'CCBUILD_HELPER_MODULE';
    this._file2NamedIdentifier = new WeakMap();
  }
  getModuleName() {
    return this._moduleName;
  }
  genModuleSource() {
    if (this._moduleSource) {
      return this._moduleSource;
    }
    return this._moduleSource = fs.readFileSync(ps.join(__dirname, '../../../../static/helper-file-decorator.ts'), 'utf8');
  }
  addHelper(file) {
    let namedIdentifier = this._file2NamedIdentifier.get(file);
    if (namedIdentifier) {
      return namedIdentifier;
    }
    namedIdentifier = addNamed(file.path, 'CCBuildTsFieldDecoratorHelper', this._moduleName);
    this._file2NamedIdentifier.set(file, namedIdentifier);
    return namedIdentifier;
  }
}
exports.FieldDecoratorHelper = FieldDecoratorHelper;