"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.addHelper = exports.getHelperBuilder = exports.generateHelperModuleSource = exports.CC_HELPER_MODULE = void 0;
const core_1 = require("@babel/core");
const t = __importStar(require("@babel/types"));
const generator_1 = __importDefault(require("@babel/generator"));
const constants_1 = require("./constants");
const initializeFieldBuilder = core_1.template(`function %%NAME%% (target, property, initializer) {
    if (!initializer) return;
    target[property]=initializer();
}`);
const applyDecoratedInitializerBuilder = core_1.template(`function %%NAME%% (target, property, decorators, initializer) {
    return decorators.slice().reverse().reduce(function (decoratedInitializer, decorator) {
      return decorator(target, property, decoratedInitializer) || decoratedInitializer;
    }, initializer);
  }`);
const helpers = {};
function registerHelperBuilder(helperName, statement) {
    helpers[helperName] = statement;
}
registerHelperBuilder('initializeField', initializeFieldBuilder);
registerHelperBuilder('applyDecoratedInitializer', applyDecoratedInitializerBuilder);
exports.CC_HELPER_MODULE = 'CC_HELPER_MODULE';
function generateHelperModuleSource() {
    let result = '';
    for (let helperName in helpers) {
        const helperBuilder = getHelperBuilder(helperName);
        const helper = helperBuilder({ NAME: t.identifier(helperName) });
        const { code } = generator_1.default(t.exportNamedDeclaration(helper));
        result += code + '\n';
    }
    return result;
}
exports.generateHelperModuleSource = generateHelperModuleSource;
function getHelperBuilder(helperName) {
    const helperBuilder = helpers[helperName];
    if (!helperBuilder) {
        throw new Error(`Unknown custom helper: ${helperName}`);
    }
    return helperBuilder;
}
exports.getHelperBuilder = getHelperBuilder;
function addHelper(state, helperName) {
    // @ts-ignore get should have been defined in BabelFile
    const importGenerator = state.file.get(constants_1.CC_HELPER_IMPORT_GENERATOR);
    if (importGenerator) {
        return importGenerator(helperName);
    }
    // @ts-ignore get should have been defined in BabelFile
    const helperGenerator = state.file.get(constants_1.CC_HELPER_GENERATOR);
    if (helperGenerator) {
        return helperGenerator(helperName);
    }
    throw new Error(`No available helper: ${helperName}`);
}
exports.addHelper = addHelper;
//# sourceMappingURL=helpers.js.map