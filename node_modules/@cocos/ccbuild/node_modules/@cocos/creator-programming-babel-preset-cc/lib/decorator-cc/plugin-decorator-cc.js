"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.pluginDecoratorCC = void 0;
const core_1 = require("@babel/core");
// @ts-ignore
const plugin_syntax_decorators_1 = __importDefault(require("@babel/plugin-syntax-decorators"));
// @ts-ignore
const helper_module_imports_1 = require("@babel/helper-module-imports");
const constants_1 = require("./constants");
// @ts-ignore
const helper_plugin_utils_1 = require("@babel/helper-plugin-utils");
const helpers_1 = require("./helpers");
const legacy_visitor_1 = require("./legacy-visitor");
exports.pluginDecoratorCC = helper_plugin_utils_1.declare((api, options) => {
    api.assertVersion(7);
    if (options.version !== 'legacy') {
        throw new Error('please specify the decorator proposal version as legacy');
    }
    if (!options.fieldDecorators) {
        throw new Error('please specify the array of field decorators');
    }
    return {
        name: 'plugin-decorator-cc',
        inherits: plugin_syntax_decorators_1.default,
        pre(file) {
            if (options.helpers === 'external') {
                const importHelperCache = {};
                // @ts-ignore get should have been defined in BabelFile
                file.set(constants_1.CC_HELPER_IMPORT_GENERATOR, (name) => {
                    if (importHelperCache[name]) {
                        return core_1.types.cloneNode(importHelperCache[name]);
                    }
                    return importHelperCache[name] = helper_module_imports_1.addNamed(file.path, name, helpers_1.CC_HELPER_MODULE);
                });
            }
            const helperCache = {};
            // @ts-ignore get should have been defined in BabelFile
            file.set(constants_1.CC_HELPER_GENERATOR, (name) => {
                if (helperCache[name]) {
                    return core_1.types.cloneNode(helperCache[name]);
                }
                // @ts-ignore
                const helperUID = file.scope.generateUidIdentifier(name);
                const helperBuilder = helpers_1.getHelperBuilder(name);
                const helper = helperBuilder({ NAME: helperUID });
                file.path.node.body = [helper].concat(file.path.node.body);
                return helperCache[name] = helperUID;
            });
        },
        visitor: legacy_visitor_1.genVisitor(options.fieldDecorators, options.editorDecorators),
        post(file) {
            // @ts-ignore get should have been defined in BabelFile
            file.set(constants_1.CC_HELPER_GENERATOR, undefined);
            // @ts-ignore get should have been defined in BabelFile
            file.set(constants_1.CC_HELPER_IMPORT_GENERATOR, undefined);
        }
    };
});
//# sourceMappingURL=plugin-decorator-cc.js.map