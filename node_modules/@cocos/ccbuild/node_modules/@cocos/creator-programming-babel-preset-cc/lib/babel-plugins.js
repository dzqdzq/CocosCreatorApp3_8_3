"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.genBabelPlugins = void 0;
// @ts-ignore
const plugin_transform_typescript_1 = __importDefault(require("@babel/plugin-transform-typescript"));
// @ts-ignore
const babel_plugin_const_enum_1 = __importDefault(require("babel-plugin-const-enum"));
const decorator_cc_1 = require("./decorator-cc");
// @ts-ignore
const plugin_proposal_class_properties_1 = __importDefault(require("@babel/plugin-proposal-class-properties"));
// @ts-ignore
const plugin_proposal_nullish_coalescing_operator_1 = __importDefault(require("@babel/plugin-proposal-nullish-coalescing-operator"));
// @ts-ignore
const plugin_proposal_optional_chaining_1 = __importDefault(require("@babel/plugin-proposal-optional-chaining"));
// @ts-ignore
const plugin_proposal_logical_assignment_operators_1 = __importDefault(require("@babel/plugin-proposal-logical-assignment-operators"));
function genBabelPlugins({ allowDeclareFields, onlyRemoveTypeImports, useDefineForClassFields, ccDecoratorHelpers, fieldDecorators, editorDecorators, }) {
    const looseClassProperties = !useDefineForClassFields;
    // Note, if we choose to use @babel/preset-typescript instead of @babel/plugin-transform-typescript
    // We have to wrap the `plugins` into an anonymous preset and that preset should
    // be placed prior to @babel/preset-typescript.
    // Otherwise, the @babel/proposal-class-properties would execute before @babel/plugin-transform-typescript.
    // The result would be, unexpectly, even if we pass `loose: true` && `allowDeclareFields: false`
    // to @babel/preset-typescript, class fields with no explicit initializer was still not intent to be erased.
    // This behaviour does not match what tsc does as tsconfig `useDefineForClassFields` enabled.
    return [
        // TS const enum
        [babel_plugin_const_enum_1.default, {
                transform: 'constObject'
            }],
        [plugin_transform_typescript_1.default, {
                allowNamespaces: true,
                allowDeclareFields,
                onlyRemoveTypeImports,
            }],
        [decorator_cc_1.pluginDecoratorCC, {
                version: 'legacy',
                helpers: ccDecoratorHelpers,
                fieldDecorators,
                editorDecorators,
            }],
        [plugin_proposal_class_properties_1.default, {
                loose: looseClassProperties,
            }],
        // ?? operator
        plugin_proposal_nullish_coalescing_operator_1.default,
        // ?. operator
        plugin_proposal_optional_chaining_1.default,
        // ||= &&=
        plugin_proposal_logical_assignment_operators_1.default,
    ];
}
exports.genBabelPlugins = genBabelPlugins;
//# sourceMappingURL=babel-plugins.js.map