import type * as babel from '@babel/core';
import type { SpecifierParts } from './decompose-dynamic-import-vars';
import type { Options as DefaultResolveOptions } from './default-resolve';
export type { SpecifierParts };
export declare type SpecifierCandidate = string | [string, string];
/**
 * Custom specifier resolution.
 * @param specifierParts Specifier parts.
 * @param fileName The source file name(provided by babel).
 * @returns If `undefined` or empty array is returned, this plugin won't do nothing.
 */
export declare type CustomResolve = (specifierParts: SpecifierParts, fileName: string) => SpecifierCandidate[] | undefined;
export type { DefaultResolveOptions };
export interface Options {
    /**
     * Either the options to configure the default resolver or supply a custom resolver.
     */
    resolve?: DefaultResolveOptions | CustomResolve;
}
export default function ({ types }: typeof babel): babel.PluginObj<{
    filename?: string;
    opts?: Options;
}>;
