/// <reference types="node" />
import { URL } from 'url';
import { Logger } from '@cocos/creator-programming-common/lib/logger';
import { ImportMap } from '@cocos/creator-programming-import-maps/lib/import-map';
import { CircularReferenceReportOptions } from './transformer/transformer';
import { Mod, ModuleType, JavaScriptSource, SourceMap, TransformResult, Specifier } from './mods';
export { Mod, ModuleType, JavaScriptSource, SourceMap, TransformResult, Specifier, };
interface ImportRestriction {
    importerPatterns: string[];
    banSourcePatterns: string[];
}
export declare class MemoryModule {
    constructor(source: string);
    get source(): string;
    set source(value: string);
    get mTimestamp(): MTimestamp;
    private _mTimestamp;
    private _source;
}
declare type ModuleFilterRule = string | RegExp;
/**
 * The uniform Module Loader.
 */
export declare class ModLo {
    constructor({ transformer: transformerType, targets, exportsConditions, loose, useDefineForClassFields, allowDeclareFields, guessCommonJsExports, _importMetaURLValid, _helperModule, cr, _compressUUID, transformExcludes: transformExcludes, logger, _internalTransform, checkObsolete, hot, importRestrictions, preserveSymlinks, }: ModLoOptions);
    getMTimestamp(url: URL): Promise<MTimestamp>;
    load(url: URL): Promise<Mod>;
    resolve(specifier: string, from?: URL, fromType?: ModuleType): Promise<ResolveResult>;
    /**
     * @param externals Can be bare specifiers or URLs.
     */
    setExternals(externals: string[]): void;
    addMemoryModule(url: Readonly<URL> | string, source: string): MemoryModule;
    setUUID(url: string, uuid: string): void;
    unsetUUID(url: string): void;
    setImportMap(importMap: ImportMap, url: URL): void;
    /**
     * 将一些 URL 映射到另一些 URL。主要用于映射一些 URL 到文件系统上。
     * 注意：
     * - 这个和 import map 不同。它不会改变模块的 URL，只会在加载模块源码时转而去加载文件系统上的。
     * - 键和值要么都以 / 结尾，要么都不以 / 结尾。如果以 / 结尾表示整个目录映射。
     */
    setLoadMappings(loadMappings: Record<string, string>): void;
    setExtraExportsConditions(exportConditions: string[]): void;
    /**
     * 设置属于 asset 的模块 URL 的前缀。
     * @param prefixes
     */
    setAssetPrefixes(prefixes: string[]): void;
    private _matchPattern;
    private _detectImportRestriction;
    private _followSymlinks;
    private _getMtime;
    private _getLoadURL;
    private _loadSource;
    private _resolveUnchecked;
    private _doEsmResolve;
    private _tryExtensionLessResolve;
    private _doCjsResolve;
    private _isExternal;
    private _determinateModuleType;
    private _tryStat;
    private _fileExists;
    private _allowExtensionLessResolution;
    private _isAssetModule;
    private _generateCommonJsModuleId;
    private _origin;
    private _logger;
    private _transformer;
    private _assetPrefixes;
    private _guessCjsExports;
    private _uuidMap;
    private _externals;
    private _loadMappings;
    private _parsedImportMap;
    private _memoryModules;
    private _conditions;
    private _crFilter;
    private _compressUUID;
    private _helperURL;
    private _helperModuleMTimestamp;
    private _transformExcludesModuleFilter;
    private _importMetaURLValid;
    private _checkObsolete;
    private _hot;
    private _importRestrictions?;
    private _preserveSymlinks;
}
export declare class AccessDeniedError extends Error {
    constructor(url: string, detail?: {
        type: 'unsupported-node-builtins';
    } | {
        type: 'unopened-db';
        domain: string;
    });
}
export declare class FetchFileError extends Error {
    constructor(file: string, err: Error);
}
export interface ModLoOptions {
    transformer?: 'babel' | 'swc';
    targets?: BrowsersListTargets;
    loose?: boolean;
    useDefineForClassFields?: boolean;
    allowDeclareFields?: boolean;
    looseForOf?: boolean;
    /**
     * Defaults: true;
     */
    comments?: boolean;
    exportsConditions?: string[];
    guessCommonJsExports?: boolean;
    /**
     * Tells if the `import.meta.url` is valid to access.
     */
    _importMetaURLValid?: boolean;
    /**
     * 循环引用检测选项。只会对 asset 类型的模块生效。
     */
    cr?: CircularReferenceReportOptions;
    dynamicImportVars?: boolean;
    /**
     * 内部使用。以后可能调整。
     */
    _compressUUID: (uuid: string) => string;
    _internalTransform?: InternalTransformOptions;
    transformExcludes?: Array<ModuleFilterRule>;
    /**
     * Logger.
     */
    logger?: Logger;
    /**
    * Helper 模块的 ID。
    */
    _helperModule?: string;
    /**
     * Check whether the module exported binding name is deprecated.
     */
    checkObsolete?: boolean;
    hot?: boolean;
    /**
     * This option is used to configure import restrictions for certain modules.
     *
     * @example
     * ```ts
     * [
     *  {
     *      importerPatterns: ['A/*.ts'],
     *      banSourcePatterns: ['B/*.ts'],
     *  }
     * ]
     * ```
     * means all ts files under A directory cannot import all ts files under B directory.
     */
    importRestrictions?: ImportRestriction[];
    /**
     * Same as https://nodejs.org/api/cli.html#--preserve-symlinks .
     * @default false
     */
    preserveSymlinks?: boolean;
}
export declare type BrowsersListTargets = string | string[] | Record<string, string>;
export type { ImportMap };
export interface InternalTransformOptions {
    excludes?: Array<RegExp | string>;
    includes?: Array<RegExp | string>;
}
/**
 * Stamp to indicate whether the module source is expired.
 */
export declare type MTimestamp = number | {
    mtime: number;
    uuid: string;
};
export declare function isEqualMTimestamp(lhs: MTimestamp, rhs: MTimestamp): boolean;
export declare function mTimestampToString(mTimestamp: MTimestamp): string;
export declare type ResolveResult = {
    isExternal: false;
    url: URL;
} | {
    isExternal: true;
    specifierOrURL: string;
};
