import { InputSourceMap, Transformer, TransformOptions, TransformTargets } from "../transformer";
import bpDetectCircularReference from './babel-plugins/plugin-detect-circular';
import * as babel from '@babel/core';
import { RawSourceMap } from "source-map";
import { InternalTransformOptions } from "../../mod-lo";
import { CommonJsMod, EsmMod, JavaScriptSource, JsonMod, TransformResolver, TransformResult } from "../../mods";
export declare class BabelTransformer implements Transformer {
    constructor({ targets, loose, useDefineForClassFields, allowDeclareFields, cr, dynamicImportVars, _internalTransform, _helperModule, }: {
        targets?: TransformTargets;
        loose: boolean;
        useDefineForClassFields: boolean;
        allowDeclareFields: boolean;
        /**
         * 循环引用检测选项。只会对 asset 类型的模块生效。
         */
        cr?: bpDetectCircularReference.Options;
        dynamicImportVars?: boolean;
        _internalTransform?: InternalTransformOptions;
        /**
        * Helper 模块的 ID。
        */
        _helperModule?: string;
    });
    /**
     * Transform an ESM module.
     */
    transform(url: URL, source: string, map: InputSourceMap | undefined, options: TransformOptions, disableTransform?: boolean): Promise<EsmMod>;
    /**
     * Transform a JSON module into ESM representation.
     */
    transformJson(url: URL, source: string, inputSourceMap: InputSourceMap | undefined): Promise<JsonMod>;
    /**
     * Transform a CommonJS module into ESM representation.
     */
    transformCommonJs(url: URL, source: string, map: InputSourceMap | undefined, id: string | undefined, disableTransform?: boolean): Promise<CommonJsMod>;
    loadHelper(url: URL): Promise<BabelEsmMod>;
    private _targets?;
    private _loose;
    private _assumptions;
    private _allowDeclareFields;
    private _cr?;
    private _dynamicImportVarsOptions?;
    private _babelPluginImportHelper;
    private _internalTransform?;
    /**
     * Throws if babel transform failed.
     */
    private _throwBabelReturnNull;
    private _getPluginsPresetsOfModule;
    private _getPluginsPresetsOfCommonJsModule;
    private _getEnvPreset;
}
declare type BabelAssumptionKey = 'arrayLikeIsIterable' | 'constantReexports' | 'constantSuper' | 'enumerableModuleMeta' | 'ignoreFunctionLength' | 'ignoreToPrimitiveHint' | 'iterableIsArray' | 'mutableTemplateObject' | 'noClassCalls' | 'noDocumentAll' | 'noIncompleteNsImportDetection' | 'noNewArrows' | 'objectRestNoSymbols' | 'privateFieldsAsProperties' | 'pureGetters' | 'setClassMethods' | 'setComputedProperties' | 'setPublicClassFields' | 'setSpreadProperties' | 'skipForOfIteratorClosing' | 'superIsCallableConstructor';
declare type BabelAssumptions = Partial<Record<BabelAssumptionKey, boolean>>;
declare class BabelModBase {
    constructor(url: Readonly<URL>, source: string, map: RawSourceMap | undefined, originalSource: string | undefined, sourceType: BabelModBase['_sourceType'], assumptions: BabelAssumptions | undefined, presets: babel.PluginItem[], plugins: babel.PluginItem[]);
    module(): Promise<JavaScriptSource>;
    systemjs(resolver?: TransformResolver): Promise<TransformResult>;
    private _sourceType;
    private _assumptions;
    private _plugins;
    private _presets;
    protected _url: Readonly<URL>;
    protected _source: string;
    protected _originalSource: string;
    private _map;
    private _transform;
    private _transformMultiplePasses;
    private _getGenerateOptions;
}
declare class BabelEsmMod extends BabelModBase implements EsmMod {
    readonly type = "esm";
    source(): Promise<JavaScriptSource>;
    module(): Promise<JavaScriptSource>;
}
export {};
