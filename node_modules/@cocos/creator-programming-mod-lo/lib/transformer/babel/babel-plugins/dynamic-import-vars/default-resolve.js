"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const globby_1 = __importDefault(require("globby"));
const path_1 = __importDefault(require("path"));
const defaultExtMap = {
    '.js': ['.js', '.ts'],
    '.mjs': ['.mjs', '.ts'],
};
function createDefaultResolver(options) {
    var _a;
    const forwardExt = (_a = options === null || options === void 0 ? void 0 : options.forwardExt) !== null && _a !== void 0 ? _a : 'keep-with-test';
    return (specifierParts, fileName) => {
        var _a;
        const prefix = specifierParts[0];
        if (prefix === null ||
            !(prefix.startsWith('./') || prefix.startsWith('../'))) {
            return;
        }
        const extMap = (_a = options === null || options === void 0 ? void 0 : options.extMap) !== null && _a !== void 0 ? _a : defaultExtMap;
        let glob = specifierParts.map((part) => part === null ? '*' : part).join('');
        const matchedExt = Object.entries(extMap).find(([ext]) => glob.toLowerCase().endsWith(ext));
        if (matchedExt) {
            const [src, targets] = matchedExt;
            glob = `${glob.substr(0, glob.length - src.length)}${joinExtensions(targets)}`;
        }
        const candidates = globby_1.default.sync(glob, {
            cwd: path_1.default.dirname(fileName),
        }).map((resolved) => {
            let resolvedStem;
            let resolvedExt;
            let testExt;
            if (!matchedExt) {
                resolvedStem = resolved;
                testExt = resolvedExt = '';
            }
            else {
                const [src, targets] = matchedExt;
                const target = targets.find((target) => resolved.toLowerCase().endsWith(target));
                if (!target) {
                    resolvedStem = resolved;
                    testExt = resolvedExt = '';
                }
                else {
                    resolvedStem = resolved.substr(0, resolved.length - target.length);
                    resolvedExt = target;
                    testExt = src;
                }
            }
            const test = keepRelative(`${resolvedStem}${testExt}`);
            let specifier;
            if (forwardExt === 'keep-with-test') {
                specifier = `${resolvedStem}${testExt}`;
            }
            else if (forwardExt === 'resolved') {
                specifier = `${resolvedStem}${resolvedExt}`;
            }
            else {
                specifier = resolvedStem;
            }
            return [
                test,
                keepRelative(specifier),
            ];
        });
        if (candidates.length === 0) {
            return;
        }
        return candidates;
    };
}
exports.default = createDefaultResolver;
function joinExtensions(extensions) {
    return `.{${extensions.map((ext) => ext.startsWith('.') ? ext.substr(1) : ext).join(',')}}`;
}
function keepRelative(resolved) {
    return resolved.startsWith('./') || resolved.startsWith('../') ? resolved : `./${resolved}`;
}
//# sourceMappingURL=default-resolve.js.map