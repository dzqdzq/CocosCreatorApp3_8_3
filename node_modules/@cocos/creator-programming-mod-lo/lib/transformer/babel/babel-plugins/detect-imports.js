"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.detectImports = exports.createBabelPluginDetectAndRewriteImports = void 0;
const babel = __importStar(require("@babel/core"));
function createBabelPluginDetectAndRewriteImports({ rewrite, specifiers, }) {
    const add = (specifier, loc) => {
        const resolved = rewrite === null || rewrite === void 0 ? void 0 : rewrite(specifier);
        specifiers.push({
            value: specifier,
            resolved,
            loc: loc ? {
                start: { line: loc.start.line, column: loc.start.column },
                end: { line: loc.end.line, column: loc.end.column },
            } : undefined,
        });
        return resolved;
    };
    const addStringLiteralSpecifier = (specifier) => {
        return add(specifier.value, specifier.loc);
    };
    const createRewrittenStringLiteralSpecifier = (value, original) => {
        const stringLiteral = babel.types.stringLiteral(value);
        babel.types.addComment(stringLiteral, 'trailing', original);
        return stringLiteral;
    };
    return {
        visitor: visitImportSpecifiers({
            stringLiteral(path) {
                const rewritten = addStringLiteralSpecifier(path.node);
                if (rewritten) {
                    path.replaceWith(createRewrittenStringLiteralSpecifier(rewritten, path.node.value));
                }
            },
            simpleTemplateLiteral(path, raw) {
                const rewritten = add(raw, path.node.loc);
                if (rewritten) {
                    path.replaceWith(createRewrittenStringLiteralSpecifier(rewritten, raw));
                }
            },
        }),
    };
}
exports.createBabelPluginDetectAndRewriteImports = createBabelPluginDetectAndRewriteImports;
async function detectImports(ast) {
    const result = [];
    const add = (specifier, loc) => {
        result.push({
            value: specifier,
            loc: loc ? {
                start: { line: loc.start.line, column: loc.start.column },
                end: { line: loc.end.line, column: loc.end.column },
            } : undefined,
        });
    };
    const addStringLiteralSpecifier = (specifier) => {
        add(specifier.value, specifier.loc);
    };
    babel.traverse(ast, visitImportSpecifiers({
        stringLiteral(path) {
            addStringLiteralSpecifier(path.node);
        },
        simpleTemplateLiteral(path, raw) {
            add(raw, path.node.loc);
        },
    }));
    return result;
}
exports.detectImports = detectImports;
function visitImportSpecifiers(visitor) {
    return {
        ImportDeclaration: (path) => visitor.stringLiteral(path.get('source')),
        ExportAllDeclaration: (path) => visitor.stringLiteral(path.get('source')),
        ExportNamedDeclaration: (path) => {
            if (path.node.source) {
                visitor.stringLiteral(path.get('source'));
            }
        },
        CallExpression: (path) => {
            const { callee, arguments: args } = path.node;
            if (callee.type === 'Import' && args.length === 1) {
                const specifierNode = args[0];
                if (specifierNode.type === 'StringLiteral') {
                    visitor.stringLiteral(path.get('arguments')[0]);
                }
                else if (specifierNode.type === 'TemplateLiteral' &&
                    specifierNode.expressions.length === 0 &&
                    specifierNode.quasis.length === 1) {
                    visitor.simpleTemplateLiteral(path.get('arguments')[0], specifierNode.quasis[0].value.raw);
                }
            }
        },
    };
}
//# sourceMappingURL=detect-imports.js.map