"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FastCommonJsMod = void 0;
const magic_string_1 = __importDefault(require("magic-string"));
const dedent_1 = __importDefault(require("dedent"));
const mod_lo_builtin_mods_1 = require("../utils/mod-lo-builtin-mods");
const share_1 = require("../cjs/share");
const detect_exports_1 = require("../cjs/detect-exports");
const console_1 = require("console");
// @ts-expect-error
const plugin_transform_modules_systemjs_1 = __importDefault(require("@babel/plugin-transform-modules-systemjs"));
const babel = __importStar(require("@babel/core"));
const asserts_1 = require("../../../creator-programming-common/lib/asserts");
const acorn_1 = require("acorn");
const acorn_walk_1 = require("acorn-walk");
class FastCommonJsMod {
    constructor(source, id) {
        this.type = 'commonjs';
        this._source = source;
        this._id = id;
        this._cjsAnalyzeResult = (0, detect_exports_1.analyzeCommonJs)(source);
    }
    source() {
        return {
            code: this._source,
            map: undefined,
        };
    }
    module() {
        return wrapCommonJs(this._source, this._id, this._cjsAnalyzeResult, mod_lo_builtin_mods_1.modLoBuiltinModCommonJsURL, true);
    }
    systemjs(resolver) {
        const { _source: code, _cjsAnalyzeResult: analyzeResult, } = this;
        const moduleSpecifiers = [];
        const resolveAndPushSpecifier = (specifier, resolver) => {
            const resolved = resolver(specifier);
            moduleSpecifiers.push({ value: specifier, resolved });
            return resolved ? resolved : specifier;
        };
        const transformedAnalyzeResult = !resolver
            ? analyzeResult
            : Object.assign(Object.assign({}, analyzeResult), { requires: analyzeResult.requires.map((request) => resolveAndPushSpecifier(request, resolver)) });
        const cjsModuleLoaderModuleSpecifier = mod_lo_builtin_mods_1.modLoBuiltinModCommonJsURL;
        const resolvedCjsModuleLoaderModuleSpecifier = !resolver
            ? cjsModuleLoaderModuleSpecifier
            : resolveAndPushSpecifier(cjsModuleLoaderModuleSpecifier, resolver);
        const resultSource = wrapCommonJs(code, this._id, transformedAnalyzeResult, resolvedCjsModuleLoaderModuleSpecifier, false);
        return {
            source: resultSource,
            moduleSpecifiers,
        };
    }
}
exports.FastCommonJsMod = FastCommonJsMod;
class IdAlloc {
    constructor(source, requestCount, namedExports) {
        this.reqVars = [];
        this.cjsNamedExportLocalVars = [];
        const ast = (0, acorn_1.parse)(source, {
            ecmaVersion: 'latest',
            sourceType: 'script',
        });
        const myIds = new Set();
        (0, acorn_walk_1.simple)(ast, {
            Identifier(node) {
                myIds.add(node.name);
            },
        });
        const generateUid = (id) => {
            const uidPrefix = `_${id}`;
            if (!myIds.has(uidPrefix)) {
                myIds.add(uidPrefix);
                return uidPrefix;
            }
            for (let i = 0;; ++i) {
                const uid = `${uidPrefix}${i}`;
                if (!myIds.has(uid)) {
                    myIds.add(uid);
                    return uid;
                }
            }
        };
        this.loaderVar = generateUid('cjsLoader');
        this.cjsExportsVar = generateUid('cjsExports');
        this.reqVars = Array.from({ length: requestCount }, (_) => generateUid('req'));
        this.cjsNamedExportLocalVars = namedExports.map((name) => generateUid(name));
    }
}
function wrapCommonJs(code, id, analyzeResult, cjsModuleLoaderModuleSpecifier, esm) {
    const { pre, post, indent } = getModLoCommonJsWrap(code, id, analyzeResult, cjsModuleLoaderModuleSpecifier, esm);
    const magicString = new magic_string_1.default(code);
    magicString
        .indent(' '.repeat(indent))
        .prepend(pre)
        .append(post);
    const outputCode = magicString.toString();
    return {
        code: outputCode,
        map: undefined,
    };
}
const COMMON_JS_CODE_PLACE_HOLDER = '$$COMMONJS_CODE_PLACE_HOLDER$$';
function getModLoCommonJsWrap(code, id, analyzeResult, cjsModuleLoaderModuleSpecifier, esm) {
    const wrapper = esm
        ? generateModLoCommonJsWrapCodeEsm(code, id, analyzeResult, cjsModuleLoaderModuleSpecifier)
        : generateModLoCommonJsWrapCodeSystemJs(code, id, analyzeResult, cjsModuleLoaderModuleSpecifier);
    const iCommonJsPlaceHolder = wrapper.indexOf(COMMON_JS_CODE_PLACE_HOLDER);
    (0, console_1.assert)(iCommonJsPlaceHolder >= 0);
    const iLastNewLine = wrapper.lastIndexOf('\n', iCommonJsPlaceHolder);
    (0, console_1.assert)(iLastNewLine <= iCommonJsPlaceHolder);
    return {
        pre: wrapper.substr(0, iCommonJsPlaceHolder) + '\n',
        post: '\n' + wrapper.substr(iCommonJsPlaceHolder + COMMON_JS_CODE_PLACE_HOLDER.length),
        indent: iCommonJsPlaceHolder - iLastNewLine,
    };
}
function generateModLoCommonJsWrapCodeEsm(code, id, analyzeResult, cjsModuleLoaderModuleSpecifier) {
    const { requires, exports, reexports: _reexports, } = analyzeResult;
    const idAlloc = new IdAlloc(code, requires.length, exports);
    const magicString = new magic_string_1.default(COMMON_JS_CODE_PLACE_HOLDER);
    const head = [];
    head.push(`import ${idAlloc.loaderVar} from '${cjsModuleLoaderModuleSpecifier}';`);
    head.push(...requires.map((request, requestIndex) => `import { ${share_1.cjsMetaUrlExportName} as ${idAlloc.reqVars[requestIndex]}} from '${request}';`));
    head.push(`let ${idAlloc.cjsExportsVar};`);
    head.push(...exports.map((_, index) => `let ${idAlloc.cjsNamedExportLocalVars[index]};`));
    head.push(`const ${share_1.cjsMetaUrlExportName} = ${id ? `'${id}'` : `import.meta.url`};`);
    const tail = [];
    const updateExportVarsStatements = exports.map((exportName, index) => `${idAlloc.cjsNamedExportLocalVars[index]} = module.exports.${exportName};`);
    const resolveMap = requires.length === 0
        ? `{}`
        : `() => ({\n${requires.map((request, requestIndex) => `  '${request}': ${idAlloc.reqVars[requestIndex]},`).join('\n')}\n})`;
    magicString
        .prepend(`// #region ORIGINAL CODE\n\n`)
        .append(`\n// #endregion ORIGINAL CODE\n\n`)
        .append((0, dedent_1.default) `
            ${idAlloc.cjsExportsVar} = module.exports;
            ${updateExportVarsStatements.join('\n')}
            \n
        `)
        .prepend(`${idAlloc.loaderVar}.define(${share_1.cjsMetaUrlExportName}, function (exports, require, module, __filename, __dirname) {\n`)
        .append(`}, ${resolveMap});`);
    tail.push(`export { ${idAlloc.cjsExportsVar} as default };`);
    tail.push(`export { ${share_1.cjsMetaUrlExportName} }`);
    magicString
        .prepend(head.join('\n') + '\n')
        .append('\n' + tail.join('\n') + (tail.length === 0 ? '' : '\n'));
    return magicString.toString();
}
function generateModLoCommonJsWrapCodeSystemJs(code, id, analyzeResult, cjsModuleLoaderModuleSpecifier) {
    const esmResult = generateModLoCommonJsWrapCodeEsm(code, id, analyzeResult, cjsModuleLoaderModuleSpecifier);
    const babelResult = babel.transformSync(esmResult, {
        plugins: [
            [plugin_transform_modules_systemjs_1.default],
        ],
    });
    (0, asserts_1.assertsNonNullable)(babelResult);
    (0, asserts_1.assertsNonNullable)(babelResult.code);
    return babelResult.code;
}
//# sourceMappingURL=transform-common-js-fast.js.map