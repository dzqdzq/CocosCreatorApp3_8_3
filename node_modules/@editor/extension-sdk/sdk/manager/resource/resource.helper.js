"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.queryFolderSize = exports.getExtensionCover = exports.recursive = exports.fileNameReg = void 0;
const get_folder_size_1 = __importDefault(require("get-folder-size"));
const path_1 = require("path");
const fs_extra_1 = require("fs-extra");
const manager_constant_1 = require("./../manager.constant");
exports.fileNameReg = /(([^:]*):)?(.*)/;
const checkPathExists = async (filePath) => {
    if (await (0, fs_extra_1.pathExists)(filePath))
        return filePath;
    return undefined;
};
const recursive = async (filePath, match, options) => {
    const collect = [];
    try {
        const fileStats = await (0, fs_extra_1.stat)(filePath);
        if (!fileStats.isDirectory() && !fileStats.isSymbolicLink())
            return collect;
        const currentPath = (0, path_1.join)(filePath, match);
        if (await (0, fs_extra_1.pathExists)(currentPath))
            collect.push(currentPath);
        let list = await (0, fs_extra_1.readdir)(filePath, { withFileTypes: true });
        const { excludeFolder, isDeep } = options || {};
        if (excludeFolder)
            list = list.filter((item) => !excludeFolder.includes(item.name) && (item.isDirectory() || item.isSymbolicLink()));
        if (isDeep) {
            const subCollect = await Promise.all(list.map((item) => (0, exports.recursive)((0, path_1.join)(filePath, item.name), match, options)));
            collect.push(...subCollect.flat(2));
        }
        else {
            const subSignList = await Promise.all(list.map((item) => checkPathExists((0, path_1.join)(filePath, item.name, match))));
            collect.push(...subSignList.filter((item) => !!item));
        }
        return collect;
    }
    catch (err) {
        return collect;
    }
};
exports.recursive = recursive;
const getExtensionCover = async (folderPath) => {
    const list = await (0, fs_extra_1.readdir)(folderPath, { withFileTypes: true });
    const coverList = list.filter((item) => manager_constant_1.EXTENSION_COVER_REG.test(item.name) && item.isFile());
    return coverList.length > 0 ? (0, path_1.resolve)(folderPath, coverList[0].name) : '';
};
exports.getExtensionCover = getExtensionCover;
const queryFolderSize = async (folderPath) => {
    return new Promise((resolve) => {
        (0, get_folder_size_1.default)(folderPath, (err, size) => {
            if (err)
                return resolve(0);
            resolve(size);
        });
    });
};
exports.queryFolderSize = queryFolderSize;
