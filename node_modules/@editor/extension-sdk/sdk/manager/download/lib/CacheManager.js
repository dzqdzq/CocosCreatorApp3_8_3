"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.cacheManage = exports.CacheManager = void 0;
const fs_extra_1 = require("fs-extra");
const path_1 = require("path");
const config_1 = require("../../config");
class CacheManager {
    expireTime = 2 * 60 * 60 * 1000;
    storeName(info) {
        const { name, version } = info;
        return `${name}@${version}.zip`;
    }
    async get(info) {
        const root = (0, config_1.getCacheStoreFolder)();
        const storePath = (0, path_1.join)(root, this.storeName(info));
        if (await (0, fs_extra_1.pathExists)(storePath))
            return storePath;
        return undefined;
    }
    async save(zipPath, info) {
        const root = (0, config_1.getCacheStoreFolder)();
        await (0, fs_extra_1.ensureDir)(root);
        const storePath = (0, path_1.join)(root, this.storeName(info));
        if (await (0, fs_extra_1.pathExists)(storePath))
            await (0, fs_extra_1.remove)(storePath);
        await (0, fs_extra_1.copy)(zipPath, storePath);
    }
    async remove(fileInfo) {
        const root = (0, config_1.getCacheStoreFolder)();
        const storePath = typeof fileInfo === 'string' ? fileInfo : (0, path_1.join)(root, this.storeName(fileInfo));
        if (await (0, fs_extra_1.pathExists)(storePath))
            await (0, fs_extra_1.remove)(storePath);
    }
    async clean() {
        const root = (0, config_1.getCacheStoreFolder)();
        if (await (0, fs_extra_1.pathExists)(root))
            await (0, fs_extra_1.remove)(root);
    }
    async removeExpireTempFiles(filePath) {
        if (!(await (0, fs_extra_1.pathExists)(filePath)))
            return;
        const fileStats = await (0, fs_extra_1.stat)(filePath);
        if (Date.now() - fileStats.mtime.getTime() >= this.expireTime)
            await (0, fs_extra_1.remove)(filePath);
    }
    async cleanTempFile() {
        try {
            const tempFolder = (0, config_1.getTempFolder)();
            if (await (0, fs_extra_1.pathExists)(tempFolder)) {
                const tempFileList = await (0, fs_extra_1.readdir)(tempFolder);
                await Promise.all(tempFileList.map((item) => this.removeExpireTempFiles((0, path_1.join)(tempFolder, item))));
            }
        }
        catch (err) { }
    }
}
exports.CacheManager = CacheManager;
exports.cacheManage = new CacheManager();
