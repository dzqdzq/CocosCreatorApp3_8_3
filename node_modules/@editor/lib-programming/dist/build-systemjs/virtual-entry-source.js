"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PREFIX = void 0;
const path_1 = __importDefault(require("path"));
exports.PREFIX = `\0virtual:`;
function virtual(modules) {
    const resolvedIds = new Map();
    Object.keys(modules).forEach((id) => {
        resolvedIds.set(path_1.default.resolve(id), modules[id]);
    });
    return {
        name: 'virtual',
        async resolveId(id, importer) {
            if (id in modules) {
                return exports.PREFIX + id;
            }
            if (importer) {
                const importerNoPrefix = importer.startsWith(exports.PREFIX)
                    ? importer.slice(exports.PREFIX.length)
                    : importer;
                const resolved = await this.resolve(id, importerNoPrefix, { skipSelf: true });
                if (resolved && resolvedIds.has(resolved.id)) {
                    return exports.PREFIX + resolved;
                }
                else {
                    return resolved;
                }
            }
            return null;
        },
        load(id) {
            if (id.startsWith(exports.PREFIX)) {
                const idNoPrefix = id.slice(exports.PREFIX.length);
                return idNoPrefix in modules ? modules[idNoPrefix] : resolvedIds.get(idNoPrefix);
            }
            return null;
        },
    };
}
exports.default = virtual;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlydHVhbC1lbnRyeS1zb3VyY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYnVpbGQtc3lzdGVtanMvdmlydHVhbC1lbnRyeS1zb3VyY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0EsZ0RBQXNCO0FBRVQsUUFBQSxNQUFNLEdBQUcsWUFBWSxDQUFDO0FBRW5DLFNBQXdCLE9BQU8sQ0FBQyxPQUErQjtJQUMzRCxNQUFNLFdBQVcsR0FBRyxJQUFJLEdBQUcsRUFBa0IsQ0FBQztJQUU5QyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFO1FBQ2hDLFdBQVcsQ0FBQyxHQUFHLENBQUMsY0FBRSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsRUFBRSxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNqRCxDQUFDLENBQUMsQ0FBQztJQUVILE9BQU87UUFDSCxJQUFJLEVBQUUsU0FBUztRQUVmLEtBQUssQ0FBQyxTQUFTLENBQUMsRUFBRSxFQUFFLFFBQVE7WUFDeEIsSUFBSSxFQUFFLElBQUksT0FBTyxFQUFFO2dCQUNmLE9BQU8sY0FBTSxHQUFHLEVBQUUsQ0FBQzthQUN0QjtZQUVELElBQUksUUFBUSxFQUFFO2dCQUNWLE1BQU0sZ0JBQWdCLEdBQUcsUUFBUSxDQUFDLFVBQVUsQ0FBQyxjQUFNLENBQUM7b0JBQ2hELENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLGNBQU0sQ0FBQyxNQUFNLENBQUM7b0JBQy9CLENBQUMsQ0FBQyxRQUFRLENBQUM7Z0JBQ2YsTUFBTSxRQUFRLEdBQUcsTUFBTSxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsRUFBRSxnQkFBZ0IsRUFBRSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO2dCQUM5RSxJQUFJLFFBQVEsSUFBSSxXQUFXLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsRUFBRTtvQkFDMUMsT0FBTyxjQUFNLEdBQUcsUUFBUSxDQUFDO2lCQUM1QjtxQkFBTTtvQkFDSCxPQUFPLFFBQVEsQ0FBQztpQkFDbkI7YUFDSjtZQUVELE9BQU8sSUFBSSxDQUFDO1FBQ2hCLENBQUM7UUFFRCxJQUFJLENBQUMsRUFBRTtZQUNILElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQyxjQUFNLENBQUMsRUFBRTtnQkFDdkIsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxjQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQzNDLE9BQU8sVUFBVSxJQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDO2FBQ3BGO1lBRUQsT0FBTyxJQUFJLENBQUM7UUFDaEIsQ0FBQztLQUNKLENBQUM7QUFDTixDQUFDO0FBdkNELDBCQXVDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlICogYXMgcm9sbHVwIGZyb20gJ3JvbGx1cCc7XG5pbXBvcnQgcHMgZnJvbSAncGF0aCc7XG5cbmV4cG9ydCBjb25zdCBQUkVGSVggPSBgXFwwdmlydHVhbDpgO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB2aXJ0dWFsKG1vZHVsZXM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4pOiByb2xsdXAuUGx1Z2luIHtcbiAgICBjb25zdCByZXNvbHZlZElkcyA9IG5ldyBNYXA8c3RyaW5nLCBzdHJpbmc+KCk7XG5cbiAgICBPYmplY3Qua2V5cyhtb2R1bGVzKS5mb3JFYWNoKChpZCkgPT4ge1xuICAgICAgICByZXNvbHZlZElkcy5zZXQocHMucmVzb2x2ZShpZCksIG1vZHVsZXNbaWRdKTtcbiAgICB9KTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIG5hbWU6ICd2aXJ0dWFsJyxcblxuICAgICAgICBhc3luYyByZXNvbHZlSWQoaWQsIGltcG9ydGVyKSB7XG4gICAgICAgICAgICBpZiAoaWQgaW4gbW9kdWxlcykge1xuICAgICAgICAgICAgICAgIHJldHVybiBQUkVGSVggKyBpZDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGltcG9ydGVyKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaW1wb3J0ZXJOb1ByZWZpeCA9IGltcG9ydGVyLnN0YXJ0c1dpdGgoUFJFRklYKVxuICAgICAgICAgICAgICAgICAgICA/IGltcG9ydGVyLnNsaWNlKFBSRUZJWC5sZW5ndGgpXG4gICAgICAgICAgICAgICAgICAgIDogaW1wb3J0ZXI7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzb2x2ZWQgPSBhd2FpdCB0aGlzLnJlc29sdmUoaWQsIGltcG9ydGVyTm9QcmVmaXgsIHsgc2tpcFNlbGY6IHRydWUgfSk7XG4gICAgICAgICAgICAgICAgaWYgKHJlc29sdmVkICYmIHJlc29sdmVkSWRzLmhhcyhyZXNvbHZlZC5pZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFBSRUZJWCArIHJlc29sdmVkO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9LFxuXG4gICAgICAgIGxvYWQoaWQpIHtcbiAgICAgICAgICAgIGlmIChpZC5zdGFydHNXaXRoKFBSRUZJWCkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBpZE5vUHJlZml4ID0gaWQuc2xpY2UoUFJFRklYLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlkTm9QcmVmaXggaW4gbW9kdWxlcyA/IG1vZHVsZXNbaWROb1ByZWZpeF0gOiByZXNvbHZlZElkcy5nZXQoaWROb1ByZWZpeCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9LFxuICAgIH07XG59XG4iXX0=