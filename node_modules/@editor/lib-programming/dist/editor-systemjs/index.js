"use strict";
/// <reference path="../../@types/systemjs/systemjs.d.ts"/>
/// <reference path="../../@types/systemjs/extras/named-register.d.ts"/>
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.globalEditorSystem = exports.ExecutorSystem = void 0;
const out_1 = require("../../static/executor/systemjs-bridge/out");
const url_1 = __importDefault(require("url"));
const i18n_1 = require("../utils/i18n");
class ExecutorSystem {
    constructor() {
        this._registry = Object.create(null);
        this._lastRegister = null;
        this._baseUrl = 'project:///';
        this._instantiationHandlers = [];
        this._importMap = {
            imports: {},
            scopes: {},
        };
        const me = this;
        if (!out_1.systemJSPrototype.prepareImport) {
            out_1.systemJSPrototype.prepareImport = () => { };
        }
        out_1.systemJSPrototype.resolve = function (...args) {
            // @ts-ignore
            return me._resolve(this, ...args);
        };
        out_1.systemJSPrototype.instantiate = function (...args) {
            // @ts-ignore
            return me._instantiate(this, ...args);
        };
        this._vendorRegisterFn = out_1.systemJSPrototype.register;
        out_1.systemJSPrototype.register = function (...args) {
            if (typeof args[0] === 'string') {
                // @ts-ignore
                return me.setRegister(...args);
            }
            // @ts-ignore
            return me._register(this, ...args);
        };
        this._detailResolve = out_1.createDetailResolver(undefined, // logger,
        undefined);
        // TODO: merge systemjs implementation
        const upvalueMap = {};
        const vendorCreateContext = out_1.systemJSPrototype.createContext;
        out_1.systemJSPrototype.createContext = function (id) {
            const name2class = {};
            const context = vendorCreateContext.call(this, id);
            upvalueMap[context.url] = name2class;
            return Object.assign(Object.assign({}, context), { upvalue(name) {
                    return function (target) {
                        name2class[name] = target;
                    };
                } });
        };
    }
    get importMap() {
        return this._importMap;
    }
    async import(url) {
        return await System.import(url);
    }
    /**
     * Provides the last anonymous `System.register` call.
     */
    getRegister() {
        const lastRegister = this._lastRegister;
        this._lastRegister = null;
        return lastRegister;
    }
    clearImportMap() {
        this._importMap.imports = {};
        this._importMap.scopes = {};
    }
    extendImportMap(importMap, baseUrl) {
        out_1.systemJsCommon.resolveAndComposeImportMap(importMap, baseUrl, this._importMap);
    }
    setRegister(id, dependencies, declare) {
        this._registry[id] = [dependencies, declare];
    }
    deleteRegister(id) {
        delete this._registry[id];
    }
    encodeModsMgrRequest(id) {
        const url = `${ExecutorSystem.protocolHeadModsMgr}${encodeURIComponent(id)}`;
        return url;
    }
    addInstantiationHandler(handler) {
        this._instantiationHandlers.push(handler);
    }
    setResolutionDetailMap(resolutionDetailMap, url) {
        console.debug(`Set detail map ${url}: ${JSON.stringify(resolutionDetailMap, undefined, 2)}`);
        out_1.setResolutionDetailMap(resolutionDetailMap, url);
    }
    _resolve(systemJSPrototype, id, parentURL) {
        parentURL = parentURL !== null && parentURL !== void 0 ? parentURL : this._baseUrl;
        this._detailResolve(id, parentURL);
        const result = out_1.systemJsCommon.resolveImportMap(this._importMap, out_1.systemJsCommon.resolveIfNotPlainOrUrl(id, parentURL) || id, parentURL);
        if (result) {
            return result;
        }
        if (id in this._registry) {
            return id;
        }
        return this._throwUnresolved(id, parentURL);
    }
    async _instantiate(systemJSPrototype, url, firstParentUrl) {
        if (url in this._registry) {
            // TODO: this._registry[url] = null;
            return this._registry[url];
        }
        for (const handler of this._instantiationHandlers) {
            const register = await handler(url);
            if (register) {
                return register;
            }
        }
        let path;
        if (url.startsWith('file:')) {
            try {
                path = url_1.default.fileURLToPath(url);
            }
            catch (_a) { }
        }
        if (url.startsWith(ExecutorSystem.protocolHeadModsMgr)) {
            const urlObject = new URL(url);
            const pathname = urlObject.pathname;
            const id = decodeURIComponent(pathname);
            return [[], (exportBindings) => {
                    return {
                        execute: () => {
                            const modsMgr = require('cc/mods-mgr');
                            const mod = modsMgr.syncImport(id);
                            exportBindings(mod);
                        },
                    };
                }];
        }
        if (path) {
            require(path);
            const register = this.getRegister();
            if (!register) {
                throw new Error(i18n_1.i18nTranslate('executor_system_js_no_module_registered', { url }));
            }
            return register;
        }
        return this._throwInstantiationError(url, firstParentUrl);
    }
    /**
     * 处理 `System.register()` 调用。
     */
    _register(systemJSPrototype, deps, declare) {
        this._lastRegister = [deps, declare];
    }
    _throwUnresolved(id, parentUrl) {
        throw Error(i18n_1.i18nTranslate('executor_failed_to_resolve', { specifier: id, parentURL: parentUrl !== null && parentUrl !== void 0 ? parentUrl : i18n_1.i18nTranslate('executor_system_js_origin') }));
    }
    _throwInstantiationError(url, firstParentUrl) {
        throw Error(i18n_1.i18nTranslate('executor_failed_to_instantiate', { url, firstParentURL: firstParentUrl !== null && firstParentUrl !== void 0 ? firstParentUrl : i18n_1.i18nTranslate('executor_system_js_origin') }));
    }
}
exports.ExecutorSystem = ExecutorSystem;
ExecutorSystem.protocolHeadModsMgr = 'mods-mgr:';
exports.globalEditorSystem = new ExecutorSystem();
//# sourceMappingURL=data:application/json;base64,