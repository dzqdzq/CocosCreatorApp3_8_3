"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BuiltinModuleProvider = void 0;
const build_time_constants_1 = require("./build-time-constants");
const babel = __importStar(require("@babel/core"));
// import babelPresetCC from '@cocos/babel-preset-cc';
// @ts-ignore
// import babelPresetEnv from '@babel/preset-env';
const plugin_transform_modules_systemjs_1 = __importDefault(require("@babel/plugin-transform-modules-systemjs"));
const url_1 = __importDefault(require("url"));
/**
 * `BuiltinModuleProvider` 用于提供项目脚本用到的所有“内置”模块，例如：
 * - `"cc.base"` 等引擎模块
 * - 模块 `"cc/env"` —— 提供了构建时常量
 *
 * 它提供的内置模块可以用于在**编辑器环境**中、**预览环境**中以及**构建时打包工具**的环境中运行。
 */
class BuiltinModuleProvider {
    constructor(options) {
        var _a;
        this._modules = {};
        this._format = (_a = options.format) !== null && _a !== void 0 ? _a : 'esm';
    }
    static async create(options) {
        const provider = new BuiltinModuleProvider(options);
        await provider._initialize(options);
        return provider;
    }
    async addEngineIndexMod(url, xSourceKind) {
        if (Array.isArray(url)) {
            this._modules['cc'] = await this._transform(makeModuleCCSource(url));
        }
        else {
            this._modules['cc'] = await this._makeModuleAlias(url, xSourceKind);
        }
    }
    async addEngineMods(ccMods, xSourceKind) {
        await Promise.all(Object.entries(ccMods).map(async ([id, alias]) => {
            this._modules[id] = await this._makeModuleAlias(alias, xSourceKind);
        }));
    }
    async addBuildTimeConstantsMod(constants, xSourceKind) {
        if (typeof constants === 'object') {
            this._modules[ModuleNames.buildTimeConstants] =
                await this._transform(await build_time_constants_1.makeBuildTimeConstantModule(constants));
        }
        else {
            this._modules[ModuleNames.buildTimeConstants] =
                await this._makeModuleAlias(constants !== null && constants !== void 0 ? constants : this.getBTCMappingSource(), xSourceKind);
        }
        // Deprecated: use 'cc/env'
        this._modules['cce.env'] = this._modules[ModuleNames.buildTimeConstants];
    }
    getBTCMappingSource() {
        return `cc/editor/populate-internal-constants`;
    }
    /**
     * 当前提供的所有模块以及它们的源码。
     */
    get modules() {
        return this._modules;
    }
    async _initialize(options) {
    }
    async _makeModuleAlias(alias, targetKind) {
        if (targetKind === 'commonjs') {
            let moduleName;
            try {
                moduleName = url_1.default.fileURLToPath(alias);
            }
            catch (_a) {
                moduleName = alias;
            }
            return `\
System.register([], (_export) => {
    return {
        execute: () => { _export(require('${moduleName.replace(/\\/g, '\\\\')}')); },
    };
});
`;
        }
        else if (targetKind === 'amd') {
            return `\
System.register(['${alias}'], (_export) => {
    let m;
    return {
        setters: [(mAmd) => { m = mAmd.default; }],
        execute: () => { _export(m); },
    };
});
`;
        }
        else {
            return await this._transform(`export * from '${alias}';`);
        }
    }
    async _transform(code) {
        if (this._format === 'esm') {
            return code;
        }
        const babelFileResult = await babel.transformAsync(code, {
            plugins: [[plugin_transform_modules_systemjs_1.default]],
            presets: [
            // [babelPresetEnv, {
            //     modules: 'systemjs',
            // }],
            // [babelPresetCC, {
            //     useDefineForClassFields: true,
            //     allowDeclareFields: true,
            // }],
            ],
        });
        if (!babelFileResult) {
            throw new Error(`Failed to transform code in PreviewFacet: ${code}`);
        }
        return babelFileResult.code;
    }
}
exports.BuiltinModuleProvider = BuiltinModuleProvider;
function makeModuleCCSource(dependencies) {
    const source = dependencies.map((dependency) => `export * from '${dependency}';`).join('\n');
    return source;
}
var ModuleNames;
(function (ModuleNames) {
    ModuleNames["codeQualityCr"] = "cce:code-quality/cr";
    ModuleNames["buildTimeConstants"] = "cc/env";
})(ModuleNames || (ModuleNames = {}));
//# sourceMappingURL=data:application/json;base64,