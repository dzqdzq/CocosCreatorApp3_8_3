"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function $({ template, types }) {
    const templateBuilderOptions = {
        preserveComments: true,
        // @ts-ignore
        syntacticPlaceholders: true,
    };
    const importTemplate = template.statement(`import { cclegacy as %%ccVar%% } from %%ccModule%%;`, templateBuilderOptions);
    const headerTemplate = template.statement(`%%ccVar%%._RF.push({}, %%compressedUUID%%, %%baseName%%, %%importMeta%%);`, templateBuilderOptions);
    const footerTemplate = template.statement(`%%ccVar%%._RF.pop();`, templateBuilderOptions);
    return {
        visitor: {
            Program: (path, state) => {
                const options = state.opts;
                const ccVar = path.scope.generateUid('_cclegacy');
                const imp = importTemplate({
                    ccVar: types.identifier(ccVar),
                    ccModule: types.stringLiteral('cc'),
                });
                const header = headerTemplate({
                    ccVar: types.identifier(ccVar),
                    baseName: types.stringLiteral(options.baseName),
                    compressedUUID: types.stringLiteral(options.compressedUUID),
                    importMeta: options.importMeta ?
                        types.metaProperty(types.identifier('import'), types.identifier('meta')) :
                        types.identifier('undefined'),
                });
                const footer = footerTemplate({
                    ccVar: types.identifier(ccVar),
                });
                path.node.body = [imp, header].concat(path.node.body, [footer]);
            },
        },
    };
}
exports.default = $;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGx1Z2luLWFubm90YXRlLWNjY2xhc3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYmFiZWwvcGx1Z2luLWFubm90YXRlLWNjY2xhc3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFJQSxTQUFTLENBQUMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQWdCO0lBSXhDLE1BQU0sc0JBQXNCLEdBQTJCO1FBQ25ELGdCQUFnQixFQUFFLElBQUk7UUFDdEIsYUFBYTtRQUNiLHFCQUFxQixFQUFFLElBQUk7S0FDOUIsQ0FBQztJQUVGLE1BQU0sY0FBYyxHQUFHLFFBQVEsQ0FBQyxTQUFTLENBQ3JDLHFEQUFxRCxFQUNyRCxzQkFBc0IsQ0FBQyxDQUFDO0lBRTVCLE1BQU0sY0FBYyxHQUFHLFFBQVEsQ0FBQyxTQUFTLENBQ3JDLDJFQUEyRSxFQUMzRSxzQkFBc0IsQ0FBQyxDQUFDO0lBRTVCLE1BQU0sY0FBYyxHQUFHLFFBQVEsQ0FBQyxTQUFTLENBQ3JDLHNCQUFzQixFQUFFLHNCQUFzQixDQUFDLENBQUM7SUFFcEQsT0FBTztRQUNILE9BQU8sRUFBRTtZQUNMLE9BQU8sRUFBRSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBRTtnQkFDckIsTUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQztnQkFDM0IsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLENBQUM7Z0JBQ2xELE1BQU0sR0FBRyxHQUFHLGNBQWMsQ0FBQztvQkFDdkIsS0FBSyxFQUFFLEtBQUssQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDO29CQUM5QixRQUFRLEVBQUUsS0FBSyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUM7aUJBQ3RDLENBQUMsQ0FBQztnQkFDSCxNQUFNLE1BQU0sR0FBRyxjQUFjLENBQUM7b0JBQzFCLEtBQUssRUFBRSxLQUFLLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQztvQkFDOUIsUUFBUSxFQUFFLEtBQUssQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQztvQkFDL0MsY0FBYyxFQUFFLEtBQUssQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQztvQkFDM0QsVUFBVSxFQUFFLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQzt3QkFDNUIsS0FBSyxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxFQUFFLEtBQUssQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO3dCQUMxRSxLQUFLLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQztpQkFDcEMsQ0FBQyxDQUFDO2dCQUNILE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQztvQkFDMUIsS0FBSyxFQUFFLEtBQUssQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDO2lCQUNqQyxDQUFDLENBQUM7Z0JBQ0gsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUNwRSxDQUFDO1NBQ0o7S0FDSixDQUFDO0FBQ04sQ0FBQztBQVVELGtCQUFlLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHR5cGUgKiBhcyBiYWJlbCBmcm9tICdAYmFiZWwvY29yZSc7XG5pbXBvcnQgdHlwZSB7IFRlbXBsYXRlQnVpbGRlck9wdGlvbnMgfSBmcm9tICdAYmFiZWwvdGVtcGxhdGUnO1xuXG5mdW5jdGlvbiAkKHsgdGVtcGxhdGUsIHR5cGVzIH06IHR5cGVvZiBiYWJlbCk6IGJhYmVsLlBsdWdpbk9iajx7XG4gICAgZmlsZW5hbWU6IHN0cmluZztcbiAgICBvcHRzOiAkLk9wdGlvbnM7XG59PiB7XG4gICAgY29uc3QgdGVtcGxhdGVCdWlsZGVyT3B0aW9uczogVGVtcGxhdGVCdWlsZGVyT3B0aW9ucyA9IHtcbiAgICAgICAgcHJlc2VydmVDb21tZW50czogdHJ1ZSxcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBzeW50YWN0aWNQbGFjZWhvbGRlcnM6IHRydWUsXG4gICAgfTtcblxuICAgIGNvbnN0IGltcG9ydFRlbXBsYXRlID0gdGVtcGxhdGUuc3RhdGVtZW50KFxuICAgICAgICBgaW1wb3J0IHsgY2NsZWdhY3kgYXMgJSVjY1ZhciUlIH0gZnJvbSAlJWNjTW9kdWxlJSU7YCxcbiAgICAgICAgdGVtcGxhdGVCdWlsZGVyT3B0aW9ucyk7XG5cbiAgICBjb25zdCBoZWFkZXJUZW1wbGF0ZSA9IHRlbXBsYXRlLnN0YXRlbWVudChcbiAgICAgICAgYCUlY2NWYXIlJS5fUkYucHVzaCh7fSwgJSVjb21wcmVzc2VkVVVJRCUlLCAlJWJhc2VOYW1lJSUsICUlaW1wb3J0TWV0YSUlKTtgLFxuICAgICAgICB0ZW1wbGF0ZUJ1aWxkZXJPcHRpb25zKTtcblxuICAgIGNvbnN0IGZvb3RlclRlbXBsYXRlID0gdGVtcGxhdGUuc3RhdGVtZW50KFxuICAgICAgICBgJSVjY1ZhciUlLl9SRi5wb3AoKTtgLCB0ZW1wbGF0ZUJ1aWxkZXJPcHRpb25zKTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIHZpc2l0b3I6IHtcbiAgICAgICAgICAgIFByb2dyYW06IChwYXRoLCBzdGF0ZSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSBzdGF0ZS5vcHRzO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNjVmFyID0gcGF0aC5zY29wZS5nZW5lcmF0ZVVpZCgnX2NjbGVnYWN5Jyk7XG4gICAgICAgICAgICAgICAgY29uc3QgaW1wID0gaW1wb3J0VGVtcGxhdGUoe1xuICAgICAgICAgICAgICAgICAgICBjY1ZhcjogdHlwZXMuaWRlbnRpZmllcihjY1ZhciksXG4gICAgICAgICAgICAgICAgICAgIGNjTW9kdWxlOiB0eXBlcy5zdHJpbmdMaXRlcmFsKCdjYycpLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGNvbnN0IGhlYWRlciA9IGhlYWRlclRlbXBsYXRlKHtcbiAgICAgICAgICAgICAgICAgICAgY2NWYXI6IHR5cGVzLmlkZW50aWZpZXIoY2NWYXIpLFxuICAgICAgICAgICAgICAgICAgICBiYXNlTmFtZTogdHlwZXMuc3RyaW5nTGl0ZXJhbChvcHRpb25zLmJhc2VOYW1lKSxcbiAgICAgICAgICAgICAgICAgICAgY29tcHJlc3NlZFVVSUQ6IHR5cGVzLnN0cmluZ0xpdGVyYWwob3B0aW9ucy5jb21wcmVzc2VkVVVJRCksXG4gICAgICAgICAgICAgICAgICAgIGltcG9ydE1ldGE6IG9wdGlvbnMuaW1wb3J0TWV0YSA/XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlcy5tZXRhUHJvcGVydHkodHlwZXMuaWRlbnRpZmllcignaW1wb3J0JyksIHR5cGVzLmlkZW50aWZpZXIoJ21ldGEnKSkgOlxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZXMuaWRlbnRpZmllcigndW5kZWZpbmVkJyksXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY29uc3QgZm9vdGVyID0gZm9vdGVyVGVtcGxhdGUoe1xuICAgICAgICAgICAgICAgICAgICBjY1ZhcjogdHlwZXMuaWRlbnRpZmllcihjY1ZhciksXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcGF0aC5ub2RlLmJvZHkgPSBbaW1wLCBoZWFkZXJdLmNvbmNhdChwYXRoLm5vZGUuYm9keSwgW2Zvb3Rlcl0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9O1xufVxuXG5uYW1lc3BhY2UgJCB7XG4gICAgZXhwb3J0IGludGVyZmFjZSBPcHRpb25zIHtcbiAgICAgICAgYmFzZU5hbWU6IHN0cmluZztcbiAgICAgICAgY29tcHJlc3NlZFVVSUQ6IHN0cmluZztcbiAgICAgICAgaW1wb3J0TWV0YT86IGJvb2xlYW47XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCAkO1xuIl19