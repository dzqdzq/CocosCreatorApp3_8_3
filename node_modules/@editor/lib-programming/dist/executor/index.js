"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Executor = void 0;
const path_1 = __importDefault(require("path"));
const editor_systemjs_1 = require("../editor-systemjs");
const url_1 = require("url");
const loader_1 = require("@cocos/creator-programming-quick-pack/lib/loader");
const pack_mod_instantiation_1 = require("./pack-mod-instantiation");
// `'cc'` 的 URL
const engineIndexURL = `cce:/internal/x/cc`;
// 引擎功能单元模块的 URL 前缀
const engineFeatureUnitsPrefix = `cce:/internal/x/cc-fu/`;
// 引擎公开至编辑器的模块的 URL 前缀
const engineExportToEditorPrefix = `cce:/internal/x/engine-export-to-editor/`;
// 编辑器公开给项目的模块的 URL 前缀
const editorExportToProjectPrefix = `cce:/internal/x/editor-export-to-project/`;
// 项目路径相关 URL 前缀
const projectUrlPrefix = 'cce:/internal/x/project/';
const packResourceBaseURL = new url_1.URL('pack:///');
const defaultImportExceptionHandler = (err) => {
    console.warn(err);
};
class Executor {
    constructor(quickPackLoaderContext, packModuleEvaluator, importExceptionHandler) {
        this._cachedExceptions = new Map();
        this._classUuidMap = {};
        this._builtinMods = {};
        this._modules = Object.create(null);
        this._registeredClasses = [];
        this._plugins = [];
        this._fixedImportMap = { imports: {} };
        this._engineImportMapURL = '';
        this._instantiatedPackMods = [];
        this._cceModuleMap = {};
        this._editorSystem = editor_systemjs_1.globalEditorSystem;
        this._logger = {};
        const quickPackLoader = new loader_1.QuickPackLoader(quickPackLoaderContext);
        this._packLoader = quickPackLoader;
        this._packModInstantiation = new pack_mod_instantiation_1.PackModInstantiation(quickPackLoader, this._editorSystem, packModuleEvaluator);
        this._importExceptionHandler = importExceptionHandler !== null && importExceptionHandler !== void 0 ? importExceptionHandler : defaultImportExceptionHandler;
    }
    static async create(options) {
        if (Executor._inst) {
            return Executor._inst;
        }
        const executor = Executor._inst = new Executor(options.quickPackLoaderContext, options.packModuleEvaluator, options.importExceptionHandler);
        await executor._initialize(options);
        return executor;
    }
    async _initialize(options) {
        if (options.beforeUnregisterClass) {
            this._beforeUnregisterClass = options.beforeUnregisterClass;
        }
        this._addInstantiationHandlers(options.importEngineMod);
        this._cceModuleMap = options.cceModuleMap;
        this._fixedImportMap.imports['cc'] = engineIndexURL;
        this._fixedImportMap.imports['cc/env'] = `${engineExportToEditorPrefix}cc/editor/populate-internal-constants`;
        // TODO: deprecated cce.env is only live in 3.0-preview
        this._fixedImportMap.imports['cce.env'] = this._fixedImportMap.imports['cc/env'];
        const projectCustomMacroURL = new url_1.URL('./temp/programming/custom-macro.js', projectUrlPrefix);
        this._fixedImportMap.imports['cc/userland/macro'] = projectCustomMacroURL.href;
        for (const [moduleName, moduleConfig] of Object.entries(this._cceModuleMap)) {
            if (moduleName === 'mapLocation') {
                continue;
            }
            this._fixedImportMap.imports[moduleName] = `${editorExportToProjectPrefix}${moduleName}`;
        }
        const venderOnLoad = System.constructor.prototype.onload;
        const self = this;
        System.constructor.prototype.onload = function (...args) {
            self._onModuleLoaded(...args);
            if (typeof venderOnLoad === 'function') {
                venderOnLoad.apply(this, arguments);
            }
        };
        this._logger = options.logger || {};
    }
    _addInstantiationHandlers(importer) {
        // 处理项目里的自定义配置模块，比如 custom-macro 模块
        this._editorSystem.addInstantiationHandler((url) => {
            if (url.startsWith(projectUrlPrefix)) {
                let quickCompilerRequest = url.substr(projectUrlPrefix.length);
                quickCompilerRequest = path_1.default.join(Editor.Project.path, quickCompilerRequest);
                require(quickCompilerRequest);
                return this._editorSystem.getRegister();
            }
        });
        // 处理引擎模块的实例化
        this._editorSystem.addInstantiationHandler(async (url) => {
            let quickCompilerRequest = '';
            if (url.startsWith(engineFeatureUnitsPrefix)) {
                quickCompilerRequest = url;
            }
            else if (url.startsWith(engineExportToEditorPrefix)) {
                quickCompilerRequest = url.substr(engineExportToEditorPrefix.length);
            }
            if (quickCompilerRequest) {
                return [[], (_export) => {
                        return {
                            execute: async () => {
                                const exports = await importer(quickCompilerRequest);
                                _export(exports);
                            },
                        };
                    }];
            }
        });
        // 处理 Packer 里的模块的实例化
        const packResourceBaseURLString = packResourceBaseURL.href;
        this._editorSystem.addInstantiationHandler(async (url) => {
            if (url.startsWith(packResourceBaseURLString)) {
                const link = url.slice(packResourceBaseURLString.length);
                const register = await this._packModInstantiation.instantiate(link);
                this._instantiatedPackMods.push(url);
                return register;
            }
        });
        this._editorSystem.addInstantiationHandler(async (url) => {
            if (url.startsWith(editorExportToProjectPrefix)) {
                const moduleName = url.slice(editorExportToProjectPrefix.length);
                const moduleConfig = this._cceModuleMap[moduleName];
                const mapLocation = this._cceModuleMap.mapLocation;
                if (moduleConfig) {
                    const exportedObj = require(path_1.default.join(path_1.default.dirname(mapLocation), moduleConfig.main));
                    return [[], (_export) => {
                            return {
                                execute: async () => {
                                    _export(exportedObj);
                                },
                            };
                        }];
                }
            }
        });
    }
    addPolyfillFile(file) {
        require(file);
    }
    async prepare() {
        await this._reloadPackMods();
    }
    async import(url) {
        return await this._editorSystem.import(url);
    }
    /**
     * 重新读取 Packer 的内容并重新执行所有项目脚本和插件脚本。
     */
    async reload() {
        const onClassRegistered = (classConstructor, metadata) => {
            var _a;
            var _b, _c;
            this._registeredClasses.push(classConstructor);
            console.debug(`[[Executor]] Register ${classConstructor.name}`);
            if (metadata) {
                ((_a = (_b = this._classUuidMap)[_c = metadata.uuid]) !== null && _a !== void 0 ? _a : (_b[_c] = [])).push(classConstructor);
            }
        };
        EditorExtends.on('class-registered', onClassRegistered);
        try {
            await this._reloadPackMods();
            console.groupCollapsed(`Invalidate all modules`);
            await this._invalidateAllModules();
            console.groupEnd();
            this._invalidateAllPlugins();
            this._loadAllPlugins();
            console.groupCollapsed(`Imports all modules`);
            await this._importPrerequisiteModules();
            console.groupEnd();
        }
        catch (e) {
            console.error(`Executor failed to reload.`, e);
            throw e;
        }
        finally {
            EditorExtends.removeListener('class-registered', onClassRegistered);
        }
    }
    async hotReloadPluginScripts(info) {
        if (info) {
            if (Object.keys(info.changes).length === 0 && info.removals.length === 0) {
                return;
            }
        }
        this._invalidateAllPlugins();
        if (info) {
            for (let i = 0; i < this._plugins.length; i++) {
                const plugin = this._plugins[i];
                // 应用修改
                if (info.removals.includes(plugin.uuid)) {
                    this._plugins.splice(i, 1);
                    i--;
                }
                if (info.changes[plugin.uuid]) {
                    Object.assign(plugin, info.changes[plugin.uuid]);
                }
            }
        }
        await this._loadAllPlugins();
    }
    isModule(id) {
        return id in this._modules;
    }
    async clear() {
        this._invalidateAllPlugins();
        this._plugins = [];
        await this._invalidateAllModules();
    }
    setPluginScripts(plugins) {
        this._invalidateAllPlugins();
        this._plugins = plugins;
    }
    /**
     * 查找指定脚本模块中注册的所有 cc 类。
     * @param uuid 模块的 uuid。
     * @returns 指定脚本模块中注册的所有 cc 类；如果 [uuid] 并不对应一个模块或模块中未注册任何类则返回 `undefined`。
     */
    queryClassesInModule(uuid) {
        return this._classUuidMap[uuid];
    }
    async _reloadPackMods() {
        // 多进程操作同一个资源。如果不给文件加锁，会导致文件读写冲突
        await this._packModInstantiation.lock();
        await this._packModInstantiation.reload();
        this._editorSystem.clearImportMap();
        const quickPackLoaderImportMap = await this._packModInstantiation.getImportMap();
        this._editorSystem.extendImportMap(quickPackLoaderImportMap, new url_1.URL(this._packLoader.importMapURL, packResourceBaseURL).href);
        await this._packModInstantiation.unlock();
        this._editorSystem.extendImportMap(this._fixedImportMap, this._engineImportMapURL);
        const resolutionDetailMap = await this._packLoader.loadResolutionDetailMap();
        this._editorSystem.setResolutionDetailMap(resolutionDetailMap, new url_1.URL(this._packLoader.resolutionDetailMapURL, packResourceBaseURL).href);
    }
    async _invalidateAllModules() {
        const cc = await System.import('cc');
        for (const registeredClass of this._registeredClasses) {
            if (this._beforeUnregisterClass) {
                this._beforeUnregisterClass(registeredClass);
            }
            cc.js.unregisterClass(registeredClass);
            console.debug(`Unregister ${registeredClass.name}`);
        }
        this._registeredClasses = [];
        this._classUuidMap = {};
        cc.cclegacy._RF.reset();
        this._invalidateAllPackMods();
    }
    _invalidateAllPackMods() {
        for (const packModId of this._instantiatedPackMods) {
            console.debug(`Invalidating '${packModId}'`);
            const result = System.delete(packModId);
            if (result === false) {
                console.debug(`Note: failed to delete ${packModId}, maybe it's being executing?`);
            }
        }
        this._instantiatedPackMods.length = 0;
    }
    async _importPrerequisiteModules() {
        const cc = await System.import('cc');
        try {
            await System.import('cce:/internal/x/prerequisite-imports');
        }
        catch (err) {
            this._importExceptionHandler(err);
        }
        finally {
            this._cachedExceptions.clear();
            // 项目脚本可能在执行的时候会抛出异常，这导致 `cc._RF` 没有正确弹出。
            // 我们在最后清理一下。
            cc.cclegacy._RF.reset();
        }
    }
    async _loadAllPlugins() {
        const sortedMapped = this._plugins.map((pluginScript) => pluginScript.file);
        for (const file of sortedMapped) {
            try {
                require(file);
            }
            catch (error) {
                console.error(error);
            }
        }
    }
    _invalidateAllPlugins() {
        for (const [, pluginScriptInfo] of Object.entries(this._plugins)) {
            delete require.cache[pluginScriptInfo.file];
        }
    }
    _tryLog(cat, ...args) {
        // @ts-ignore
        return (cat in this._logger) ? this._logger[cat](...args) : this._defaultLog(...args);
    }
    _defaultLog(...args) {
        console.log(...args);
    }
    _onModuleLoaded(error, id) {
        const cachedExceptions = this._cachedExceptions;
        if (!error) {
            console.debug(`[[Executor]] Module "${id}" loaded.`);
        }
        else {
            if (!cachedExceptions.has(error)) {
                this._importExceptionHandler(error);
            }
            this._tryLog('loadException', id, error, cachedExceptions.has(error));
            cachedExceptions.set(error, id);
        }
    }
}
exports.Executor = Executor;
//# sourceMappingURL=data:application/json;base64,