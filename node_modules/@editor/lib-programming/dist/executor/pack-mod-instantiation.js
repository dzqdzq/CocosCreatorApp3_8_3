"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PackModInstantiation = void 0;
const vm_1 = __importDefault(require("vm"));
const asserts_1 = require("../utils/asserts");
const fs_extra_1 = __importDefault(require("fs-extra"));
const i18n_1 = require("../utils/i18n");
const url_1 = require("url");
const defaultPackModuleEvaluator = {
    async evaluate(file) {
        let moduleFileResolved;
        try {
            moduleFileResolved = require.resolve(file);
        }
        catch (err) {
            throw new Error(i18n_1.i18nTranslate('executor_pack_mod_instantiation_error_host_resolve_error', { url: file, reason: err }));
        }
        try {
            const source = await fs_extra_1.default.readFile(moduleFileResolved, 'utf8');
            // This is how Node.js implement require
            const fn = vm_1.default.compileFunction(source, ['System'], {
                filename: url_1.pathToFileURL(moduleFileResolved).href,
            });
            Reflect.apply(fn, undefined, [System]);
        }
        catch (err) {
            throw new Error(i18n_1.i18nTranslate('executor_pack_mod_instantiation_error_host_execute_error', { url: file, reason: err }));
        }
        if (!(moduleFileResolved in require.cache)) {
            console.debug(`${file} resolved to ${moduleFileResolved} is not in module cache!`);
        }
        else {
            const mod = require.cache[moduleFileResolved];
            delete require.cache[moduleFileResolved];
            if (mod && mod.parent) {
                const index = mod.parent.children.indexOf(mod);
                if (index !== -1) {
                    mod.parent.children.splice(index, 1);
                }
            }
        }
    },
};
class PackModInstantiation {
    constructor(quickPackLoader, system, evaluator) {
        this._cachedRegisters = {};
        this._quickPackLoader = quickPackLoader;
        // const system = {
        //     register: (...moduleRegister: ModuleRegister) => {
        //         if (this._lastRegister) {
        //             throw new Error(`Unknown register. Did you have more than one System.register() in your code?`);
        //         }
        //         this._lastRegister = [...moduleRegister];
        //     },
        // };
        // this._registerContext = vm.createContext({
        //     System: system,
        // });
        this._system = system;
        this._evaluator = evaluator !== null && evaluator !== void 0 ? evaluator : defaultPackModuleEvaluator;
    }
    async instantiate(chunkURL) {
        const chunkId = this._quickPackLoader.getChunkId(chunkURL);
        let cached = this._cachedRegisters[chunkId];
        if (!cached) {
            this._cachedRegisters[chunkId] = undefined;
            const mTimestamp = await this._quickPackLoader.queryTimestamp(chunkId);
            const resource = await this._quickPackLoader.loadChunkFromId(chunkId);
            asserts_1.asserts(mTimestamp >= 0, `Chunk '${chunkId}' has a bad timestamp.`);
            asserts_1.asserts(resource.type === 'file');
            const file = resource.path;
            // const code = await fs.readFile(file, 'utf8');
            const register = await this._evalCode2(file);
            cached = {
                register,
                mTimestamp,
            };
            this._cachedRegisters[chunkId] = cached;
        }
        return cached.register;
    }
    async lock() {
        await this._quickPackLoader.lock();
    }
    async unlock() {
        await this._quickPackLoader.unlock();
    }
    /**
     * 重新加载底层的 Pack Loader 并且移除所有失效的缓存。
     */
    async reload() {
        await this._quickPackLoader.reload();
        const cachedChunks = Object.keys(this._cachedRegisters);
        const mTimestamps = await this._quickPackLoader.queryTimestamps(cachedChunks);
        cachedChunks.forEach((chunkId, iChunk) => {
            const cache = this._cachedRegisters[chunkId];
            if (!cache || cache.mTimestamp !== mTimestamps[iChunk]) {
                delete this._cachedRegisters[chunkId];
            }
        });
    }
    async getImportMap() {
        return await this._quickPackLoader.loadImportMap();
    }
    async _evalCode2(file) {
        await this._evaluator.evaluate(file);
        const register = this._system.getRegister();
        if (!register) {
            throw new Error(i18n_1.i18nTranslate('executor_system_js_no_module_registered', { url: file }));
        }
        return register;
    }
}
exports.PackModInstantiation = PackModInstantiation;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFjay1tb2QtaW5zdGFudGlhdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9leGVjdXRvci9wYWNrLW1vZC1pbnN0YW50aWF0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUNBLDRDQUFvQjtBQUNwQiw4Q0FBMkM7QUFDM0Msd0RBQTBCO0FBRzFCLHdDQUE4QztBQUM5Qyw2QkFBb0M7QUFNcEMsTUFBTSwwQkFBMEIsR0FBd0I7SUFDcEQsS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFZO1FBQ3ZCLElBQUksa0JBQTBCLENBQUM7UUFDL0IsSUFBSTtZQUNBLGtCQUFrQixHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDOUM7UUFBQyxPQUFPLEdBQUcsRUFBRTtZQUNWLE1BQU0sSUFBSSxLQUFLLENBQUMsb0JBQWEsQ0FDekIsMERBQTBELEVBQzFELEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLENBQzdCLENBQUMsQ0FBQztTQUNOO1FBRUQsSUFBSTtZQUNBLE1BQU0sTUFBTSxHQUFHLE1BQU0sa0JBQUUsQ0FBQyxRQUFRLENBQUMsa0JBQWtCLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFFN0Qsd0NBQXdDO1lBQ3hDLE1BQU0sRUFBRSxHQUFHLFlBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxDQUFDLEVBQUU7Z0JBQzlDLFFBQVEsRUFBRSxtQkFBYSxDQUFDLGtCQUFrQixDQUFDLENBQUMsSUFBSTthQUNuRCxDQUFDLENBQUM7WUFFSCxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRSxTQUFTLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1NBQzFDO1FBQUMsT0FBTyxHQUFHLEVBQUU7WUFDVixNQUFNLElBQUksS0FBSyxDQUFDLG9CQUFhLENBQ3pCLDBEQUEwRCxFQUMxRCxFQUFFLEdBQUcsRUFBRSxJQUFJLEVB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O0NBQ0o7QUFsSEQsb0RBa0hDIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgdm0gZnJvbSAndm0nO1xuaW1wb3J0IHsgYXNzZXJ0cyB9IGZyb20gJy4uL3V0aWxzL2Fzc2VydHMnO1xuaW1wb3J0IGZzIGZyb20gJ2ZzLWV4dHJhJztcbmltcG9ydCB7IENodW5rVGltZXN0YW1wLCBDaHVua0lkLCBRdWlja1BhY2tMb2FkZXIgfSBmcm9tICdAY29jb3MvY3JlYXRvci1wcm9ncmFtbWluZy1xdWljay1wYWNrL2xpYi9sb2FkZXInO1xuaW1wb3J0IHR5cGUgeyBFeGVjdXRvclN5c3RlbSB9IGZyb20gJy4uL2VkaXRvci1zeXN0ZW1qcyc7XG5pbXBvcnQgeyBpMThuVHJhbnNsYXRlIH0gZnJvbSAnLi4vdXRpbHMvaTE4bic7XG5pbXBvcnQgeyBwYXRoVG9GaWxlVVJMIH0gZnJvbSAndXJsJztcblxuZXhwb3J0IGludGVyZmFjZSBQYWNrTW9kdWxlRXZhbHVhdG9yIHtcbiAgICBldmFsdWF0ZShmaWxlOiBzdHJpbmcpOiB2b2lkIHwgUHJvbWlzZTx2b2lkPjtcbn1cblxuY29uc3QgZGVmYXVsdFBhY2tNb2R1bGVFdmFsdWF0b3I6IFBhY2tNb2R1bGVFdmFsdWF0b3IgPSB7XG4gICAgYXN5bmMgZXZhbHVhdGUoZmlsZTogc3RyaW5nKSB7XG4gICAgICAgIGxldCBtb2R1bGVGaWxlUmVzb2x2ZWQ6IHN0cmluZztcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIG1vZHVsZUZpbGVSZXNvbHZlZCA9IHJlcXVpcmUucmVzb2x2ZShmaWxlKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoaTE4blRyYW5zbGF0ZShcbiAgICAgICAgICAgICAgICAnZXhlY3V0b3JfcGFja19tb2RfaW5zdGFudGlhdGlvbl9lcnJvcl9ob3N0X3Jlc29sdmVfZXJyb3InLFxuICAgICAgICAgICAgICAgIHsgdXJsOiBmaWxlLCByZWFzb246IGVyciB9LFxuICAgICAgICAgICAgKSk7XG4gICAgICAgIH1cblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3Qgc291cmNlID0gYXdhaXQgZnMucmVhZEZpbGUobW9kdWxlRmlsZVJlc29sdmVkLCAndXRmOCcpO1xuXG4gICAgICAgICAgICAvLyBUaGlzIGlzIGhvdyBOb2RlLmpzIGltcGxlbWVudCByZXF1aXJlXG4gICAgICAgICAgICBjb25zdCBmbiA9IHZtLmNvbXBpbGVGdW5jdGlvbihzb3VyY2UsIFsnU3lzdGVtJ10sIHtcbiAgICAgICAgICAgICAgICBmaWxlbmFtZTogcGF0aFRvRmlsZVVSTChtb2R1bGVGaWxlUmVzb2x2ZWQpLmhyZWYsXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgUmVmbGVjdC5hcHBseShmbiwgdW5kZWZpbmVkLCBbU3lzdGVtXSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGkxOG5UcmFuc2xhdGUoXG4gICAgICAgICAgICAgICAgJ2V4ZWN1dG9yX3BhY2tfbW9kX2luc3RhbnRpYXRpb25fZXJyb3JfaG9zdF9leGVjdXRlX2Vycm9yJyxcbiAgICAgICAgICAgICAgICB7IHVybDogZmlsZSwgcmVhc29uOiBlcnIgfSxcbiAgICAgICAgICAgICkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCEobW9kdWxlRmlsZVJlc29sdmVkIGluIHJlcXVpcmUuY2FjaGUpKSB7XG4gICAgICAgICAgICBjb25zb2xlLmRlYnVnKGAke2ZpbGV9IHJlc29sdmVkIHRvICR7bW9kdWxlRmlsZVJlc29sdmVkfSBpcyBub3QgaW4gbW9kdWxlIGNhY2hlIWApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgbW9kID0gcmVxdWlyZS5jYWNoZVttb2R1bGVGaWxlUmVzb2x2ZWRdO1xuICAgICAgICAgICAgZGVsZXRlIHJlcXVpcmUuY2FjaGVbbW9kdWxlRmlsZVJlc29sdmVkXTtcbiAgICAgICAgICAgIGlmIChtb2QgJiYgbW9kLnBhcmVudCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gbW9kLnBhcmVudC5jaGlsZHJlbi5pbmRleE9mKG1vZCk7XG4gICAgICAgICAgICAgICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICBtb2QucGFyZW50LmNoaWxkcmVuLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcbn07XG5cbmV4cG9ydCBjbGFzcyBQYWNrTW9kSW5zdGFudGlhdGlvbiB7XG4gICAgY29uc3RydWN0b3IocXVpY2tQYWNrTG9hZGVyOiBRdWlja1BhY2tMb2FkZXIsIHN5c3RlbTogRXhlY3V0b3JTeXN0ZW0sIGV2YWx1YXRvcj86IFBhY2tNb2R1bGVFdmFsdWF0b3IpIHtcbiAgICAgICAgdGhpcy5fcXVpY2tQYWNrTG9hZGVyID0gcXVpY2tQYWNrTG9hZGVyO1xuICAgICAgICAvLyBjb25zdCBzeXN0ZW0gPSB7XG4gICAgICAgIC8vICAgICByZWdpc3RlcjogKC4uLm1vZHVsZVJlZ2lzdGVyOiBNb2R1bGVSZWdpc3RlcikgPT4ge1xuICAgICAgICAvLyAgICAgICAgIGlmICh0aGlzLl9sYXN0UmVnaXN0ZXIpIHtcbiAgICAgICAgLy8gICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmtub3duIHJlZ2lzdGVyLiBEaWQgeW91IGhhdmUgbW9yZSB0aGFuIG9uZSBTeXN0ZW0ucmVnaXN0ZXIoKSBpbiB5b3VyIGNvZGU/YCk7XG4gICAgICAgIC8vICAgICAgICAgfVxuICAgICAgICAvLyAgICAgICAgIHRoaXMuX2xhc3RSZWdpc3RlciA9IFsuLi5tb2R1bGVSZWdpc3Rlcl07XG4gICAgICAgIC8vICAgICB9LFxuICAgICAgICAvLyB9O1xuICAgICAgICAvLyB0aGlzLl9yZWdpc3RlckNvbnRleHQgPSB2bS5jcmVhdGVDb250ZXh0KHtcbiAgICAgICAgLy8gICAgIFN5c3RlbTogc3lzdGVtLFxuICAgICAgICAvLyB9KTtcbiAgICAgICAgdGhpcy5fc3lzdGVtID0gc3lzdGVtO1xuICAgICAgICB0aGlzLl9ldmFsdWF0b3IgPSBldmFsdWF0b3IgPz8gZGVmYXVsdFBhY2tNb2R1bGVFdmFsdWF0b3I7XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIGluc3RhbnRpYXRlKGNodW5rVVJMOiBzdHJpbmcpIHtcbiAgICAgICAgY29uc3QgY2h1bmtJZCA9IHRoaXMuX3F1aWNrUGFja0xvYWRlci5nZXRDaHVua0lkKGNodW5rVVJMKTtcblxuICAgICAgICBsZXQgY2FjaGVkID0gdGhpcy5fY2FjaGVkUmVnaXN0ZXJzW2NodW5rSWRdO1xuICAgICAgICBpZiAoIWNhY2hlZCkge1xuICAgICAgICAgICAgdGhpcy5fY2FjaGVkUmVnaXN0ZXJzW2NodW5rSWRdID0gdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICBjb25zdCBtVGltZXN0YW1wID0gYXdhaXQgdGhpcy5fcXVpY2tQYWNrTG9hZGVyLnF1ZXJ5VGltZXN0YW1wKGNodW5rSWQpO1xuICAgICAgICAgICAgY29uc3QgcmVzb3VyY2UgPSBhd2FpdCB0aGlzLl9xdWlja1BhY2tMb2FkZXIubG9hZENodW5rRnJvbUlkKGNodW5rSWQpO1xuXG4gICAgICAgICAgICBhc3NlcnRzKG1UaW1lc3RhbXAgPj0gMCwgYENodW5rICcke2NodW5rSWR9JyBoYXMgYSBiYWQgdGltZXN0YW1wLmApO1xuICAgICAgICAgICAgYXNzZXJ0cyhyZXNvdXJjZS50eXBlID09PSAnZmlsZScpO1xuXG4gICAgICAgICAgICBjb25zdCBmaWxlID0gcmVzb3VyY2UucGF0aDtcbiAgICAgICAgICAgIC8vIGNvbnN0IGNvZGUgPSBhd2FpdCBmcy5yZWFkRmlsZShmaWxlLCAndXRmOCcpO1xuICAgICAgICAgICAgY29uc3QgcmVnaXN0ZXIgPSBhd2FpdCB0aGlzLl9ldmFsQ29kZTIoZmlsZSk7XG4gICAgICAgICAgICBjYWNoZWQgPSB7XG4gICAgICAgICAgICAgICAgcmVnaXN0ZXIsXG4gICAgICAgICAgICAgICAgbVRpbWVzdGFtcCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLl9jYWNoZWRSZWdpc3RlcnNbY2h1bmtJZF0gPSBjYWNoZWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY2FjaGVkLnJlZ2lzdGVyO1xuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBsb2NrICgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgYXdhaXQgdGhpcy5fcXVpY2tQYWNrTG9hZGVyLmxvY2soKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgdW5sb2NrICgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgYXdhaXQgdGhpcy5fcXVpY2tQYWNrTG9hZGVyLnVubG9jaygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOmHjeaWsOWKoOi9veW6leWxgueahCBQYWNrIExvYWRlciDlubbkuJTnp7vpmaTmiYDmnInlpLHmlYjnmoTnvJPlrZjjgIJcbiAgICAgKi9cbiAgICBwdWJsaWMgYXN5bmMgcmVsb2FkKCkge1xuICAgICAgICBhd2FpdCB0aGlzLl9xdWlja1BhY2tMb2FkZXIucmVsb2FkKCk7XG4gICAgICAgIGNvbnN0IGNhY2hlZENodW5rcyA9IE9iamVjdC5rZXlzKHRoaXMuX2NhY2hlZFJlZ2lzdGVycykgYXMgQ2h1bmtJZFtdO1xuICAgICAgICBjb25zdCBtVGltZXN0YW1wcyA9IGF3YWl0IHRoaXMuX3F1aWNrUGFja0xvYWRlci5xdWVyeVRpbWVzdGFtcHMoY2FjaGVkQ2h1bmtzKTtcbiAgICAgICAgY2FjaGVkQ2h1bmtzLmZvckVhY2goKGNodW5rSWQsIGlDaHVuaykgPT4ge1xuICAgICAgICAgICAgY29uc3QgY2FjaGUgPSB0aGlzLl9jYWNoZWRSZWdpc3RlcnNbY2h1bmtJZF07XG4gICAgICAgICAgICBpZiAoIWNhY2hlIHx8IGNhY2hlLm1UaW1lc3RhbXAgIT09IG1UaW1lc3RhbXBzW2lDaHVua10pIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5fY2FjaGVkUmVnaXN0ZXJzW2NodW5rSWRdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgZ2V0SW1wb3J0TWFwKCkge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5fcXVpY2tQYWNrTG9hZGVyLmxvYWRJbXBvcnRNYXAoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIF9xdWlja1BhY2tMb2FkZXI6IFF1aWNrUGFja0xvYWRlcjtcblxuICAgIHByaXZhdGUgX2NhY2hlZFJlZ2lzdGVyczogUmVjb3JkPENodW5rSWQsIHtcbiAgICAgICAgbVRpbWVzdGFtcDogQ2h1bmtUaW1lc3RhbXA7XG4gICAgICAgIHJlZ2lzdGVyOiBNb2R1bGVSZWdpc3RlcjtcbiAgICB9IHwgdW5kZWZpbmVkPiA9IHt9O1xuXG4gICAgLy8gcHJpdmF0ZSBfcmVnaXN0ZXJDb250ZXh0OiB2bS5Db250ZXh0O1xuXG4gICAgLy8gcHJpdmF0ZSBfbGFzdFJlZ2lzdGVyOiBNb2R1bGVSZWdpc3RlciB8IG51bGwgPSBudWxsO1xuXG4gICAgLy8gcHJpdmF0ZSBfZXZhbENvZGUoY29kZTogc3RyaW5nLCBmaWxlTmFtZT86IHN0cmluZyk6IE1vZHVsZVJlZ2lzdGVyIHwgbnVsbCB7XG4gICAgLy8gICAgIGFzc2VydHModGhpcy5fbGFzdFJlZ2lzdGVyID09PSBudWxsKTtcbiAgICAvLyAgICAgbGV0IGxhc3RSZWdpc3RlcjogTW9kdWxlUmVnaXN0ZXIgfCBudWxsO1xuICAgIC8vICAgICB0cnkge1xuICAgIC8vICAgICAgICAgdm0ucnVuSW5Db250ZXh0KGNvZGUsIHRoaXMuX3JlZ2lzdGVyQ29udGV4dCwge1xuICAgIC8vICAgICAgICAgICAgIGZpbGVuYW1lOiBmaWxlTmFtZSxcbiAgICAvLyAgICAgICAgICAgICBkaXNwbGF5RXJyb3JzOiB0cnVlLFxuICAgIC8vICAgICAgICAgfSk7XG4gICAgLy8gICAgICAgICBsYXN0UmVnaXN0ZXIgPSB0aGlzLl9sYXN0UmVnaXN0ZXI7XG4gICAgLy8gICAgIH0gZmluYWxseSB7XG4gICAgLy8gICAgICAgICB0aGlzLl9sYXN0UmVnaXN0ZXIgPSBudWxsO1xuICAgIC8vICAgICB9XG4gICAgLy8gICAgIHJldHVybiBsYXN0UmVnaXN0ZXI7XG4gICAgLy8gfVxuXG4gICAgcHJpdmF0ZSBfc3lzdGVtOiBFeGVjdXRvclN5c3RlbTtcblxuICAgIHByaXZhdGUgX2V2YWx1YXRvcjogUGFja01vZHVsZUV2YWx1YXRvcjtcblxuICAgIHByaXZhdGUgYXN5bmMgX2V2YWxDb2RlMihmaWxlOiBzdHJpbmcpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5fZXZhbHVhdG9yLmV2YWx1YXRlKGZpbGUpO1xuXG4gICAgICAgIGNvbnN0IHJlZ2lzdGVyID0gdGhpcy5fc3lzdGVtLmdldFJlZ2lzdGVyKCk7XG4gICAgICAgIGlmICghcmVnaXN0ZXIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihpMThuVHJhbnNsYXRlKFxuICAgICAgICAgICAgICAgICdleGVjdXRvcl9zeXN0ZW1fanNfbm9fbW9kdWxlX3JlZ2lzdGVyZWQnLFxuICAgICAgICAgICAgICAgIHsgdXJsOiBmaWxlIH0sXG4gICAgICAgICAgICApKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZWdpc3RlcjtcbiAgICB9XG59XG4iXX0=