"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmbeddedCommonJs = void 0;
const out_1 = require("../../static/embedded-commonjs-helpers/out");
const url_1 = __importDefault(require("url"));
class EmbeddedCommonJs {
    constructor({ importMap, importMapUrl, }) {
        this._parsedImportMap = { imports: {}, scopes: {} };
        this._moduleCache = {};
        this._namedWrappers = {};
        out_1.resolveAndComposeImportMap(importMap, importMapUrl, this._parsedImportMap);
    }
    addNamedWrappers(wrappers) {
        Object.assign(this._namedWrappers, wrappers);
    }
    syncImport(id) {
        return this._require(id);
    }
    resolve(id) {
        return this._resolve(id);
    }
    _require(specifier, parent) {
        const id = this._resolve(specifier, parent);
        const cachedModule = this._moduleCache[id];
        if (cachedModule) {
            return cachedModule.exports;
        }
        const module = { id, exports: {} };
        this._moduleCache[id] = module;
        this._tryModuleLoad(module, id);
        return module.exports;
    }
    _resolve(specifier, parent) {
        const parentUrl = parent ? parent.id : undefined;
        return out_1.resolveImportMap(this._parsedImportMap, out_1.resolveIfNotPlainOrUrl(specifier, parentUrl) || specifier, parentUrl) || this._throwUnresolved(specifier, parentUrl);
    }
    _tryModuleLoad(module, id) {
        let threw = true;
        try {
            this._load(module, id);
            threw = false;
        }
        finally {
            if (threw) {
                delete this._moduleCache[id];
            }
        }
    }
    _load(module, id) {
        const wrapper = this._loadWrapper(id);
        const require = this._createRequire(module);
        wrapper(module.exports, require, module);
    }
    _loadWrapper(id) {
        if (id in this._namedWrappers) {
            return this._namedWrappers[id];
        }
        else {
            return this._loadExternalWrapper(id);
        }
    }
    _loadExternalWrapper(id) {
        return (exports, _require, _module) => {
            let path;
            try {
                path = url_1.default.fileURLToPath(id);
            }
            catch (err) {
                throw new Error(`${id} is not a valid file URL`);
            }
            _module.exports = require(path);
        };
    }
    _createRequire(module) {
        return (specifier) => this._require(specifier, module);
    }
    _throwUnresolved(specifier, parentUrl) {
        throw new Error(`Unable to resolve ${specifier} from ${parent}.`);
    }
}
exports.EmbeddedCommonJs = EmbeddedCommonJs;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZW1iZWRkZWQtY29tbW9uanMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0Esb0VBS29EO0FBQ3BELDhDQUFzQjtBQUV0QixNQUFhLGdCQUFnQjtJQUN6QixZQUFZLEVBQ1IsU0FBUyxFQUNULFlBQVksR0FJZjtRQWdCTyxxQkFBZ0IsR0FBUSxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBQ3BELGlCQUFZLEdBQTJCLEVBQUUsQ0FBQztRQUMxQyxtQkFBYyxHQUE0QixFQUFFLENBQUM7UUFqQmpELGdDQUEwQixDQUFDLFNBQVMsRUFBRSxZQUFZLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFDL0UsQ0FBQztJQUVNLGdCQUFnQixDQUFDLFFBQWlDO1FBQ3JELE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRU0sVUFBVSxDQUFDLEVBQVU7UUFDeEIsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzdCLENBQUM7SUFFTSxPQUFPLENBQUMsRUFBVTtRQUNyQixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDN0IsQ0FBQztJQU1PLFFBQVEsQ0FBQyxTQUFpQixFQUFFLE1BQWU7UUFDL0MsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFFNUMsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUMzQyxJQUFJLFlBQVksRUFBRTtZQUNkLE9BQU8sWUFBWSxDQUFDLE9BQU8sQ0FBQztTQUMvQjtRQUVELE1BQU0sTUFBTSxHQUFXLEVBQUUsRUFBRSxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUUsQ0FBQztRQUMzQyxJQUFJLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQztRQUMvQixJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNoQyxPQUFPLE1BQU0sQ0FBQyxPQUFPLENBQUM7SUFDMUIsQ0FBQztJQUVPLFFBQVEsQ0FBQyxTQUFpQixFQUFFLE1BQWU7UUFDL0MsTUFBTSxTQUFTLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7UUFDakQsT0FBTyxzQkFBZ0IsQ0FDbkIsSUFBSSxDQUFDLGdCQUFnQixFQUNyQiw0QkFBc0IsQ0FBQyxTQUFTLEVBQUUsU0FBUyxDQUFDLElBQUksU0FBUyxFQUN6RCxTQUFTLENBQ1osSUFBSSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQ3JELENBQUM7SUFFTyxjQUFjLENBQUMsTUFBYyxFQUFFLEVBQVU7UUFDN0MsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUk7WUFDQSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQztZQUN2QixLQUFLLEdBQUcsS0FBSyxDQUFDO1NBQ2pCO2dCQUFTO1lBQ04sSUFBSSxLQUFLLEVBQUU7Z0JBQ1AsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2FBQ2hDO1NBQ0o7SUFDTCxDQUFDO0lBRU8sS0FBSyxDQUFDLE1BQWMsRUFBRSxFQUFVO1FBQ3BDLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdEMsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM1QyxPQUFPLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDN0MsQ0FBQztJQUVPLFlBQVksQ0FBQyxFQUFVO1FBQzNCLElBQUksRUFBRSxJQUFJLElBQUksQ0FBQyxjQUFjLEVBQUU7WUFDM0IsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQ2xDO2FBQU07WUFDSCxPQUFPLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUN4QztJQUNMLENBQUM7SUFFTyxvQkFBb0IsQ0FBQyxFQUFVO1FBQ25DLE9BQU8sQ0FBQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxFQUFFO1lBQ2xDLElBQUksSUFBWSxDQUFDO1lBQ2pCLElBQUk7Z0JBQ0EsSUFBSSxHQUFHLGFBQUcsQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLENBQUM7YUFDaEM7WUFBQyxPQUFPLEdBQUcsRUFBRTtnQkFDVixNQUFNLElBQUksS0FBSyxDQUFDLEdBQUcsRUFBRSwwQkFBMEIsQ0FBQyxDQUFDO2FBQ3BEO1lBQ0QsT0FBTyxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDcEMsQ0FBQyxDQUFDO0lBQ04sQ0FBQztJQUVPLGNBQWMsQ0FBQyxNQUFjO1FBQ2pDLE9BQU8sQ0FBQyxTQUFpQixFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNuRSxDQUFDO0lBRU8sZ0JBQWdCLENBQUMsU0FBaUIsRUFBRSxTQUFrQjtRQUMxRCxNQUFNLElBQUksS0FBSyxDQUFDLHFCQUFxQixTQUFTLFNBQVMsTUFBTSxHQUFHLENBQUMsQ0FBQztJQUN0RSxDQUFDO0NBQ0o7QUEvRkQsNENBK0ZDIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQge1xuICAgIHJlc29sdmVBbmRDb21wb3NlSW1wb3J0TWFwLFxuICAgIHJlc29sdmVJbXBvcnRNYXAsXG4gICAgcmVzb2x2ZUlmTm90UGxhaW5PclVybCxcbiAgICAvLyBAdHMtaWdub3JlXG59IGZyb20gJy4uLy4uL3N0YXRpYy9lbWJlZGRlZC1jb21tb25qcy1oZWxwZXJzL291dCc7XG5pbXBvcnQgVVJMIGZyb20gJ3VybCc7XG5cbmV4cG9ydCBjbGFzcyBFbWJlZGRlZENvbW1vbkpzIHtcbiAgICBjb25zdHJ1Y3Rvcih7XG4gICAgICAgIGltcG9ydE1hcCxcbiAgICAgICAgaW1wb3J0TWFwVXJsLFxuICAgIH06IHtcbiAgICAgICAgaW1wb3J0TWFwOiBhbnk7XG4gICAgICAgIGltcG9ydE1hcFVybDogc3RyaW5nO1xuICAgIH0pIHtcbiAgICAgICAgcmVzb2x2ZUFuZENvbXBvc2VJbXBvcnRNYXAoaW1wb3J0TWFwLCBpbXBvcnRNYXBVcmwsIHRoaXMuX3BhcnNlZEltcG9ydE1hcCk7XG4gICAgfVxuXG4gICAgcHVibGljIGFkZE5hbWVkV3JhcHBlcnMod3JhcHBlcnM6IFJlY29yZDxzdHJpbmcsIFdyYXBwZXI+KSB7XG4gICAgICAgIE9iamVjdC5hc3NpZ24odGhpcy5fbmFtZWRXcmFwcGVycywgd3JhcHBlcnMpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzeW5jSW1wb3J0KGlkOiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3JlcXVpcmUoaWQpO1xuICAgIH1cblxuICAgIHB1YmxpYyByZXNvbHZlKGlkOiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Jlc29sdmUoaWQpO1xuICAgIH1cblxuICAgIHByaXZhdGUgX3BhcnNlZEltcG9ydE1hcDogYW55ID0geyBpbXBvcnRzOiB7fSwgc2NvcGVzOiB7fSB9O1xuICAgIHByaXZhdGUgX21vZHVsZUNhY2hlOiBSZWNvcmQ8c3RyaW5nLCBNb2R1bGU+ID0ge307XG4gICAgcHJpdmF0ZSBfbmFtZWRXcmFwcGVyczogUmVjb3JkPHN0cmluZywgV3JhcHBlcj4gPSB7fTtcblxuICAgIHByaXZhdGUgX3JlcXVpcmUoc3BlY2lmaWVyOiBzdHJpbmcsIHBhcmVudD86IE1vZHVsZSkge1xuICAgICAgICBjb25zdCBpZCA9IHRoaXMuX3Jlc29sdmUoc3BlY2lmaWVyLCBwYXJlbnQpO1xuXG4gICAgICAgIGNvbnN0IGNhY2hlZE1vZHVsZSA9IHRoaXMuX21vZHVsZUNhY2hlW2lkXTtcbiAgICAgICAgaWYgKGNhY2hlZE1vZHVsZSkge1xuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbW9kdWxlOiBNb2R1bGUgPSB7IGlkLCBleHBvcnRzOiB7fSB9O1xuICAgICAgICB0aGlzLl9tb2R1bGVDYWNoZVtpZF0gPSBtb2R1bGU7XG4gICAgICAgIHRoaXMuX3RyeU1vZHVsZUxvYWQobW9kdWxlLCBpZCk7XG4gICAgICAgIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiAgICB9XG5cbiAgICBwcml2YXRlIF9yZXNvbHZlKHNwZWNpZmllcjogc3RyaW5nLCBwYXJlbnQ/OiBNb2R1bGUpOiBzdHJpbmcge1xuICAgICAgICBjb25zdCBwYXJlbnRVcmwgPSBwYXJlbnQgPyBwYXJlbnQuaWQgOiB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiByZXNvbHZlSW1wb3J0TWFwKFxuICAgICAgICAgICAgdGhpcy5fcGFyc2VkSW1wb3J0TWFwLFxuICAgICAgICAgICAgcmVzb2x2ZUlmTm90UGxhaW5PclVybChzcGVjaWZpZXIsIHBhcmVudFVybCkgfHwgc3BlY2lmaWVyLFxuICAgICAgICAgICAgcGFyZW50VXJsLFxuICAgICAgICApIHx8IHRoaXMuX3Rocm93VW5yZXNvbHZlZChzcGVjaWZpZXIsIHBhcmVudFVybCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfdHJ5TW9kdWxlTG9hZChtb2R1bGU6IE1vZHVsZSwgaWQ6IHN0cmluZykge1xuICAgICAgICBsZXQgdGhyZXcgPSB0cnVlO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5fbG9hZChtb2R1bGUsIGlkKTtcbiAgICAgICAgICAgIHRocmV3ID0gZmFsc2U7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBpZiAodGhyZXcpIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5fbW9kdWxlQ2FjaGVbaWRdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfbG9hZChtb2R1bGU6IE1vZHVsZSwgaWQ6IHN0cmluZykge1xuICAgICAgICBjb25zdCB3cmFwcGVyID0gdGhpcy5fbG9hZFdyYXBwZXIoaWQpO1xuICAgICAgICBjb25zdCByZXF1aXJlID0gdGhpcy5fY3JlYXRlUmVxdWlyZShtb2R1bGUpO1xuICAgICAgICB3cmFwcGVyKG1vZHVsZS5leHBvcnRzLCByZXF1aXJlLCBtb2R1bGUpO1xuICAgIH1cblxuICAgIHByaXZhdGUgX2xvYWRXcmFwcGVyKGlkOiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKGlkIGluIHRoaXMuX25hbWVkV3JhcHBlcnMpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9uYW1lZFdyYXBwZXJzW2lkXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9sb2FkRXh0ZXJuYWxXcmFwcGVyKGlkKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgX2xvYWRFeHRlcm5hbFdyYXBwZXIoaWQ6IHN0cmluZyk6IFdyYXBwZXIge1xuICAgICAgICByZXR1cm4gKGV4cG9ydHMsIF9yZXF1aXJlLCBfbW9kdWxlKSA9PiB7XG4gICAgICAgICAgICBsZXQgcGF0aDogc3RyaW5nO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBwYXRoID0gVVJMLmZpbGVVUkxUb1BhdGgoaWQpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke2lkfSBpcyBub3QgYSB2YWxpZCBmaWxlIFVSTGApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX21vZHVsZS5leHBvcnRzID0gcmVxdWlyZShwYXRoKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBwcml2YXRlIF9jcmVhdGVSZXF1aXJlKG1vZHVsZTogTW9kdWxlKSB7XG4gICAgICAgIHJldHVybiAoc3BlY2lmaWVyOiBzdHJpbmcpID0+IHRoaXMuX3JlcXVpcmUoc3BlY2lmaWVyLCBtb2R1bGUpO1xuICAgIH1cblxuICAgIHByaXZhdGUgX3Rocm93VW5yZXNvbHZlZChzcGVjaWZpZXI6IHN0cmluZywgcGFyZW50VXJsPzogc3RyaW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5hYmxlIHRvIHJlc29sdmUgJHtzcGVjaWZpZXJ9IGZyb20gJHtwYXJlbnR9LmApO1xuICAgIH1cbn1cblxuaW50ZXJmYWNlIE1vZHVsZSB7XG4gICAgaWQ6IHN0cmluZztcbiAgICBleHBvcnRzOiBhbnk7XG59XG5cbnR5cGUgV3JhcHBlciA9IChleHBvcnRzOiB7fSwgcmVxdWlyZTogKGlkOiBzdHJpbmcpID0+IGFueSwgX21vZHVsZTogTW9kdWxlKSA9PiB2b2lkO1xuIl19