"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SourceMapSupport = void 0;
const source_map_1 = require("source-map");
const url_1 = require("url");
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
/**
 * 参考 https://github.com/evanw/node-source-map-support/blob/master/source-map-support.js
 */
class SourceMapSupport {
    constructor() {
        this._sourceMapCache = {};
        this._fileContentsCache = {};
        this._myStackProperty = Symbol('[[Creator::stack]]');
    }
    install() {
        if (this._vendorPrepareStackTrace) {
            return;
        }
        this._vendorPrepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace =
            (...args) => this._prepareStackTrace(...args);
    }
    uninstall() {
        if (!this._vendorPrepareStackTrace) {
            return;
        }
        Error.prepareStackTrace = this._vendorPrepareStackTrace;
    }
    hasStackProperty(value) {
        return this._myStackProperty in value;
    }
    getStackProperty(value) {
        return value[this._myStackProperty];
    }
    _prepareStackTrace(err, stackTraces) {
        let vendorResult;
        if (this._vendorPrepareStackTrace) {
            // @ts-ignore
            vendorResult = this._vendorPrepareStackTrace.apply(undefined, arguments);
        }
        else {
            vendorResult = stackTraces.map(callSite => this._callSiteToString(callSite)).join('\n');
        }
        const myResult = this._prepareStackTracePostVendor(err, stackTraces, vendorResult);
        if (myResult) {
            return myResult;
        }
        return vendorResult;
    }
    _prepareStackTracePostVendor(err, stackTraces, _vendorResult) {
        if (typeof err !== 'object' || err === null) {
            return;
        }
        // const wrappedCallSites: WrappedCallSite[] = [];
        // for (const callSite of stackTraces) {
        //     const wrapped = this._wrapCallSite(callSite);
        //     if (wrapped) {
        //         wrappedCallSites.push(wrapped);
        //     }
        // }
        // if (wrappedCallSites.length !== 0) {
        //     Object.defineProperty(err, this._myStackProperty, {
        //         value: wrappedCallSites,
        //         enumerable: false,
        //     });
        //     return this._formatStack(err, wrappedCallSites);
        // }
        const state = { current: null, next: null };
        const wrappedCallSites = stackTraces.map((callSite) => {
            var _a;
            const wrapped = (_a = this._tryWrapCallSite(callSite, state)) !== null && _a !== void 0 ? _a : callSite;
            state.next = state.current;
            return wrapped;
        });
        state.current = state.next = null;
        return this._formatStack(err, wrappedCallSites);
    }
    _formatStack(err, wrappedCallSites) {
        var _a, _b;
        const stack = wrappedCallSites.map(callSite => `\n    at ${this._callSiteToString(callSite)}`).join('');
        return `${(_a = err.name) !== null && _a !== void 0 ? _a : 'Error'}: ${(_b = err.message) !== null && _b !== void 0 ? _b : ''}${stack}`;
    }
    _tryWrapCallSite(callSite, state) {
        try {
            return this._wrapCallSite(callSite, state);
        }
        catch (err) {
            console.debug(err);
            return;
        }
    }
    _wrapCallSite(callSite, state) {
        var _a, _b;
        state.current = null;
        if (callSite.isNative()) {
            return;
        }
        // Most call sites will return the source file from getFileName(), but code
        // passed to eval() ending in "//# sourceURL=..." will return the source file
        // from getScriptNameOrSourceURL() instead
        const source = (_a = callSite.getFileName()) !== null && _a !== void 0 ? _a : callSite.getScriptNameOrSourceURL();
        if (source) {
            const line = callSite.getLineNumber();
            let column = callSite.getColumnNumber() - 1;
            // Fix position in Node where some (internal) code is prepended.
            // See https://github.com/evanw/node-source-map-support/issues/36
            // Header removed in node at ^10.16 || >=11.11.0
            // v11 is not an LTS candidate, we can just test the one version with it.
            // Test node versions for: 10.16-19, 10.20+, 12-19, 20-99, 100+, or 11.11
            const noHeader = /^v(10\.1[6-9]|10\.[2-9][0-9]|10\.[0-9]{3,}|1[2-9]\d*|[2-9]\d|\d{3,}|11\.11)/;
            const headerLength = noHeader.test(process.version) ? 0 : 62;
            if (line === 1 && column > headerLength /* && !isInBrowser()*/ && !callSite.isEval()) {
                column -= headerLength;
            }
            const mappedPosition = this._mapSourcePosition({ source, line, column });
            if (mappedPosition) {
                state.current = mappedPosition;
                const wrappedCallSite = cloneCallSite(callSite);
                wrappedCallSite.getFileName = () => mappedPosition.source;
                wrappedCallSite.getLineNumber = () => mappedPosition.line;
                wrappedCallSite.getColumnNumber = () => mappedPosition.column + 1;
                const nextName = (_b = state.next) === null || _b === void 0 ? void 0 : _b.name;
                if (nextName) {
                    wrappedCallSite.getFunctionName = () => nextName;
                }
                return wrappedCallSite;
            }
        }
        else if (callSite.isEval()) {
            const origin = callSite.getEvalOrigin();
            if (origin) {
                this._mapEvalOrigin(origin);
            }
        }
    }
    _callSiteToString(callSite) {
        var _a;
        let fileName;
        let fileLocation = "";
        if (callSite.isNative()) {
            fileLocation = "native";
        }
        else {
            fileName = callSite.getFileName();
            if (!fileName && callSite.isEval()) {
                fileLocation = (_a = callSite.getEvalOrigin()) !== null && _a !== void 0 ? _a : '';
                fileLocation += ", "; // Expecting source position to follow.
            }
            if (fileName) {
                fileLocation += fileName;
            }
            else {
                // Source code does not originate from a file and is not native, but we
                // can still get the source position inside the source string, e.g. in
                // an eval string.
                fileLocation += "<anonymous>";
            }
            const lineNumber = callSite.getLineNumber();
            if (lineNumber !== null) {
                fileLocation += ":" + lineNumber;
                const columnNumber = callSite.getColumnNumber();
                if (columnNumber) {
                    fileLocation += ":" + columnNumber;
                }
            }
        }
        let line = "";
        const functionName = callSite.getFunctionName();
        let addSuffix = true;
        const isConstructor = callSite.isConstructor();
        const isMethodCall = !(callSite.isToplevel() || isConstructor);
        if (isMethodCall) {
            let typeName = callSite.getTypeName();
            // Fixes shim to be backward compatable with Node v0 to v4
            if (typeName === "[object Object]") {
                typeName = "null";
            }
            const methodName = callSite.getMethodName();
            if (functionName) {
                if (typeName && functionName.indexOf(typeName) !== 0) {
                    line += typeName + ".";
                }
                line += functionName;
                if (methodName && functionName.indexOf("." + methodName) !== functionName.length - methodName.length - 1) {
                    line += " [as " + methodName + "]";
                }
            }
            else {
                line += typeName + "." + (methodName || "<anonymous>");
            }
        }
        else if (isConstructor) {
            line += "new " + (functionName || "<anonymous>");
        }
        else if (functionName) {
            line += functionName;
        }
        else {
            line += fileLocation;
            addSuffix = false;
        }
        if (addSuffix) {
            line += " (" + fileLocation + ")";
        }
        return line;
    }
    _mapSourcePosition(position) {
        var _a;
        const sourceMapRecord = this._getSourceMap(position.source);
        if (!(sourceMapRecord === null || sourceMapRecord === void 0 ? void 0 : sourceMapRecord.map) ||
            typeof sourceMapRecord.map.originalPositionFor !== 'function') {
            return;
        }
        // Resolve the source URL relative to the URL of the source map.
        // Only return the original position if a matching line was found. If no
        // matching line is found then we return position instead, which will cause
        // the stack trace to print the path and line for the compiled file. It is
        // better to give a precise location in the compiled file than a vague
        // location in the original file.
        const originalPosition = sourceMapRecord.map.originalPositionFor(position);
        if (originalPosition.source === null || originalPosition.source === 'null') {
            return;
        }
        const resolved = this._resolveUrl(originalPosition.source, sourceMapRecord.url);
        if (resolved) {
            originalPosition.source = (_a = convertFileUrlToPath(resolved)) !== null && _a !== void 0 ? _a : resolved.href;
        }
        return originalPosition;
    }
    _mapEvalOrigin(origin) {
    }
    _getSourceMap(source) {
        var _a;
        const sourceUrl = this._resolveUrl(source);
        if (!sourceUrl) {
            return;
        }
        const { href } = sourceUrl;
        const sourceMapRecord = this._sourceMapCache[href];
        if (sourceMapRecord === undefined) {
            const fetchedSourceMap = this._fetchSourceMap(sourceUrl);
            if (!fetchedSourceMap) {
                this._sourceMapCache[href] = null;
            }
            else {
                const sourceMapUrl = fetchedSourceMap.url;
                // Load all sources stored inline with the source map into the file cache
                // to pretend like they are already loaded. They may not exist on disk.
                if (fetchedSourceMap.map.sourcesContent) {
                    fetchedSourceMap.map.sourcesContent.forEach((sourceContent, iSource) => {
                        var _a, _b;
                        if (sourceContent) {
                            const inlineSource = fetchedSourceMap.map.sources[iSource];
                            const inlineSourceUrl = (_b = (_a = this._resolveUrl(inlineSource, sourceMapUrl)) === null || _a === void 0 ? void 0 : _a.href) !== null && _b !== void 0 ? _b : inlineSource;
                            this._fileContentsCache[inlineSourceUrl] = sourceContent;
                        }
                    });
                }
                const sourceMapConsumer = new source_map_1.SourceMapConsumer(fetchedSourceMap.map);
                this._sourceMapCache[href] = { map: sourceMapConsumer, url: sourceMapUrl };
            }
        }
        return (_a = this._sourceMapCache[href]) !== null && _a !== void 0 ? _a : undefined;
    }
    _tryFetchSourceMap(source) {
        try {
            return this._fetchSourceMap(source);
        }
        catch (err) {
            console.debug(`Failed to fetch source map for '${source}': ${err}`);
            return;
        }
    }
    _fetchSourceMap(source) {
        const sourceMappingUri = this._fetchSourceMapUrl(source);
        if (!sourceMappingUri) {
            return;
        }
        // Read the contents of the source map
        let sourceMapData;
        let sourceMapUrl;
        if (reSourceMappingDataUrl.test(sourceMappingUri)) {
            // Support source map URL as a data url
            const rawData = sourceMappingUri.slice(sourceMappingUri.indexOf(',') + 1);
            sourceMapData = JSON.parse(Buffer.from(rawData, "base64").toString());
            sourceMapUrl = source;
        }
        else {
            // Support source map URLs relative to the source URL
            const resolved = this._resolveUrl(sourceMappingUri, source);
            if (!resolved) {
                return;
            }
            sourceMapUrl = resolved;
            const file = this._fetchFileSync(sourceMapUrl);
            if (!file) {
                return;
            }
            sourceMapData = JSON.parse(file);
        }
        if (!sourceMapData) {
            return;
        }
        return {
            url: sourceMapUrl,
            map: sourceMapData,
        };
    }
    _fetchSourceMapUrl(source) {
        const file = this._fetchFileSync(source);
        if (!file) {
            return;
        }
        const reg = /(?:\/\/[@#][\s]*sourceMappingURL=([^\s'"]+)[\s]*$)|(?:\/\*[@#][\s]*sourceMappingURL=([^\s*'"]+)[\s]*(?:\*\/)[\s]*$)/mg;
        // Keep executing the search to find the *last* sourceMappingURL to avoid
        // picking up sourceMappingURLs from comments, strings, etc.
        let lastMatch;
        let match;
        while ((match = reg.exec(file))) {
            lastMatch = match;
        }
        if (!lastMatch) {
            return;
        }
        return lastMatch[1];
    }
    _fetchFileSync(url) {
        var _a, _b;
        const { href } = url;
        if (!(href in this._fileContentsCache)) {
            this._fileContentsCache[href] = (_a = this._doFetchFileSync(url)) !== null && _a !== void 0 ? _a : null;
        }
        return (_b = this._fileContentsCache[href]) !== null && _b !== void 0 ? _b : undefined;
    }
    _doFetchFileSync(url) {
        let path;
        try {
            path = url_1.fileURLToPath(url);
        }
        catch (err) {
            console.warn(`${url.href} is not a valid file URL. We can only fetch source map in file system.`);
            return;
        }
        return fs_extra_1.default.readFileSync(path, { encoding: 'utf8' });
    }
    _resolveUrl(url, base) {
        if (path_1.default.isAbsolute(url)) {
            try {
                return url_1.pathToFileURL(url);
            }
            catch (_a) { }
        }
        try {
            return new url_1.URL(url, base);
        }
        catch (_b) {
            return;
        }
    }
}
exports.SourceMapSupport = SourceMapSupport;
// Regex for detecting source maps
const reSourceMappingDataUrl = /^data:application\/json[^,]+base64,/;
function cloneCallSite(callSite) {
    const object = {};
    const names = Object.getOwnPropertyNames(Object.getPrototypeOf(callSite));
    names.forEach(function (name) {
        object[name] = /^(?:is|get)/.test(name) ? function () { return callSite[name].call(callSite); } : callSite[name];
    });
    return object;
}
function convertFileUrlToPath(url) {
    if (url.protocol === 'file:') {
        try {
            return url_1.fileURLToPath(url);
        }
        catch (_a) { }
    }
}
//# sourceMappingURL=data:application/json;base64,