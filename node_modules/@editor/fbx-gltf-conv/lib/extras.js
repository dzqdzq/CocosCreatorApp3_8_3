"use strict";
/* eslint-disable camelcase */
Object.defineProperty(exports, "__esModule", { value: true });
exports.isAdsk3dsMaxPhysicalMaterial = exports.hasOriginalMaterialExtras = exports.ADSK_3DS_MAX_PHYSICAL_MATERIAL_DEFAULT_PARAMETERS = void 0;
exports.ADSK_3DS_MAX_PHYSICAL_MATERIAL_DEFAULT_PARAMETERS = {
    brdf_mode: false,
    coating: 0.0,
    coat_map_on: true,
    coat_color: [1.0, 1.0, 1.0, 1.0],
    coat_color_map_on: true,
    coat_roughness: 0.0,
    coat_rough_map_on: true,
    coat_roughness_inv: false,
    coat_affect_color: 0.5,
    coat_affect_roughness: 0.0,
    coat_ior: 1.52,
    basic_weight: 1.0,
    base_weight_map_on: true,
    base_color: [0.5, 0.5, 0.5, 1.0],
    base_color_map_on: true,
    diff_roughness: 0.0,
    diff_rough_map_on: true,
    reflectivity: 1.0,
    reflectivity_map_on: true,
    refl_color: [1.0, 1.0, 1.0, 1.0],
    refl_color_map_on: true,
    roughness: 0.0,
    roughness_map_on: true,
    roughness_inv: false,
    metalness: 0.0,
    metalness_map_on: true,
    ior: 1.52,
    ior_map_on: true,
    transparency: 0.0,
    transparency_map_on: true,
    trans_color: [1.0, 1.0, 1.0, 1.0],
    trans_color_map_on: true,
    trans_depth: 0.0,
    trans_depth_map_on: true,
    trans_roughness: 0.0,
    trans_rough_map_on: true,
    trans_roughness_inv: false,
    trans_roughness_lock: false,
    trans_ior: 1.52,
    trans_ior_map_on: true,
    thin_walled: false,
    scattering: 0.0,
    scattering_map_on: true,
    sss_color: [1.0, 1.0, 1.0, 1.0],
    sss_color_map_on: true,
    sss_scatter_color: [1.0, 0.5, 0.25, 1.0],
    sss_depth: 10.0,
    sss_scale: 1.0,
    sss_scale_map_on: true,
    emission: 1.0,
    emission_map_on: true,
    emit_color: [0.0, 0.0, 0.0, 1.0],
    emit_color_map_on: true,
    emit_luminance: 1500,
    emit_kelvin: 6500.0,
    anisotropy: 1.0,
    anisotropy_map_on: true,
    anisoangle: 0.0,
    aniso_angle_map_on: true,
};
function hasOriginalMaterialExtras(extras) {
    if (typeof extras !== 'object' || !extras) {
        return false;
    }
    const { ['FBX-glTF-conv']: toolExtra } = extras;
    if (typeof toolExtra !== 'object' || !toolExtra) {
        return false;
    }
    const { originalMaterial } = toolExtra;
    if (!originalMaterial) {
        return false;
    }
    return true;
}
exports.hasOriginalMaterialExtras = hasOriginalMaterialExtras;
function isAdsk3dsMaxPhysicalMaterial(originalMaterial) {
    const { properties } = originalMaterial;
    if (typeof properties !== 'object' || properties === null) {
        return false;
    }
    const { ['3dsMax']: adsk3dsMax } = properties;
    if (typeof adsk3dsMax !== 'object' || adsk3dsMax === null) {
        return false;
    }
    const { ORIGINAL_MTL } = adsk3dsMax;
    if (ORIGINAL_MTL !== 'PHYSICAL_MTL') {
        return false;
    }
    return true;
}
exports.isAdsk3dsMaxPhysicalMaterial = isAdsk3dsMaxPhysicalMaterial;
//# sourceMappingURL=data:application/json;base64,