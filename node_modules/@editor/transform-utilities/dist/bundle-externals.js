"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const rollup_1 = require("rollup");
// @ts-ignore
const rollup_plugin_babel_1 = __importDefault(require("rollup-plugin-babel"));
// @ts-ignore
const rollup_plugin_sourcemaps_1 = __importDefault(require("rollup-plugin-sourcemaps"));
const rollup_plugin_terser_1 = require("rollup-plugin-terser");
const rollup_plugin_commonjs_1 = __importDefault(require("rollup-plugin-commonjs"));
const rollup_plugin_node_resolve_1 = __importDefault(require("rollup-plugin-node-resolve"));
// @ts-ignore
const preset_env_1 = __importDefault(require("@babel/preset-env"));
const node_uuid_1 = __importDefault(require("node-uuid"));
function bundleExternals(chunkDir, entries, options) {
    return __awaiter(this, void 0, void 0, function* () {
        options = options || {};
        const withSourceMap = options.sourceMap;
        const doMinify = options.minify;
        const result = {
            entryMap: {},
            watchFiles: [],
        };
        const rollupPlugins = [
            rollup_plugin_node_resolve_1.default(),
            rollup_plugin_commonjs_1.default(),
            rollup_plugin_babel_1.default({
                presets: [
                    preset_env_1.default,
                ],
            }),
        ];
        if (withSourceMap) {
            rollupPlugins.push(rollup_plugin_sourcemaps_1.default);
        }
        if (doMinify) {
            rollupPlugins.push(rollup_plugin_terser_1.terser);
        }
        const rollupInput = {};
        for (const entry of entries) {
            const entryChunkUUID = node_uuid_1.default.v4();
            result.entryMap[entry] = `${entryChunkUUID}.js`;
            rollupInput[entryChunkUUID] = entry;
        }
        const rollupOptions = {
            input: rollupInput,
            plugins: rollupPlugins,
        };
        const rollupBuild = yield rollup_1.rollup(rollupOptions);
        result.watchFiles = rollupBuild.watchFiles.slice();
        const rollupOutputOptions = {
            format: 'amd',
            sourcemap: withSourceMap,
            dir: chunkDir,
        };
        yield rollupBuild.write(rollupOutputOptions);
        return result;
    });
}
exports.bundleExternals = bundleExternals;
//# sourceMappingURL=bundle-externals.js.map