"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const babel = __importStar(require("@babel/core"));
function $($babel, options) {
    if (typeof options === 'undefined') {
        throw new Error(`Options are required.`);
    }
    const templateBuilderOptions = {
        preserveComments: true,
        // @ts-ignore
        syntacticPlaceholders: true,
    };
    const importTemplate = babel.template.statement(`import { cclegacy as %%ccVar%% } from %%ccModule%%;`, templateBuilderOptions);
    const headerTemplate = babel.template.statement(`%%ccVar%%._RF.push({}, %%compressedUUID%%, %%baseName%%, %%importMeta%%);`, templateBuilderOptions);
    const footerTemplate = babel.template.statement(`%%ccVar%%._RF.pop();`, templateBuilderOptions);
    return {
        visitor: {
            Program: (path, state) => {
                const meta = typeof (options.meta) === 'function' ?
                    options.meta(state.filename) : options.meta;
                if (!meta) {
                    return;
                }
                const ccVar = path.scope.generateUid('_cclegacy');
                const imp = importTemplate({
                    ccVar: babel.types.identifier(ccVar),
                    ccModule: babel.types.stringLiteral('cc'),
                });
                const header = headerTemplate({
                    ccVar: babel.types.identifier(ccVar),
                    baseName: babel.types.stringLiteral(meta.baseName),
                    compressedUUID: babel.types.stringLiteral(meta.compressedUUID),
                    importMeta: options.importMeta ?
                        babel.types.metaProperty(babel.types.identifier('import'), babel.types.identifier('meta')) :
                        babel.types.identifier('undefined'),
                });
                const footer = footerTemplate({
                    ccVar: babel.types.identifier(ccVar),
                });
                path.node.body = [imp, header].concat(path.node.body, [footer]);
            },
        },
    };
}
exports.default = $;
//# sourceMappingURL=babel-plugin-cc-module-meta.js.map