"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const browserify_1 = __importDefault(require("browserify"));
const browserify_incremental_1 = __importDefault(require("browserify-incremental"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const babelify = require('babelify');
// @ts-ignore
const preset_env_1 = __importDefault(require("@babel/preset-env"));
const stream_1 = __importDefault(require("stream"));
class Bringify {
    constructor(options) {
        this._projectDir = options.project;
        this._outDir = options.outDir;
        this._incrementalFile = options.incrementalFile;
    }
    /**
     *
     * @param moduleMap Keys are alias module names. Values are mapped module ids.
     * @param options
     */
    bring(moduleMap, options) {
        return __awaiter(this, void 0, void 0, function* () {
            options = options || {};
            const entryFile = new stream_1.default.Readable();
            entryFile.push(Object.keys(moduleMap).map((aliasedModuleId) => `module.exports['${aliasedModuleId}'] = require('${moduleMap[aliasedModuleId]}');`).join('\n'));
            entryFile.push(null);
            const browserifyOptions = {
                bare: true,
                bundleExternal: true,
                basedir: this._projectDir,
                standalone: 'xYZ',
                debug: true,
            };
            const browserifyInstance = browserify_1.default(entryFile, Object.assign({}, browserify_incremental_1.default.args, browserifyOptions));
            if (this._incrementalFile) {
                yield fs_extra_1.default.ensureDir(path_1.default.dirname(this._incrementalFile));
            }
            const bundleFile = path_1.default.join(this._outDir, 'bundle.js');
            yield fs_extra_1.default.ensureDir(path_1.default.dirname(bundleFile));
            const bundleFileStream = fs_extra_1.default.createWriteStream(bundleFile);
            yield new Promise((resolve, reject) => {
                // Incremental
                if (this._incrementalFile) {
                    browserify_incremental_1.default(browserifyInstance, { cacheFile: this._incrementalFile });
                }
                // Transform
                browserifyInstance.transform(babelify, {
                    global: true,
                    presets: [
                        [preset_env_1.default, { modules: "commonjs", }]
                    ],
                });
                browserifyInstance.on('log', (message) => {
                    console.log(`[[Browserify log]] ${message}`);
                });
                // Bundle
                const bundle = browserifyInstance.bundle();
                bundle.on('error', function (error) {
                    this.emit('end');
                    throw new Error(`[[Browserify bundle error]] ${error}`);
                });
                // Pipe bundle to file stream.
                bundle.pipe(bundleFileStream);
                bundleFileStream.on('finish', () => {
                    resolve();
                });
                bundleFileStream.on('error', (error) => {
                    reject(error);
                });
            });
            const mapping = {};
            let iChunk = 0;
            for (const aliasModuleId of Object.keys(moduleMap)) {
                const mappedFile = path_1.default.join(this._outDir, 'chunks', `${iChunk++}.js`);
                mapping[aliasModuleId] = mappedFile;
                yield fs_extra_1.default.ensureDir(path_1.default.dirname(mappedFile));
                yield fs_extra_1.default.writeFile(mappedFile, `
System.register(["../bundle.js"], function (_export, _context) {
  "use strict";
  var _m;
  return {
	setters: [function(m) {
        _m = m;
    }],
	execute: function () {
	  _export("default", _m.default["${aliasModuleId}"]);
	}
  };
});
`);
            }
            return {
                mapping,
            };
        });
    }
}
exports.Bringify = Bringify;
//# sourceMappingURL=bringify.js.map