"use strict";
'use stirct';
Object.defineProperty(exports, "__esModule", { value: true });
exports.refresh = exports.reimport = exports.queryUUID = exports.queryPath = exports.queryUrl = exports.queryMissingInfo = exports.queryAsset = exports.get = exports.Utils = exports.AssetDB = exports.VirtualAsset = exports.Asset = exports.Importer = exports.setDefaultUserData = exports.forEach = exports.create = void 0;
const asset_db_1 = require("./libs/asset-db");
const utils_1 = require("./libs/utils");
/**
 * 创建一个新的资源数据库
 * @param options
 */
function create(options) {
    const database = new asset_db_1.AssetDB(options);
    return database;
}
exports.create = create;
/**
 * 循环每一个数据库
 * @param handler
 */
function forEach(handler) {
    Object.keys(asset_db_1.map).forEach((name) => {
        handler(asset_db_1.map[name]);
    });
}
exports.forEach = forEach;
var default_meta_1 = require("./libs/default-meta");
Object.defineProperty(exports, "setDefaultUserData", { enumerable: true, get: function () { return default_meta_1.setDefaultUserData; } });
var importer_1 = require("./libs/importer");
Object.defineProperty(exports, "Importer", { enumerable: true, get: function () { return importer_1.Importer; } });
var asset_1 = require("./libs/asset");
Object.defineProperty(exports, "Asset", { enumerable: true, get: function () { return asset_1.Asset; } });
Object.defineProperty(exports, "VirtualAsset", { enumerable: true, get: function () { return asset_1.VirtualAsset; } });
var asset_db_2 = require("./libs/asset-db");
Object.defineProperty(exports, "AssetDB", { enumerable: true, get: function () { return asset_db_2.AssetDB; } });
exports.Utils = {
    nameToId: utils_1.nameToId,
    isSubPath: utils_1.isSubPath,
};
var manager_1 = require("./libs/manager");
Object.defineProperty(exports, "get", { enumerable: true, get: function () { return manager_1.get; } });
Object.defineProperty(exports, "queryAsset", { enumerable: true, get: function () { return manager_1.queryAsset; } });
Object.defineProperty(exports, "queryMissingInfo", { enumerable: true, get: function () { return manager_1.queryMissingInfo; } });
Object.defineProperty(exports, "queryUrl", { enumerable: true, get: function () { return manager_1.queryUrl; } });
Object.defineProperty(exports, "queryPath", { enumerable: true, get: function () { return manager_1.queryPath; } });
Object.defineProperty(exports, "queryUUID", { enumerable: true, get: function () { return manager_1.queryUUID; } });
Object.defineProperty(exports, "reimport", { enumerable: true, get: function () { return manager_1.reimport; } });
Object.defineProperty(exports, "refresh", { enumerable: true, get: function () { return manager_1.refresh; } });
let version = '';
try {
    version = require('./package.json').version;
}
catch (error) {
    version = require('../package.json').version;
}
if (!global.AssetDB) {
    global.AssetDB = module.exports;
    global.AssetDB.version = version;
}
else if (global.AssetDB.version !== version) {
    console.log(`Two different versions of AssetDB have been loaded, please check it.`);
    module.exports = global.AssetDB;
}
else {
    module.exports = global.AssetDB;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zb3VyY2UvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLFlBQVksQ0FBQzs7O0FBRWIsOENBQStEO0FBQy9ELHdDQUFtRDtBQUVuRDs7O0dBR0c7QUFDSCxTQUFnQixNQUFNLENBQUMsT0FBdUI7SUFDMUMsTUFBTSxRQUFRLEdBQUcsSUFBSSxrQkFBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3RDLE9BQU8sUUFBUSxDQUFDO0FBQ3BCLENBQUM7QUFIRCx3QkFHQztBQUVEOzs7R0FHRztBQUNILFNBQWdCLE9BQU8sQ0FBQyxPQUFpQjtJQUNyQyxNQUFNLENBQUMsSUFBSSxDQUFDLGNBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFO1FBQzlCLE9BQU8sQ0FBQyxjQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUN2QixDQUFDLENBQUMsQ0FBQztBQUNQLENBQUM7QUFKRCwwQkFJQztBQUVELG9EQUU2QjtBQUR6QixrSEFBQSxrQkFBa0IsT0FBQTtBQUd0Qiw0Q0FFeUI7QUFEckIsb0dBQUEsUUFBUSxPQUFBO0FBR1osc0NBR3NCO0FBRmxCLDhGQUFBLEtBQUssT0FBQTtBQUNMLHFHQUFBLFlBQVksT0FBQTtBQUdoQiw0Q0FFeUI7QUFEckIsbUdBQUEsT0FBTyxPQUFBO0FBR0UsUUFBQSxLQUFLLEdBQUc7SUFDakIsUUFBUSxFQUFSLGdCQUFRO0lBQ1IsU0FBUyxFQUFULGlCQUFTO0NBQ1osQ0FBQztBQUVGLDBDQVN3QjtBQVJwQiw4RkFBQSxHQUFHLE9BQUE7QUFDSCxxR0FBQSxVQUFVLE9BQUE7QUFDViwyR0FBQSxnQkFBZ0IsT0FBQTtBQUNoQixtR0FBQSxRQUFRLE9BQUE7QUFDUixvR0FBQSxTQUFTLE9BQUE7QUFDVCxvR0FBQSxTQUFTLE9BQUE7QUFDVCxtR0FBQSxRQUFRLE9BQUE7QUFDUixrR0FBQSxPQUFPLE9BQUE7QUFHWCxJQUFJLE9BQU8sR0FBRyxFQUFFLENBQUM7QUFDakIsSUFBSTtJQUNBLE9BQU8sR0FBRyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxPQUFPLENBQUM7Q0FDL0M7QUFBQyxPQUFNLEtBQUssRUFBRTtJQUNYLE9BQU8sR0FBRyxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxPQUFPLENBQUM7Q0FDaEQ7QUFJRCxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRTtJQUNqQixNQUFNLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUM7SUFDaEMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0NBQ3BDO0tBQU0sSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sS0FBSyxPQUFPLEVBQUU7SUFDM0MsT0FBTyxDQUFDLEdBQUcsQ0FBQyxzRUFBc0UsQ0FBQyxDQUFDO0lBQ3BGLE1BQU0sQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQztDQUNuQztLQUFNO0lBQ0gsTUFBTSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDO0NBQ25DIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdGlyY3QnO1xuXG5pbXBvcnQgeyBBc3NldERCT3B0aW9ucywgQXNzZXREQiwgbWFwIH0gZnJvbSAnLi9saWJzL2Fzc2V0LWRiJztcbmltcG9ydCB7IGlzU3ViUGF0aCwgbmFtZVRvSWQgfSBmcm9tICcuL2xpYnMvdXRpbHMnO1xuXG4vKipcbiAqIOWIm+W7uuS4gOS4quaWsOeahOi1hOa6kOaVsOaNruW6k1xuICogQHBhcmFtIG9wdGlvbnMgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGUob3B0aW9uczogQXNzZXREQk9wdGlvbnMpIHtcbiAgICBjb25zdCBkYXRhYmFzZSA9IG5ldyBBc3NldERCKG9wdGlvbnMpO1xuICAgIHJldHVybiBkYXRhYmFzZTtcbn1cblxuLyoqXG4gKiDlvqrnjq/mr4/kuIDkuKrmlbDmja7lupNcbiAqIEBwYXJhbSBoYW5kbGVyIFxuICovXG5leHBvcnQgZnVuY3Rpb24gZm9yRWFjaChoYW5kbGVyOiBGdW5jdGlvbikge1xuICAgIE9iamVjdC5rZXlzKG1hcCkuZm9yRWFjaCgobmFtZSkgPT4ge1xuICAgICAgICBoYW5kbGVyKG1hcFtuYW1lXSk7XG4gICAgfSk7XG59XG5cbmV4cG9ydCB7XG4gICAgc2V0RGVmYXVsdFVzZXJEYXRhLFxufSBmcm9tICcuL2xpYnMvZGVmYXVsdC1tZXRhJztcblxuZXhwb3J0IHtcbiAgICBJbXBvcnRlcixcbn0gZnJvbSAnLi9saWJzL2ltcG9ydGVyJztcblxuZXhwb3J0IHtcbiAgICBBc3NldCxcbiAgICBWaXJ0dWFsQXNzZXQsXG59IGZyb20gJy4vbGlicy9hc3NldCc7XG5cbmV4cG9ydCB7XG4gICAgQXNzZXREQixcbn0gZnJvbSAnLi9saWJzL2Fzc2V0LWRiJztcblxuZXhwb3J0IGNvbnN0IFV0aWxzID0ge1xuICAgIG5hbWVUb0lkLFxuICAgIGlzU3ViUGF0aCxcbn07XG5cbmV4cG9ydCB7XG4gICAgZ2V0LFxuICAgIHF1ZXJ5QXNzZXQsXG4gICAgcXVlcnlNaXNzaW5nSW5mbyxcbiAgICBxdWVyeVVybCxcbiAgICBxdWVyeVBhdGgsXG4gICAgcXVlcnlVVUlELFxuICAgIHJlaW1wb3J0LFxuICAgIHJlZnJlc2gsXG59IGZyb20gJy4vbGlicy9tYW5hZ2VyJztcblxubGV0IHZlcnNpb24gPSAnJztcbnRyeSB7XG4gICAgdmVyc2lvbiA9IHJlcXVpcmUoJy4vcGFja2FnZS5qc29uJykudmVyc2lvbjtcbn0gY2F0Y2goZXJyb3IpIHtcbiAgICB2ZXJzaW9uID0gcmVxdWlyZSgnLi4vcGFja2FnZS5qc29uJykudmVyc2lvbjtcbn1cblxuZGVjbGFyZSBjb25zdCBnbG9iYWw6IGFueTtcblxuaWYgKCFnbG9iYWwuQXNzZXREQikge1xuICAgIGdsb2JhbC5Bc3NldERCID0gbW9kdWxlLmV4cG9ydHM7XG4gICAgZ2xvYmFsLkFzc2V0REIudmVyc2lvbiA9IHZlcnNpb247XG59IGVsc2UgaWYgKGdsb2JhbC5Bc3NldERCLnZlcnNpb24gIT09IHZlcnNpb24pIHtcbiAgICBjb25zb2xlLmxvZyhgVHdvIGRpZmZlcmVudCB2ZXJzaW9ucyBvZiBBc3NldERCIGhhdmUgYmVlbiBsb2FkZWQsIHBsZWFzZSBjaGVjayBpdC5gKTtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGdsb2JhbC5Bc3NldERCO1xufSBlbHNlIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGdsb2JhbC5Bc3NldERCO1xufVxuIl19