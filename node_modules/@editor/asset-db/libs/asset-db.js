"use strict";var __importDefault=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.AssetDB=exports.version=exports.map=void 0;const fs_extra_1=require("fs-extra"),path_1=require("path"),events_1=require("events"),node_uuid_1=require("node-uuid"),importer_1=require("./importer"),asset_1=require("./asset"),utils_1=require("./utils"),meta_1=require("./meta"),info_1=require("./info"),task_1=require("./task"),dependency_1=require("./dependency"),data_1=require("./data"),manager_1=require("./manager"),workflow_extra_1=require("workflow-extra"),fast_glob_1=__importDefault(require("fast-glob")),console_1=require("./console");var manager_2=require("./manager");function getAsset(t){for(let e in manager_1.map){const s=manager_1.map[e].uuid2asset.get(t);if(s)return s}}Object.defineProperty(exports,"map",{enumerable:!0,get:function(){return manager_2.map}});let deprecatedFlag=!1;exports.version="2.0.0";class AssetDB extends events_1.EventEmitter{get dataManaer(){return deprecatedFlag||(console.debug("AssetDB.dataManaer is deprecated, Please use AssetDB.dataManager instead."),deprecatedFlag=!0),this.dataManager}get assetProgressInfo(){return{current:this.taskManager._execID-this.taskManager._execThread,total:this.taskManager.total(),wait:this.taskManager._waitQueue.size}}async lock(){return this._lock?await new Promise((t,e)=>{this._waitLockHandler.push(()=>{t(null)})}):this._lock=!0}unlock(){const t=this._waitLockHandler.shift();t?t():this._lock=!1}constructor(t){super(),this.flag={starting:!1,started:!1},this.path2asset=new Map,this.uuid2asset=new Map,this._lock=!1,this._waitLockHandler=[],t.target&&t.library?(t.target=(0,utils_1.absolutePath)(t.target),t.library=(0,utils_1.absolutePath)(t.library),t.temp||(t.temp=(0,path_1.join)(t.library,".temp")),t.temp=(0,utils_1.absolutePath)(t.temp)):console.error(`The database(${t.name}) cannot be created because there is no target or library definition`),(!("level"in t)||t.level>4||t.level<0)&&(t.level=4),t.ignoreFiles&&Array.isArray(t.ignoreFiles)||(t.ignoreFiles=[]),this.options=t,this.taskManager=new workflow_extra_1.ParallelQueue(async t=>{const e=await this.importerManager.find(t);if(!e||t.action!==asset_1.AssetActionEnum.delete&&e.name!==t.meta.importer&&"*"!==t.meta.importer&&t.imported)return t.init||(this.options.level>=1&&this.console.error(`Unable to import data, no suitable importer was found. {asset[${t instanceof asset_1.Asset?t.basename:""}](${t.uuid})}`),t.invalid=!0,t.init=!0),!1;switch(t.action){case asset_1.AssetActionEnum.add:case asset_1.AssetActionEnum.change:if(this.dataManager.empty(t),await task_1.TASK_MAP.import.exec(this,t,e,!0)&&await t.save(),t instanceof asset_1.Asset){const e=(0,fs_extra_1.statSync)(t.source);this.infoManager.add(t.source,e.mtimeMs,t.uuid)}(0,manager_1.importAssociatedAssets)(this,t);break;case asset_1.AssetActionEnum.delete:if(this.dataManager.empty(t),await task_1.TASK_MAP.destroy.exec(this,t),t instanceof asset_1.Asset){const e=t.source+".meta";this.metaManager.remove(e),this.infoManager.remove(t.source),this.infoManager.remove(e)}(0,manager_1.importAssociatedAssets)(this,t);break;case asset_1.AssetActionEnum.none:await task_1.TASK_MAP.import.exec(this,t,e,!1)&&await t.save()}return t.init=!0,t.action!==asset_1.AssetActionEnum.none&&this.dataManager.save(),t.action=asset_1.AssetActionEnum.none,!0},5),this.console=new console_1.CustomConsole(t.level),this.metaManager=new meta_1.MetaManager(this.console),this.infoManager=new info_1.InfoManager(this.console),this.dependencyManager=new dependency_1.DependencyManager(this.console),this.dataManager=new data_1.DataManager(this.console),this.importerManager=new importer_1.ImporterManager(this.console),this.importerManager.add(importer_1.DefaultImporter,["*"])}async start(t={}){if(!this.options.target||!this.options.library||!this.options.temp)return void(this.options.level>=1&&this.console.error(`Parameter error, unable to start asset-db(${this.options.name}) with option ${this.options}.`));if(this.flag.started&&this.options.level>=2)return void this.console.warn(`The ${this.options.name} database is already started.`);this.flag.started=!0,this.flag.starting=!0,await this.infoManager.setRecordJSON((0,path_1.join)(this.options.library,`.${this.options.name}-info.json`)),await this.dataManager.setRecordJSON((0,path_1.join)(this.options.library,`.${this.options.name}-data.json`)),await this.dependencyManager.setRecordJSON((0,path_1.join)(this.options.library,`.${this.options.name}-dependency.json`)),manager_1.map[this.options.name]=this;let e=await this.refresh(this.options.target,{ignoreSelf:!0,hooks:t.hooks});this.console.debug(`start asset-db(${this.options.name}) with asset: ${e}`);let s=!1;return await this.infoManager.forEach(async(t,e)=>{if(!this.path2asset.has(t)&&this.infoManager.get(t).uuid)try{const a=e.uuid;if(getAsset(a))return;const i=`${this.options.library}${path_1.sep}${a.substr(0,2)}`;if((0,fs_extra_1.existsSync)(i)){const t=await(0,fs_extra_1.readdir)(i);for(let e of t)e.startsWith(a)&&await(0,fs_extra_1.remove)((0,path_1.join)(i,e))}this.infoManager.remove(t),s=!0}catch(t){this.console.warn(t)}}),s&&this.infoManager.save(),new Promise(s=>{const a=()=>{setTimeout(async()=>{if(!this.taskManager.busy()){if(this.flag.starting=!1,t.hooks&&t.hooks.afterStart)try{await t.hooks.afterStart()}catch(t){this.console.error(t)}return s(e)}this.taskManager.waitQueue().then(()=>{a()})},10)};a()})}async stop(){this.uuid2asset.clear(),this.path2asset.clear(),this.flag.started=!1,this.infoManager.saveImmediate(),this.dependencyManager.saveImmediate(),this.dataManager.saveImmediate(),this.metaManager.destroy(),this.infoManager.destroy(),this.dependencyManager.destroy(),manager_1.map[this.options.name]===this&&delete manager_1.map[this.options.name]}pathToUuid(t){let e=this.path2asset.get(t);return e?e.uuid:null}uuidToPath(t){let e=this.uuid2asset.get(t);return e?e.source:null}getAsset(t){if(!t||"string"!=typeof t)return null;let e=t.split("@"),s=e.shift()||"",a=this.uuid2asset.get(s);if(!a)return null;for(let t=0;t<e.length;t++){let s=e[t];if(!(a=a.subAssets[s]))return null}return a||null}async reimport(t){const e=this.path2asset.get(t)||this.getAsset(t);if(!e)return!0;if(this.options.flags&&this.options.flags.reimportCheck&&!e._lock&&e.action!==asset_1.AssetActionEnum.none)return!0;if(await this.lock(),e instanceof asset_1.Asset){this.metaManager.read(e.source+".meta");const t=e.meta.importer;e.meta.importer="*";const s=await this.importerManager.find(e);if(!s)throw new Error(`Unable to import data, no suitable importer was found.\n  path: ${e.source}\n  uuid: ${e.uuid}`);t===s.name&&(e.meta.importer=s.name)}try{if(!e.init)return this.unlock(),!1;e.init=!1,e.action=asset_1.AssetActionEnum.change,e.task=this.taskManager.addTask(e)}catch(t){this.console.error(t)}this.unlock(),await this.taskManager.waitQueue()}async refresh(t,e={}){if(!(0,utils_1.absolutePath)(t))return 0;(t=(0,path_1.normalize)(t))===this.options.target&&(e.ignoreSelf=!0);let s=(0,path_1.dirname)(t);for(;(0,utils_1.isSubPath)(s,this.options.target)&&!this.path2asset.has(s);)t=s,s=(0,path_1.dirname)(s);if(!(0,utils_1.isSubPath)(t,this.options.target)&&t!==this.options.target)return 0;let a=[];if((0,fs_extra_1.existsSync)(t))try{if((0,fs_extra_1.statSync)(t).isFile())a=[t];else{const s="win32"===process.platform?t.replace(/\\/g,"/"):t,i=e.globList||["**/*","!**/*.meta"];this.options.ignoreGlob&&i.push(this.options.ignoreGlob),(a=fast_glob_1.default.sync(i,{onlyFiles:!1,cwd:s})).forEach((t,e)=>{a[e]=(0,path_1.join)(s,t)}),t!==this.options.target&&a.splice(0,0,t)}}catch(t){this.console.error(t),a=[]}if(e.hooks&&e.hooks.afterScan)try{await e.hooks.afterScan(a)}catch(t){this.console.error(t)}const i=new Set,r=new Set,n=new Set;try{const s=[],o=[],h=[];if(this.preImporterHandler)for(let t of a)this.path2asset.has(t)||(this.preImporterHandler(t)?s.push(t):o.push(t),n.add(t)),i.add(t);else for(let t of a)this.path2asset.has(t)||(o.push(t),n.add(t)),i.add(t);if(this.path2asset.forEach((e,s)=>{0!==a.length&&i.has(s)||(s===t||(0,utils_1.isSubPath)(s,t))&&(h.push(s),r.add(s))}),this.taskManager.stop(),this._checkAssetsStatSync(s,h,r),e.hooks&&e.hooks.afterPreImport)try{await e.hooks.afterPreImport()}catch(t){this.console.error(t)}this._checkAssetsStatSync(o,h,r),this.emit("refresh-uuid-ready",t),await this.lock();const u=[];for(let t of a)if(!n.has(t)&&!r.has(t)){const e=this.path2asset.get(t);e&&u.push(this._checkAssetStat(e))}(await Promise.allSettled(u)).forEach(t=>{"rejected"===t.status&&console.error(t.reason)})}catch(t){return this.console.error(t),this.unlock(),0}if(e.hooks&&e.hooks.afterGenerateMete)try{await e.hooks.afterGenerateMete()}catch(t){this.console.error(t)}this.taskManager.start();try{await this.taskManager.waitQueue()}catch(t){this.console.error(t)}this.unlock();const o=this.taskManager.total();if(this.taskManager.clear(),e.hooks&&e.hooks.afterRefresh)try{await e.hooks.afterRefresh()}catch(t){this.console.error(t)}return o}_replaceUUID(t,e){if(e!==t){if(t.source===e.source)return void console.trace(`_replaceUUID invalid in asset ${t.source}`);const s=(0,node_uuid_1.v4)();if(this.options.level>=2){let a=JSON.stringify([t.source,e.source],null,2);this.console.warn(`The uuid is already pointing to another resource.\n${a}\nThe file uuid has been updated: ${t.source}\n    ${t.uuid} -> ${s}`)}t.meta.uuid=s}}_checkAssetsStatSync(t,e,s){for(let t of e){const e=this.path2asset.get(t);if(e){e.action=asset_1.AssetActionEnum.delete,e.task=this.taskManager.addTask(e),this.uuid2asset.delete(e.uuid),this.path2asset.delete(e.source);const t=e.source+".meta";this.metaManager.remove(t),this.infoManager.remove(e.source),this.infoManager.remove(t)}}for(let e of t){const t=e+".meta",a=this.metaManager.get(t),i=getAsset(a.json.uuid);if(i)if(s.has(i.source)||i.source!==e&&!(0,fs_extra_1.existsSync)(i.source)){const t=i;this.path2asset.delete(t.source),this.infoManager.remove(t.source),this.metaManager.remove(t.source+".meta"),this.infoManager.remove(t.source+".meta"),t._source=e,t.extname=(0,path_1.extname)(e).toLowerCase(),t.basename=(0,path_1.basename)(e,t.extname),t.updateUrl(),t.meta=a.json,this.path2asset.set(t.source,t),t.action=asset_1.AssetActionEnum.change,t.task=this.taskManager.addTask(t)}else{const t=new asset_1.Asset(e,a.json,this);this._replaceUUID(t,i),t.save(),t.action=asset_1.AssetActionEnum.add,t.task=this.taskManager.addTask(t),this.uuid2asset.set(t.uuid,t),this.path2asset.set(t.source,t)}else if(this.flag.starting){const s=(0,fs_extra_1.statSync)(e),i=new asset_1.Asset(e,a.json,this);if(this.infoManager.compare(e,s.mtimeMs)){const e=(0,fs_extra_1.statSync)(t);if(this.infoManager.compare(t,e.mtimeMs))this.dataManager.has(i)?(i.action=asset_1.AssetActionEnum.none,i.task=this.taskManager.addTask(i)):(i.action=asset_1.AssetActionEnum.change,i.task=this.taskManager.addTask(i));else{this.emit("delete",i),this.emit("deleted",i),i.action=asset_1.AssetActionEnum.add;const s=i.uuid;this.metaManager.read(t),i.uuid!==s&&(this.uuid2asset.delete(s),this.uuid2asset.has(i.uuid)&&this._replaceUUID(i,getAsset(i.uuid)),this.uuid2asset.set(i.uuid,i)),this.infoManager.add(t,e.mtimeMs),i.task=this.taskManager.addTask(i)}}else i.action=asset_1.AssetActionEnum.add,this.infoManager.add(e,s.mtimeMs),i.task=this.taskManager.addTask(i);this.uuid2asset.set(i.uuid,i),this.path2asset.set(i.source,i)}else{const s=getAsset(a.json.uuid),i=new asset_1.Asset(e,a.json,this);s&&(this._replaceUUID(i,s),i.save());const r=(0,fs_extra_1.statSync)(t);if(this.infoManager.get(t)||this.infoManager.add(t,r.mtimeMs),this.infoManager.compare(t,r.mtimeMs))i.action=asset_1.AssetActionEnum.add,i.task=this.taskManager.addTask(i),this.uuid2asset.set(i.uuid,i),this.path2asset.set(i.source,i);else{this.emit("delete",i),this.emit("deleted",i),i.action=asset_1.AssetActionEnum.add;const e=i.uuid;this.metaManager.read(t),i.uuid!==e&&this.uuid2asset.delete(e),this.infoManager.add(t,r.mtimeMs),i.task=this.taskManager.addTask(i),this.uuid2asset.set(i.uuid,i),this.path2asset.set(i.source,i)}}}}async _checkAssetStat(t){const e=t.source,s=e+".meta";(0,fs_extra_1.existsSync)(s)||(console.error(`${s} is not exist! will use cache meta.`),t.save());const a=await(0,fs_extra_1.stat)(s);if(await this.infoManager.compare(s,a.mtimeMs)){const s=await(0,fs_extra_1.stat)(e);this.infoManager.compare(e,s.mtimeMs)?this.dataManager.has(t)?(t.action=asset_1.AssetActionEnum.none,t.task=this.taskManager.addTask(t)):(t.action=asset_1.AssetActionEnum.change,t.task=this.taskManager.addTask(t)):(this.infoManager.add(e,s.mtimeMs,t.uuid),t.action=asset_1.AssetActionEnum.change,t.task=this.taskManager.addTask(t))}else{this.emit("delete",t),this.emit("deleted",t),t.action=asset_1.AssetActionEnum.add;const e=t.uuid;this.metaManager.read(s),t.uuid!==e&&(this.uuid2asset.delete(e),this.uuid2asset.has(t.uuid)&&this._replaceUUID(t,getAsset(t.uuid)),this.uuid2asset.set(t.uuid,t)),this.infoManager.add(s,a.mtimeMs),t.task=this.taskManager.addTask(t)}}}exports.AssetDB=AssetDB;