
import "@editor/systemjs/dist/system";
import "@editor/systemjs/dist/extras/named-register"

const urlMappings: Record<string, string> = {};
const vendorInstantiate = System.constructor.prototype.instantiate;
System.constructor.prototype.instantiate = function(url: string, firstParentUrl?: string) {
    const realUrl = (url in urlMappings) ? urlMappings[url] : url;
    return vendorInstantiate.call(this, realUrl, firstParentUrl);
};

/**
 * Import a module.
 * @param name 
 */
export function imp(name: string): Promise<any> {
    return System.import(name);
}

/**
 * Delete a module.
 * @param name 
 */
export function del(name: string) {
    return System.delete(name);
}

/**
 * The "type" property of the HTML script element which is treated as an import map.
 */
export const importMapType: string = 'systemjs-importmap';

/**
 * Set the mapping of the specified url to another url.
 * Note, this function is for private use only.
 * @param url 
 * @param mapped 
 */
export function _setUrlMapping(url: string, mapped: string) {
    urlMappings[url] = mapped;
}

/**
 * Delete the mapping of the specified url.
 * Note, this function is for private use only.
 * @param url 
 */
export function _deleteUrlMapping(url: string) {
    delete urlMappings[url];
}

/**
 * Register a module who forward all exports from a commonjs module.
 * Note, this function is for private use only.
 * @param aliasUrl The url the result module having.
 * @param requirer The requirer is called to provide the commonjs module.
 */
export function _forwardCommonJsModule(aliasUrl: string, requirer: () => any) {
    System.register(aliasUrl, [], function (_export, _context) {
        return {
            setters: [],
            execute () {
                const cjsm = requirer();
                _export(cjsm);
            },
        };
    });
}