'use strict';

const { join } = require('path');

const name2module = {};

if (!window.__hasBindErrorHandler__) {
    window.__hasBindErrorHandler__ = true;
    window.addEventListener('error', (errorEvent) => {
        console.error(errorEvent.error || errorEvent.message || errorEvent);
        return true;
    });
}

/**
 * 将插件内定义的 windows 模块附加在当前窗口上
 * @param {*} data 
 */
async function attach(data) {

    // 兼容老插件
    // 经过这步过滤后，实际只剩 [ ui-kit, ipc, tester ] 三个插件
    if (data.enable && data.info.windows) {
        // 如果已经加载完成，不需要重复加载
        if (name2module[data.name]) {
            return;
        }

        try {
            name2module[data.name] = require(join(data.path, data.info.windows));
            await name2module[data.name].load();
        } catch (error) {
            console.error(`Extension(${data.info.name}) execution error: [windows].load code failed to execute.`);
            console.error(error);
            // 加载失败的话删除缓存
            name2module[data.name] = null;
        }
    }

    if (data.enable && data.info.creator && data.info.creator.hooks && data.info.creator.hooks.window) { 
        // 如果已经加载完成，不需要重复加载
        if (name2module[data.name]) {
            return;
        }

        try {
            name2module[data.name] = require(join(data.path, data.info.creator.hooks.window));
            await name2module[data.name].load();
        } catch (error) {
            console.error(`Extension(${data.info.name}) execution error: [windows].load code failed to execute.`);
            console.error(error);
            // 加载失败的话删除缓存
            name2module[data.name] = null;
        }
    }
}

/**
 * 将插件内定义的 windows 模块从当前窗口移除
 * @param {*} data 
 */
async function detach(data) {
    // 没加载过不需要删除
    if (!name2module[data.name]) {
        return;
    }

    try {
        const mod = name2module[data.name];
        await mod.unload();
    } catch (error) {
        console.error(`Extension(${data.info.name}) execution error: [windows].unload code failed to execute.`);
        console.error(error);
    } finally {
        delete name2module[data.name];
    }
}

// 启动已打开的插件，监听插件系统
const packages = Editor.Package.getPackages({
    enable: true,
});
packages.forEach((info) => {
    attach(info);
});
Editor.Package.on('enable', attach);
Editor.Package.on('disable', detach);

