'use strict';

const ipc = require('@base/electron-base-ipc');

const wins = require('@base/electron-windows');
const { basename } = require('path');
const $panel = document.getElementById('panel');
$panel.setAttribute('name', wins.userData.panel);
const panel = require('@editor/panel');
window.__MAIN__ = false;

// 首先初始化任务管理器
// require('../../../../task');

// 初始化插件注册到每个窗口的代码
require('../public/windows');

require('../public/polyfill');

const ENV = Editor.Startup.__protected__._builtinJSON.env || {};
if (ENV.WINDOW_STYLE) {
    try {
        const $link = document.createElement('link');
        $link.setAttribute('href', ENV.WINDOW_STYLE);
        $link.setAttribute('rel', 'stylesheet')
        document.head.appendChild($link);
    } catch(error) {
        console.warn(error);
    }
}

Editor.Task.sync();

// mac 上右键点击不会传递焦点
if (process.platform === 'darwin') {
    document.addEventListener('mousedown', (event) => {
        if (event.button === 2 && !document.hasFocus()) {
            ipc.send('editor-lib-windows:focus');
        }
    }, true);
}

const projectName = basename(Editor.Project.name);
document.title = projectName;
let panelName = '';

function _queryPanelTitle(name) {
    const info = panel.queryInfo(name);
    if (info && info.userData) {
        try {
            if (typeof info.userData.title === 'string') {
                return Editor.I18n.t(info.userData.title.replace('i18n:', '')) || info.userData.title || name;
            }
        } catch(error) {}
    }
    return name;
}

panel.on('connected', (name, pid) => {
    if (pid !== process.pid || panelName) {
        return;
    }
    panelName = name;
    name = _queryPanelTitle(name);
    document.title = `${name} - ${projectName}`;
});

panel.on('focus', (name, pid) => {
    if (pid !== process.pid || name === panelName) {
        return;
    }
    panelName = name;
    name = _queryPanelTitle(name);
    document.title = `${name} - ${projectName}`;
});