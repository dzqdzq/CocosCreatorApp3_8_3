'use strict';

const I18n = require('@base/electron-i18n');
const ipc = require('@base/electron-base-ipc');

const Menu = {
    $el: null,
    menus: {},
    $items: [],
    padding: 6,
    enableHoverShow: false,
    init() {
        this.$el = document.getElementById('menu');

        I18n.on('switch', () => {
            this.update();
        })
    },
    async update() {
        const menus = await Editor.Menu.queryMain();
        if (!menus) {
            return;
        }

        this.menus = this.convert(menus);
        this.$items.length = 0;

        for (let key in this.menus) {
            const menu = this.menus[key];
            const $item = document.createElement('ui-label');
            $item.value = key;
            $item.setAttribute('class', 'item');
            $item.setAttribute('tabindex', this.$items.length);
            this.$items.push($item);

            $item.addEventListener('click', () => {
                if (menu.submenu) {
                    if (!$item.$popup) {
                        $item.$popup = this.popup(menu.submenu, $item, 'bottom');
                        Menu.enableHoverShow = true;
                    } else {
                        $item.$popup.hide();
                        Menu.enableHoverShow = false;
                    }
                } else {
                    this.click(menu.mainPath);
                }
            });

            $item.addEventListener('blur', () => {
                Menu.hide();
            });

            $item.addEventListener('mouseenter', () => {
                if (Menu.enableHoverShow) {
                    if (!$item.$popup) {
                        $item.$popup = this.popup(menu.submenu, $item, 'bottom');
                    } else {
                        $item.$popup.cancelHide();
                    }
                }
            });
            $item.addEventListener('mouseleave', () => {
                if ($item.$popup) {
                    $item.$popup.delayHide();
                }
            });
        }

        this.$el.replaceChildren(...this.$items);
        requestAnimationFrame(()=>{
            More.resize();
        });
    },
    hide() {
        Menu.enableHoverShow = false;
        this.$items.forEach($item => {
            if ($item.$popup) {
                $item.$popup.delayHide();
            }
        });
        More.hide();
    },
    convert(menus, path) {
        for (const key in menus) {
            const menu = menus[key];

            // 调用主进程 Editor.Menu.clickMain 指令的入参
            if (path) {
                menu.mainPath = `${path}/${key}`;
            } else {
                menu.mainPath = key;
            }

            if (menu.submenu) {
                menu.submenu = this.convert(menu.submenu, menu.mainPath);
            }
        }

        return menus;
    },
    click(mainPath) {
        Editor.Menu.clickMain(mainPath);
    },
    popup(menus, $handle, direction) {
        if ($handle.parentElement) {
            Array.from($handle.parentElement.children).forEach($item => {
                if ($item !== $handle && $item.$popup) {
                    $item.$popup.hide();
                }
            });
        }

        const $popup = document.createElement('div');
        $popup.setAttribute('class', 'win32-menu-popup');

        const $menus = [];
        for (const key in menus) {
            const menu = menus[key];
            // 容错处理，上一个是 'separator' 这个就跳过
            if (menu.visible === false) {
                continue;
            } else if (menu.type === 'separator') {
                const lastIndex = menus.length - 1;
                if (lastIndex >= 0 && menus[lastIndex].type === 'separator') {
                    continue;
                }

                const $line = document.createElement('div');
                $line.setAttribute('class', 'line');
                $menus.push($line);
                continue;
            } else if (menu.type === 'submenu') {
                const $item = document.createElement('div');
                $item.setAttribute('class', 'item');
                const $label = document.createElement('ui-label');
                $label.setAttribute('class', 'name');
                $label.setAttribute('value', menu.label);
                $item.appendChild($label);

                const $icon = document.createElement('ui-icon');
                $icon.setAttribute('class', 'icon');
                $icon.setAttribute('value', 'arrow-right');
                $item.appendChild($icon);
                $menus.push($item);

                $item.addEventListener('mouseenter', () => {
                    $item.$popup = this.popup(menu.submenu, $item, 'right');
                    $item.$popup.$parentPopup = $popup;
                });
                $item.addEventListener('mouseleave', () => {
                    if ($item.$popup) {
                        $item.$popup.delayHide();
                    }
                });

            } else if (menu.type === 'normal') {
                const $item = document.createElement('div');
                $item.setAttribute('class', 'item');
                $item.setAttribute('enabled', !!menu.enabled);

                const $label = document.createElement('ui-label');
                $label.setAttribute('class', 'name');
                $label.setAttribute('value', menu.label);
                $item.appendChild($label);

                if (menu.accelerator) {
                    const $accelerator = document.createElement('ui-label');
                    $accelerator.setAttribute('class', 'accelerator');
                    $accelerator.setAttribute('value', menu.accelerator.toUpperCase());
                    $item.appendChild($accelerator);
                }

                $item.addEventListener('mousedown', () => {
                    this.click(menu.mainPath);
                });

                $item.addEventListener('mouseleave', () => {
                    if ($item.parentElement) {
                        Array.from($item.parentElement.children).forEach($child => {
                            if ($item !== $child && $child.$popup) {
                                $child.$popup.hide();
                            }
                        });
                    }
                });
                $menus.push($item);
            }
        }
        $popup.replaceChildren(...$menus);
        document.body.appendChild($popup);
        $handle.setAttribute('active', '');

        this.popupPosition($popup, $handle, direction);
        this.popupEvents($popup, $handle);

        return $popup;
    },
    popupPosition($popup, $handle, direction) {
        const popupRect = $popup.getBoundingClientRect();
        const handleRect = $handle.getBoundingClientRect();

        const maxWidth = document.body.clientWidth;
        const maxHeight = document.body.clientHeight;

        const padding = Menu.padding * 2;

        let left = handleRect.x;
        let top = handleRect.y + handleRect.height;

        if (direction === 'bottom') {
            left = handleRect.x;
            top = handleRect.y + handleRect.height + Menu.padding;
        }

        if (direction === 'right') {
            left = handleRect.x + handleRect.width - Menu.padding;
            top = handleRect.y - Menu.padding;
        }

        if (maxHeight - top - popupRect.height < padding) {
            top -= top + popupRect.height - maxHeight + padding;
        }

        if (maxWidth - left - popupRect.width < padding) {
            left -= left + popupRect.width - maxWidth + padding;
        }

        if (left <= 0) {
            left = Menu.padding;
        }

        if (top <= 0) {
            top = Menu.padding;
        }

        $popup.style.top = `${top}px`;
        $popup.style.left = `${left}px`;
        $popup.style['animation-name'] = `fade-in-${direction}`;
    },
    popupEvents($popup, $handle) {
        $popup.$handle = $handle;

        $popup.hide = this.popupHide.bind($popup);
        $popup.delayHide = this.popupDelayHide.bind($popup);
        $popup.cancelHide = this.popupCancelHide.bind($popup);

        $popup.addEventListener('mouseenter', () => {
            $popup.cancelHide();
        });

        $popup.addEventListener('mouseleave', () => {
            $popup.delayHide();
        });
    },
    popupCancelHide() {
        clearTimeout(this.hideTimeId);
        if (this.$parentPopup) {
            this.$parentPopup.cancelHide();
        }
    },
    popupHide() {
        Array.from(this.children).forEach($item => {
            if ($item.$popup) {
                $item.$popup.hide();
            }
        });
        clearTimeout(this.hideTimeId);
        this.hide = undefined;
        this.delayHide = undefined;
        this.$handle.removeAttribute('active');
        this.$handle.$popup = undefined;
        this.$handle = undefined;
        this.remove();
    },
    popupDelayHide() {
        clearTimeout(this.hideTimeId);
        this.hideTimeId = setTimeout(() => {
            this.hide && this.hide();
        }, 100);
    }
};

const More = {
    $el: null,
    $icon: null,
    $popup: null,
    isShow: false,
    init() {
        this.$el = document.createElement('div');
        this.$el.setAttribute('class', 'more');

        this.$icon = document.createElement('ui-icon');
        this.$icon.setAttribute('tabindex', -1);
        this.$icon.setAttribute('value', 'collapse-right');
        this.$el.appendChild(this.$icon);

        this.$icon.addEventListener('click', this.click.bind(this));
        this.$icon.addEventListener('blur', this.blur.bind(this));
        this.$icon.addEventListener('mouseenter', this.mouseenter.bind(this));
        this.$icon.addEventListener('mouseleave', this.mouseleave.bind(this));

        const resizeObserver = new window.ResizeObserver(() => {
            More.resize();
        });
        resizeObserver.observe(Menu.$el);

        this.$popup = document.createElement('div');
        this.$popup.setAttribute('class', 'win32-menu-popup');
        this.$popup.addEventListener('mouseenter', () => {
            this.cancelHide();
        });
        this.$popup.addEventListener('mouseleave', () => {
            this.delayHide();
        });
    },
    click() {
        if (!this.isShow) {
            this.show();
            Menu.enableHoverShow = true;
        } else {
            this.hide();
            Menu.enableHoverShow = false;
        }
    },
    blur() {
        if (this.isShow) {
            this.delayHide();
        }
        Menu.enableHoverShow = false;
    },
    mouseenter() {
        if (Menu.enableHoverShow && !this.isShow) {
            this.show();
        }
    },
    mouseleave() {
        if (Menu.enableHoverShow && this.isShow) {
            this.delayHide();
        }
    },
    resize() {
        const { $el } = this;
        const { $el: $menu, $items } = Menu;

        const { clientWidth, scrollWidth } = $menu;

        if (clientWidth >= scrollWidth) {
            if ($el.parentElement === $menu) {
                $el.remove();
            }
            return;
        }

        for (const $item of $items) {
            const { offsetLeft, offsetWidth } = $item;
            if (offsetLeft + offsetWidth + Menu.padding * 3 > clientWidth) {
                $menu.appendChild($el);
                $el.style.width = `${clientWidth - offsetLeft}px`;
                break;
            }
        }
    },
    show() {
        const { $el, $popup } = this;
        const { $el: $menu, $items } = Menu;

        const { clientWidth, scrollWidth } = $menu;

        if (clientWidth >= scrollWidth) {
            return;
        }

        const $cloneItems = [];
        for (const $item of $items) {
            const { offsetLeft, offsetWidth } = $item;
            if (offsetLeft + offsetWidth + Menu.padding * 3 > clientWidth) {
                const $clone = $item.cloneNode(true);
                const key = $clone.value;
                const menu = Menu.menus[key];

                if(menu.submenu){
                    $clone.addEventListener('mouseenter', () => {
                        this.cancelHide();
    
                        if (!$clone.$popup) {
                            $clone.$popup = Menu.popup(menu.submenu, $clone, 'right');
    
                            $clone.$popup.addEventListener('mouseenter', () => {
                                this.cancelHide();
                            });
                        } else {
                            $clone.$popup.cancelHide();
                        }
                    });
                    $clone.addEventListener('mouseleave', () => {
                        if ($clone.$popup) {
                            $clone.$popup.delayHide();
                        }
                    });
                }else{
                    $clone.addEventListener('click', () => {
                        Menu.click(menu.mainPath);
                    });
                }

                $cloneItems.push($clone);
            }
        }

        $popup.replaceChildren(...$cloneItems);
        document.body.appendChild($popup);
        let left = $el.offsetLeft - Menu.padding * 2;
        left = left < 0 ? Menu.padding : left;
        $popup.style.left = `${left}px`;

        this.isShow = true;
    },
    hide() {
        const { $popup } = this;

        Array.from($popup.children).forEach($item => {
            if ($item.$popup) {
                $item.$popup.hide();
            }
        });

        $popup.remove();

        this.isShow = false;
    },
    delayHide() {
        clearTimeout(this.hideTimeId);
        this.hideTimeId = setTimeout(() => {
            this.hide();
        }, 50);
    },
    cancelHide() {
        clearTimeout(this.hideTimeId);
    },
}

exports.init = function init() {
    Menu.init();
    More.init();

    exports.update();
}

let timeId;
exports.update = function update() {
    clearTimeout(timeId);
    timeId = setTimeout(() => {
        Menu.update();
    }, 1000);
}

ipc.on('editor-menu-lib:apply', () => {
    Menu.update();
});
