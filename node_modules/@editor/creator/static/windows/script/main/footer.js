'use strict';

const Vue = require('vue/dist/vue');
const { Package } = require('../../../../package');

Vue.config.productionTip = false;
Vue.config.devtools = false;

const { join } = require('path');

// TODO 目前自由注册方式依赖了插件顺序，会和产品设计出现差异，需要考虑新的机制
// 产品需求参考 https://github.com/cocos/3d-tasks/issues/16354
const footerRightPackageOrder = ['engine', 'utils', 'console', 'programming'];
let vm;
exports.init = function() {
    vm = new Vue({
        el: document.getElementById('footer'),
    
        data: {
            left: [],
            right: [],
        },
    
        methods: {
            attach(data) {
                if (!data.enable || !data.info.contributions || !data.info.contributions.footer) {
                    return;
                }
    
                let footers = data.info.contributions.footer;
                if (footers.left) {
                    const exists = this.left.some((item) => {
                        return item.name === data.info.name;
                    });
                    if (!exists) {
                        const path = join(data.path, footers.left);
                        this.left.push({
                            name: data.info.name,
                            path,
                        });
                    }
                }
                if (footers.right) {
                    const exists = this.right.some((item) => {
                        return item.name === data.info.name;
                    });
                    if (!exists) {
                        const path = join(data.path, footers.right);
                        this.right.push({
                            name: data.info.name,
                            path,
                        });
                        // TODO 最好是在全部插件加载完毕后再排序，但是目前没有找到合适的钩子函数
                        this.right.sort((a, b) => {
                            return footerRightPackageOrder.indexOf(a.name) - footerRightPackageOrder.indexOf(b.name);
                        });
                    }
                }
            },
    
            detach(data) {
                if (!data.info.contributions || !data.info.contributions.footer) {
                    return;
                }
    
                let footers = data.info.contributions.footer;
                if (footers.left) {
                    this.left.some((item, index) => {
                        if (item.name === data.info.name) {
                            Editor.Module.removeCache(item.path);
                            this.left.splice(index, 1);
                            return true;
                        }
                    });
                }
                if (footers.right) {
                    this.right.some((item, index) => {
                        if (item.name === data.info.name) {
                            Editor.Module.removeCache(item.path);
                            this.right.splice(index, 1);
                            return true;
                        }
                    });
                }
            },
        },
    
        mounted() {
            this.version = Editor.App.version;
            // requestAnimationFrame(() => {
            //     let list = Package.getPackages();
            //     list.forEach(this.attach);
    
            //     Package.on('enable', this.attach);
            //     Package.on('disable', this.detach);
            // });
        },
    });
    
}

exports.attach = function(pkg) {
    try {
        vm.attach(pkg);
    } catch(error) {
        console.error(error);
    }
}

exports.detach = function(pkg) {
    try {
        vm.detach(pkg);
    } catch(error) {
        console.error(error);
    }
}

exports.showCustomFooter = function(src) {
    document.getElementById('footer').setAttribute('hidden', '');
    const custom = document.querySelector('#custom-footer');
    custom.removeAttribute('hidden');

    const customPanel = document.querySelector('#custom-footer ui-panel');
    customPanel.setAttribute('src', src);
}
