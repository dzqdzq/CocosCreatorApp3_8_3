'use strict';

window.__MAIN__ = true;

const { join } = require('path');
const { readJSONSync, existsSync } = require('fs-extra');

const ipc = require('@base/electron-base-ipc');

const timer = setTimeout(_startup, 1000);

async function _startup() {
    clearTimeout(timer);
    window.removeEventListener('resize', _startup);
    document.title = `Cocos Creator ${Editor.App.version}`;

    // 监听修改 title 的 ipc 消息
    Editor.Message.addBroadcastListener('editor-title-change', (title) => {
        document.title = title;
    });

    const ENV = Editor.Startup.__protected__._builtinJSON.env || {};
    if (ENV.WINDOW_STYLE) {
        try {
            const $link = document.createElement('link');
            $link.setAttribute('href', ENV.WINDOW_STYLE);
            $link.setAttribute('rel', 'stylesheet')
            document.head.appendChild($link);
        } catch (error) {
            console.warn(error);
        }
    }

    function initLayout() {
        Editor.Startup.__protected__.removeListener('package-scanned-ready', initLayout);
        Editor.Startup.__protected__.removeListener('package-ready', initLayout);

        // 初始化底部工具栏
        const footer = require('./footer');
        footer.init();

        // 模拟菜单
        if (process.platform === 'win32') {
            const menu = require('./menu');
            menu.init();
        }

        // 初始化插件注册到每个窗口的代码
        require('../public/windows');

        require('../public/polyfill');

        // 同步任务列表
        Editor.Task.sync();

        Editor.Package.on('enable', (pkg) => {
            topbar.attach(pkg);
            footer.attach(pkg);
        });
        Editor.Package.on('disable', (pkg) => {
            topbar.detach(pkg);
            footer.detach(pkg);
        });

        const list = Editor.Package.getPackages();
        list.forEach((pkg) => {
            if (pkg.enable) {
                try {
                    topbar.attach(pkg);
                } catch (error) {
                    console.warn(error);
                }
                try {
                    footer.attach(pkg);
                } catch (error) {
                    console.warn(error);
                }
            }
        });

        if (Editor.Startup.__protected__.ready.package) {
            startupCustom(topbar, footer);
        } else {
            Editor.Startup.__protected__.on('package-ready', () => {
                startupCustom(topbar, footer);
            });
        }
    }

    // 初始化顶部工具条
    const topbar = require('./topbar');
    topbar.init();

    // 初始化布局系统
    const ready = Editor.Startup.__protected__.ready;
    if (ready.package) {
        initLayout();
    } else {
        Editor.Startup.__protected__.on('package-scanned-ready', initLayout);
        Editor.Startup.__protected__.on('package-ready', initLayout);
    }
}

function startupCustom(topbar, footer) {
    const list = Editor.Package.getPackages();

    const ENV = Editor.Startup.__protected__._builtinJSON.env || {};

    let layoutInited = false;
    let mainCustomHeader = ENV.MAIN_WINDOW_CUSTOM_HEADER;
    let mainOriginHeader = ENV.MAIN_WINDOW_ORIGIN_HEADER;
    let mainFooter = ENV.MAIN_WINDOW_FOOTER;
    let style = ENV.WINDOW_STYLE;

    list.forEach((pkg) => {
        if (pkg.info && pkg.info.creator && pkg.info.creator.replaceGlobal) {
            const replaceGlobal = pkg.info.creator.replaceGlobal;
            if (replaceGlobal.layout) {
                try {
                    Editor.Layout.init(readJSONSync(join(pkg.path, replaceGlobal.layout)));
                    layoutInited = true;
                } catch (error) {
                    console.warn(error);
                }
            }
            if (replaceGlobal.header) {
                try {
                    mainCustomHeader = join(pkg.path, replaceGlobal.header);
                } catch (error) {
                    console.warn(error);
                }
            }
            if (replaceGlobal.footer) {
                try {
                    mainFooter = join(pkg.path, replaceGlobal.footer);
                } catch (error) {
                    console.warn(error);
                }
            }
            if (replaceGlobal.style) {
                try {
                    style = join(pkg.path, replaceGlobal.style);
                } catch (error) {
                    console.warn(error);
                }
            }
        }
    });

    if (layoutInited === false) {
        try {
            if (ENV.LAYOUT && existsSync(ENV.LAYOUT)) {
                Editor.Layout.init(readJSONSync(ENV.LAYOUT));
            } else {
                Editor.Layout.init();
            }
        } catch (error) {
            console.warn(error);
            Editor.Layout.init();
        }
    }

    if (mainCustomHeader) {
        try {
            topbar.showCustomHeader(mainCustomHeader);
        } catch (error) {
            console.warn(error);
        }
    }

    if (mainOriginHeader) {
        try {
            topbar.changeOriginHeader(mainOriginHeader);
        } catch (error) {
            console.warn(error);
        }
    }

    if (mainFooter) {
        try {
            footer.showCustomFooter(mainFooter);
        } catch (error) {
            console.warn(error);
        }
    }

    if (style) {
        try {
            const $link = document.createElement('link');
            $link.setAttribute('href', style);
            $link.setAttribute('rel', 'stylesheet')
            document.head.appendChild($link);
        } catch (error) {
            console.warn(error);
        }
    }
}

window.addEventListener('resize', _startup);

// mac 上右键点击不会传递焦点
if (process.platform === 'darwin') {
    document.addEventListener('mousedown', (event) => {
        if (event.button === 2 && !document.hasFocus()) {
            ipc.send('editor-lib-windows:focus');
        }
    }, true);
}
