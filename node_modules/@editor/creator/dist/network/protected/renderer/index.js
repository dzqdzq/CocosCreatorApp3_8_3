"use strict";var __awaiter=this&&this.__awaiter||function(t,e,r,o){return new(r||(r=Promise))(function(n,i){function s(t){try{u(o.next(t))}catch(t){i(t)}}function c(t){try{u(o.throw(t))}catch(t){i(t)}}function u(t){var e;t.done?n(t.value):(e=t.value,e instanceof r?e:new r(function(t){t(e)})).then(s,c)}u((o=o.apply(t,e||[])).next())})};Object.defineProperty(exports,"__esModule",{value:!0}),exports.post=exports.get=exports.testHost=exports.getFreePort=exports.portIsOccupied=exports.testConnectServer=exports.queryIPList=void 0;const ipc=require("@base/electron-base-ipc");function queryIPList(){return ipc.sendSync("editor-lib-network:call","queryIPList")}function testConnectServer(){return __awaiter(this,void 0,void 0,function*(){return ipc.sendSync("editor-lib-network:call","testConnectServer")})}function portIsOccupied(t){return __awaiter(this,void 0,void 0,function*(){return ipc.sendSync("editor-lib-network:call","portIsOccupied",t)})}function getFreePort(t){return __awaiter(this,void 0,void 0,function*(){return ipc.sendSync("editor-lib-network:call","getFreePort",t)})}function testHost(t){return __awaiter(this,void 0,void 0,function*(){return ipc.sendSync("editor-lib-network:call","testHost",t)})}function get(t,e){return __awaiter(this,void 0,void 0,function*(){const r=ipc.sendSync("editor-lib-network:call","get",t,e);return Buffer.from(r)})}function post(t,e){return __awaiter(this,void 0,void 0,function*(){const r=ipc.sendSync("editor-lib-network:call","post",t,e);return Buffer.from(r)})}exports.queryIPList=queryIPList,exports.testConnectServer=testConnectServer,exports.portIsOccupied=portIsOccupied,exports.getFreePort=getFreePort,exports.testHost=testHost,exports.get=get,exports.post=post;