"use strict";var __awaiter=this&&this.__awaiter||function(e,t,o,n){return new(o||(o=Promise))(function(r,s){function i(e){try{c(n.next(e))}catch(e){s(e)}}function u(e){try{c(n.throw(e))}catch(e){s(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof o?t:new o(function(e){e(t)})).then(i,u)}c((n=n.apply(e,t||[])).next())})};Object.defineProperty(exports,"__esModule",{value:!0}),exports.sendPostRequest=exports.sendGetRequest=exports.portIsOccupied=exports.canConnectPassport=exports.queryIpList=void 0;const os_1=require("os"),https=require("https"),http=require("http"),net=require("net"),url_1=require("url"),querystring_1=require("querystring"),electron_1=require("electron"),moment_timezone_1=require("moment-timezone");function queryIpList(){const e=(0,os_1.networkInterfaces)();let t=[];for(const o of Object.keys(e))e[o].forEach(e=>{"IPv4"===e.family&&!1===e.internal&&/^(?!169\.254)/.test(e.address)&&t.push(e.address)});return t}function canConnectPassport(){return new Promise(e=>{const t=https.request({method:"GET",host:"passport.cocos.com",port:443,path:"/oauth/token?xxx",headers:{},timeout:3e3},t=>{if(!(t.statusCode>=200&&t.statusCode<300))return console.warn("failed to connect login server... skipping login"),t.resume(),e(!1);e(!0)}).on("error",t=>{console.warn("failed to connect login server... skipping login"),e(!1)}).on("timeout",()=>{console.warn("failed to connect login server due to request timeout"),e(!1)});t.write(""),t.end()})}function portIsOccupied(e){return __awaiter(this,void 0,void 0,function*(){return new Promise((t,o)=>{const n=net.createServer().listen(e);n.on("listening",function(){n.close(),t(!1)}),n.on("error",function(e){e.code,t(!0)})})})}function sendGetRequest(e,t){return new Promise((o,n)=>{const r=(0,url_1.parse)(e);t=(0,querystring_1.stringify)(t||{});const s={"User-Agent":Editor.App.userAgent,"Accept-Language":electron_1.app.getLocale(),"Time-Zone":moment_timezone_1.tz.guess()},i={method:"GET",host:r.hostname,port:r.port,path:r.pathname+(t?"?"+t:""),headers:s,ciphers:"ALL"},u=[];(r.protocol.startsWith("https:")?https:http).request(i,e=>{if(301!==e.statusCode&&302!==e.statusCode||!e.headers||!e.headers.location)return e.statusCode>=200&&e.statusCode<300?void e.on("data",e=>{u.push(e)}).on("end",()=>{o(Buffer.concat(u))}):(o(null),void e.resume());sendGetRequest(e.headers.location,t).then(o).catch(n)}).on("error",e=>{n(e)}).setTimeout(8e3,()=>{n(new Error(`GET Timeout: ${e}`))}).end()})}function sendPostRequest(e,t){return new Promise((o,n)=>{const r=(0,url_1.parse)(e);"object"==typeof t?t=(0,querystring_1.stringify)(t||{}):t+="";const s={"Content-Type":"application/x-www-form-urlencoded","Content-Length":Buffer.byteLength(t),"User-Agent":Editor.App.userAgent,"Accept-Language":electron_1.app.getLocale(),"Time-Zone":moment_timezone_1.tz.guess()},i={method:"POST",host:r.hostname,port:r.port,path:r.pathname,headers:s,ciphers:"ALL"},u=[],c=(r.protocol.startsWith("https:")?https:http).request(i,e=>{if(301!==e.statusCode&&302!==e.statusCode||!e.headers||!e.headers.location)return e.statusCode>=200&&e.statusCode<300?void e.on("data",e=>{u.push(e)}).on("end",()=>{o(Buffer.concat(u))}):(n(new Error("Connect Failed")),void e.resume());sendPostRequest(e.headers.location,t).then(o).catch(n)}).on("error",e=>{n(e)}).setTimeout(8e3,()=>{n(new Error(`POST Timeout: ${e}`))});c.write(t),c.end()})}exports.queryIpList=queryIpList,exports.canConnectPassport=canConnectPassport,exports.portIsOccupied=portIsOccupied,exports.sendGetRequest=sendGetRequest,exports.sendPostRequest=sendPostRequest;