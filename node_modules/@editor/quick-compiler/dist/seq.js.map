{"version":3,"file":"seq.js","sourceRoot":"","sources":["../src/seq.ts"],"names":[],"mappings":";;;AAGA,SAAgB,kBAAkB,CAAI,KAAU,EAAE,EAAwC;IACtF,OAAO,KAAK,CAAC,MAAM,CAAC,CAAC,OAAyB,EAAE,IAAI,EAAE,YAAY,EAAE,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC,EAAE,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC;AAC1I,CAAC;AAFD,gDAEC;AAED,SAAgB,kBAAkB,CAAI,KAAU,EAAE,EAAwC;IACtF,OAAO,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE,CAAC,EAAE,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;AACpE,CAAC;AAFD,gDAEC","sourcesContent":["\n\n\nexport function sequenceDiscarding<T>(tasks: T[], fn: (value: T, index: number) => unknown): Promise<unknown> {\n    return tasks.reduce((promise: Promise<unknown>, task, currentIndex) => promise.then(() => fn(task, currentIndex)), Promise.resolve());\n}\n\nexport function parallelDiscarding<T>(tasks: T[], fn: (value: T, index: number) => unknown): Promise<unknown> {\n    return Promise.all(tasks.map((task, index) => fn(task, index)));\n}\n"]}