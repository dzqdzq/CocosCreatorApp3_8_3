"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FsCache = void 0;
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const file_uid_1 = require("./file-uid");
class FsCache {
    constructor(rootDir) {
        this._cache = {};
        this._rootDir = rootDir;
    }
    async readFile(fileUid) {
        const cache = this._getCache(fileUid);
        if (cache.source === undefined) {
            cache.source = fs_extra_1.default.readFile(this._getFilePath(fileUid), { encoding: 'utf8' });
        }
        return await cache.source;
    }
    async stat(fileUid) {
        const cache = this._getCache(fileUid);
        if (cache.stats === undefined) {
            cache.stats = fs_extra_1.default.stat(this._getFilePath(fileUid));
        }
        return await cache.stats;
    }
    async pathExists(fileUid) {
        const cache = this._getCache(fileUid);
        if (cache.exists === undefined) {
            cache.exists = fs_extra_1.default.pathExists(this._getFilePath(fileUid));
        }
        return await cache.exists;
    }
    _getCache(fileUid) {
        if (!(fileUid in this._cache)) {
            this._cache[fileUid] = {};
        }
        return this._cache[fileUid];
    }
    _getFilePath(fileUid) {
        return path_1.default.join(this._rootDir, (0, file_uid_1.decodeRegularFilePath)(fileUid));
    }
}
exports.FsCache = FsCache;
//# sourceMappingURL=fs-cache.js.map