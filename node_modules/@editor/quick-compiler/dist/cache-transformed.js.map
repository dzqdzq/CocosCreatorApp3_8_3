{"version":3,"file":"cache-transformed.js","sourceRoot":"","sources":["../src/cache-transformed.ts"],"names":[],"mappings":"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","sourcesContent":["\nimport fs from 'fs-extra';\nimport ps from 'path';\nimport { decodeRegularFilePath, decodeVirtualFileUid, isVirtualFileUid } from './file-uid';\nimport { URL, pathToFileURL } from 'url';\nimport { encodeUrlAsFilePath } from './utilts';\n\nexport class CacheTransformed {\n    constructor({\n        cacheDir,\n    }: {\n        cacheDir: string;\n    }) {\n        this._cacheDir = cacheDir;\n    }\n\n    public async store(path: string, code: string, map?: string) {\n        const realPath = this.getOutFilePath(path);\n        await fs.ensureDir(ps.dirname(realPath));\n        await Promise.all([\n            await fs.writeFile(realPath, code, { encoding: 'utf8' }),\n            map ? await fs.writeFile(`${realPath}.map`, map.toString(), { encoding: 'utf8' }) : undefined,\n        ]);\n    }\n\n    public async isOutFileValid(fileUid: string) {\n        return await fs.pathExists(this.getOutFilePath(fileUid));\n    }\n\n    public getOutFileUrl(fileUid: string) {\n        return pathToFileURL(this.getOutFilePath(fileUid)).href;\n    }\n\n    public async serialize() {\n        return;\n    }\n\n    public async deserialize(json: any) {\n    }\n\n    protected get cacheDir() {\n        return this._cacheDir;\n    }\n\n    protected async forEachModule(visitor: (\n        path: string,\n        code: string | Buffer,\n        map?: any,\n        mapURL?: URL,\n        ) => Promise<void>) {\n\n        const visitRecursive = async (dir: string, prefix: string, visitor: (file: string, prefix: string) => Promise<void>) => {\n            return await Promise.all((await fs.readdir(dir)).map(async (fileName) => {\n                const file = ps.join(dir, fileName);\n                const stat = await fs.stat(file);\n                const filePrefix = prefix ? `${prefix}/${fileName}` : fileName;\n                if (stat.isDirectory()) {\n                    await visitRecursive(file, filePrefix, visitor);\n                } else {\n                    await visitor(file, filePrefix);\n                }\n            }));\n        };\n\n        await visitRecursive(this._cacheDir, '', async (file, prefix) => {\n            if (file.toLowerCase().endsWith('.js')) {\n                const mapPath = `${file}.map`;\n                const [code, map] = await Promise.all([\n                    fs.readFile(file),\n                    fs.readJson(mapPath).catch(() => undefined),\n                ]);\n                await visitor(prefix, code, map, map ? pathToFileURL(mapPath) : undefined);\n            }\n        });\n    }\n\n    protected getRelativeOutputPath(fileUid: string) {\n        let relative: string;\n        if (isVirtualFileUid(fileUid)) {\n            const encodedName = encodeUrlAsFilePath(decodeVirtualFileUid(fileUid));\n            relative = ps.join('virtual', encodedName.startsWith('.js') ? encodedName : `${encodedName}.js`);\n        } else {\n            relative = ps.join('fs', transformOutputExtension(decodeRegularFilePath(fileUid)));\n        }\n        return relative;\n    }\n\n    protected getOutFilePath(fileUid: string) {\n        return ps.join(this._cacheDir, this.getRelativeOutputPath(fileUid));\n    }\n\n    private _cacheDir: string;\n}\n\nfunction transformOutputExtension(file: string) {\n    const lower = file.toLowerCase();\n    if (lower.endsWith('.json')) {\n        return `${file.substr(0, file.length - 5)}.js`;\n    } else if (lower.endsWith('.ts')) {\n        return `${file.substr(0, file.length - 3)}.js`;\n    } else {\n        return file;\n    }\n}"]}