{"version":3,"file":"fs-cache.js","sourceRoot":"","sources":["../src/fs-cache.ts"],"names":[],"mappings":";;;;;;AACA,wDAAqC;AACrC,gDAAsB;AACtB,yCAAmD;AAEnD,MAAa,OAAO;IAChB,YAAY,OAAe;QAwCnB,WAAM,GAA6B,EAAE,CAAC;QAvC1C,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;IAC5B,CAAC;IAEM,KAAK,CAAC,QAAQ,CAAC,OAAe;QACjC,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;QACtC,IAAI,KAAK,CAAC,MAAM,KAAK,SAAS,EAAE;YAC5B,KAAK,CAAC,MAAM,GAAG,kBAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC,CAAC;SAChF;QACD,OAAO,MAAM,KAAK,CAAC,MAAM,CAAC;IAC9B,CAAC;IAEM,KAAK,CAAC,IAAI,CAAC,OAAe;QAC7B,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;QACtC,IAAI,KAAK,CAAC,KAAK,KAAK,SAAS,EAAE;YAC3B,KAAK,CAAC,KAAK,GAAG,kBAAE,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC;SACrD;QACD,OAAO,MAAM,KAAK,CAAC,KAAK,CAAC;IAC7B,CAAC;IAEM,KAAK,CAAC,UAAU,CAAC,OAAe;QACnC,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;QACtC,IAAI,KAAK,CAAC,MAAM,KAAK,SAAS,EAAE;YAC5B,KAAK,CAAC,MAAM,GAAG,kBAAE,CAAC,UAAU,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC;SAC5D;QACD,OAAO,MAAM,KAAK,CAAC,MAAM,CAAC;IAC9B,CAAC;IAEO,SAAS,CAAC,OAAe;QAC7B,IAAI,CAAC,CAAC,OAAO,IAAI,IAAI,CAAC,MAAM,CAAC,EAAE;YAC3B,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC;SAC7B;QACD,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IAChC,CAAC;IAEO,YAAY,CAAC,OAAe;QAChC,OAAO,cAAE,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAA,gCAAqB,EAAC,OAAO,CAAC,CAAC,CAAC;IAClE,CAAC;CAIJ;AA1CD,0BA0CC","sourcesContent":["\nimport fs, { Stats } from 'fs-extra';\nimport ps from 'path';\nimport { decodeRegularFilePath } from './file-uid';\n\nexport class FsCache {\n    constructor(rootDir: string) {\n        this._rootDir = rootDir;\n    }\n\n    public async readFile(fileUid: string) {\n        const cache = this._getCache(fileUid);\n        if (cache.source === undefined) {\n            cache.source = fs.readFile(this._getFilePath(fileUid), { encoding: 'utf8' });\n        }\n        return await cache.source;\n    }\n\n    public async stat(fileUid: string) {\n        const cache = this._getCache(fileUid);\n        if (cache.stats === undefined) {\n            cache.stats = fs.stat(this._getFilePath(fileUid));\n        }\n        return await cache.stats;\n    }\n\n    public async pathExists(fileUid: string) {\n        const cache = this._getCache(fileUid);\n        if (cache.exists === undefined) {\n            cache.exists = fs.pathExists(this._getFilePath(fileUid));\n        }\n        return await cache.exists;\n    }\n\n    private _getCache(fileUid: string) {\n        if (!(fileUid in this._cache)) {\n            this._cache[fileUid] = {};\n        }\n        return this._cache[fileUid];\n    }\n\n    private _getFilePath(fileUid: string) {\n        return ps.join(this._rootDir, decodeRegularFilePath(fileUid));\n    }\n\n    private _rootDir: string;\n    private _cache: Record<string, FileInfo> = {};\n}\n\ninterface FileInfo {\n    stats?: Promise<Stats>;\n    source?: Promise<string>;\n    exists?: Promise<boolean>;\n}\n"]}