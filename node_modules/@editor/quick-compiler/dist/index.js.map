{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["\nimport fs from 'fs-extra';\nimport ps from 'path';\nimport { IBundler } from './bundler';\nimport { ConcatBundler } from './concat-bundler';\nimport type { TargetOptions, Platform } from './core';\nimport { detectChangedFiles } from './target';\nimport type { TargetRecord } from './target';\nimport { urlRelative, pathToFileURL } from '@editor/transform-utilities/dist/path-url-interop';\nimport { FsCache } from './fs-cache';\nimport { ProgressMessage, Stage } from './progress';\nimport { parallelDiscarding, sequenceDiscarding } from './seq';\nimport winston from 'winston';\nimport { StatsQuery } from '@cocos/ccbuild';\nimport { encodeFilePath, encodeVirtualFileUid } from './file-uid';\nimport { VirtualModules } from './virtual-modules';\nimport globby from 'globby';\nimport Transport from 'winston-transport';\n\nconst VERSION = '1.2.32';\n\nexport interface QuickCompileOptions {\n    rootDir: string;\n    outDir: string;\n    incrementalFile?: string;\n\n    /**\n     * 目标之间以什么样的方式运行编译：\n     * - `par` 平行\n     * - `seq` 顺序\n     */\n    targetLaunchPolicy?: 'par' | 'seq';\n\n    targets: TargetOptions[];\n\n    /**\n     * 编译平台，有效值 'HTML5' 和 'NATIVE', 默认值是 'HTML5'。\n     */\n    platform?: Platform;\n\n    /**\n     * 日志文件。如未指定则直接输出到屏幕。\n     */\n    logFile?: string;\n\n    onProgress?: (target: number, message: Readonly<ProgressMessage>) => void;\n}\n\n/**\n * @param options\n */\nasync function quickCompile(options: QuickCompileOptions, bundlers: IBundler[], statsQuery: StatsQuery) {\n    const { rootDir, outDir, platform = 'HTML5' } = options;\n\n    const loggerOptions: winston.LoggerOptions = {\n        level: 'debug',\n        format: winston.format.simple(),\n    };\n    if (options.logFile) {\n        loggerOptions.transports = [\n            new winston.transports.File({ level: 'debug', filename: options.logFile }),\n            new EditorTransport({ level: 'warn' }),\n        ];\n    } else {\n        loggerOptions.transports = [\n            new EditorTransport(),\n        ];\n    }\n    const logger = winston.createLogger(loggerOptions);\n\n    logger.debug(`QuickCompiler v${VERSION}`);\n    logger.debug(new Date().toUTCString());\n    logger.debug(`Input options: ${JSON.stringify(options, undefined, 2)}`);\n\n    const optionsRecord = recordOptions(options);\n\n    const incrementalRecordFile = options.incrementalFile || ps.join(outDir, '.incremental.json');\n    // Try to read incremental cache.\n    const rootRecord: IncrementalRecord = await (async () => {\n        try {\n            const rootRecord = (await fs.readJSON(incrementalRecordFile)) as IncrementalRecord;\n            if (rootRecord.version !== VERSION) {\n                logger.debug(`[Quick-compiler] Version mismatch.`);\n            } else {\n                if (matchOptionsRecord(optionsRecord, rootRecord.options)) {\n                    logger.debug(`[Quick-compiler] Incremental file seems great.`);\n                    return rootRecord;\n                } else {\n                    logger.debug(\n                        `[Quick-compiler] Options doesn't match.\\n` +\n                        `Last: ${JSON.stringify(rootRecord.options, undefined, 2)}\\n` +\n                        `Current: ${JSON.stringify(optionsRecord, undefined, 2)}`\n                    );\n                }\n            }\n        } catch {\n            logger.debug(`[Quick-compiler] Version information lost.`);\n        }\n\n        logger.debug(`Clearing the outDir ${options.outDir}...`);\n        await fs.emptyDir(options.outDir);\n        return {\n            version: VERSION,\n            options: optionsRecord,\n            targets: new Array(options.targets.length).fill(null).map((): TargetRecord => {\n                return {\n                    files: {},\n                    externalDependencies: {},\n                    externalDependencyImportMap: {},\n                    externalDependencyWatchFiles: {},\n                };\n            }),\n        };\n    })();\n\n    const fsCache = new FsCache(rootDir);\n\n    const targetLauncher = (options.targetLaunchPolicy ?? 'seq') === 'seq'\n        ? sequenceDiscarding\n        : parallelDiscarding;\n\n    await main();\n\n    async function main() {\n        await targetLauncher(\n            options.targets,\n            async (targetOption, targetIndex) => {\n                logger.debug(`Starting target ${targetIndex}`);\n                const label = `QuickCompiler:Compile target ${targetIndex}`;\n                console.time(label);\n                await targetMain(\n                    targetOption,\n                    rootRecord.targets[targetIndex],\n                    bundlers[targetIndex],\n                    targetIndex,\n                );\n                console.timeEnd(label);\n            },\n        );\n\n\n        // Write incremental cache.\n        await fs.ensureDir(ps.dirname(incrementalRecordFile));\n        await fs.writeFile(incrementalRecordFile, JSON.stringify(rootRecord, undefined, 4));\n    }\n\n    async function targetMain(targetOptions: TargetOptions, targetRecord: TargetRecord, bundler: IBundler, targetIndex: number) {\n        const onProgress = options.onProgress;\n\n        const onTargetProgress: undefined | ((message: ProgressMessage) => void) =\n            onProgress ? (message) => onProgress(targetIndex, message) : undefined;\n\n        const virtualModules = new VirtualModules();\n\n        const include = (await fs.readJson(ps.join(options.rootDir, 'cc.config.json'))).includes as string[];\n        const files: string[] = [];\n\n        const includeFiles = await globby(include, {\n            cwd: options.rootDir,\n            absolute: true,\n        });\n        files.push(...includeFiles.map((file) => encodeFilePath(file, options.rootDir) ?? file));\n\n        const entryAliases = await getTargetPubEntries(targetOptions);\n\n        if (targetOptions.includeIndex) {\n            const featureUnits = statsQuery.getUnitsOfFeatures(targetOptions.includeIndex.features);\n            logger.debug(`Modules involved in 'cc': ${featureUnits}`);\n            const indexModuleSource = statsQuery.evaluateIndexModuleSource(\n                featureUnits, (featureUnit) => statsQuery.getFeatureUnitFile(featureUnit).replace(/\\\\/g, '\\\\\\\\'));\n            logger.debug(`The source of 'cc':\\n${indexModuleSource}`);\n            const vmIndex = encodeVirtualFileUid('cc');\n            virtualModules.set('cc', indexModuleSource);\n            entryAliases['cc'] = vmIndex;\n        }\n\n        files.push(...Object.values(entryAliases));\n\n        const changedFiles = await detectChangedFiles({\n            rootDir,\n            entries: files,\n            targetRecord,\n            bundler,\n            fsCache,\n        });\n\n        const chunkDir = ps.join(targetOptions.dir, 'external');\n\n        if (changedFiles.length === 0) {\n            logger.debug(`Seems like target ${targetIndex} has already up to date.`);\n            return;\n        }\n\n        await (await import('./core')).core({\n            rootDir,\n            statsQuery,\n            entries: changedFiles,\n            targetRecord,\n            targetOptions,\n            bundler,\n            chunkDir,\n            fsCache,\n            vm: virtualModules,\n            logger,\n            onProgress: onTargetProgress,\n            platform,\n        });\n\n        const label = `QuickCompiler:Bundling target ${targetIndex}`;\n        console.time(label);\n        onTargetProgress?.({\n            stage: Stage.bundle,\n        });\n        await bundler.build(Object.assign({\n            outDir: ps.join(targetOptions.dir, 'bundled'),\n            sourceRoot: rootDir,\n        }, targetOptions));\n        console.timeEnd(label);\n\n        if (targetOptions.loader) {\n            await fs.copyFile(\n                ps.join(__dirname, '..', 'static', 'loader.js'),\n                ps.join(targetOptions.dir, 'loader.js'),\n            );\n        }\n\n        await writeTargetImportMap(targetOptions, targetRecord, entryAliases, bundler, chunkDir);\n    }\n\n    async function getTargetPubEntries(targetOptions: TargetOptions) {\n        const entryAliases: Record<string, string> = {};\n\n        for (const featureUnit of statsQuery.getFeatureUnits()) {\n            entryAliases[`${targetOptions.featureUnitPrefix ?? ''}${featureUnit}`] = statsQuery.getFeatureUnitFile(featureUnit);\n        }\n\n        if (targetOptions.includeEditorExports ?? true) {\n            for (const editorPublicModule of statsQuery.getEditorPublicModules()) {\n                entryAliases[editorPublicModule] = statsQuery.getEditorPublicModuleFile(editorPublicModule);\n            }\n        }\n\n        for (const [k, v] of Object.entries(entryAliases)) {\n            const uid = encodeFilePath(v, rootDir);\n            if (!uid) {\n                throw new Error(`Entry ${v} is not under engine root.`);\n            } else {\n                entryAliases[k] = uid;\n            }\n        }\n\n        return entryAliases;\n    }\n\n    async function writeTargetImportMap(\n        targetOptions: TargetOptions,\n        targetRecord: TargetRecord,\n        entryAliases: Record<string, string>,\n        bundler: IBundler,\n        chunkDir: string,\n    ) {\n        const importMap: ImportMap & { imports: NonNullable<ImportMap['imports']> } = { imports: {} };\n        const importMapFile = ps.join(targetOptions.dir, 'partial-import-map.json');\n\n        for (const [alias, entry] of Object.entries(entryAliases)) {\n            const finalUrl = bundler.getFinalUrl(entry);\n            if (typeof finalUrl === 'string') {\n                importMap.imports[alias] = finalUrl;\n            } else {\n                const relUrl = urlRelative(pathToFileURL(importMapFile), pathToFileURL(finalUrl.path));\n                importMap.imports[alias] = relUrl;\n            }\n        }\n\n        const chunkBaseURL = urlRelative(pathToFileURL(importMapFile), pathToFileURL(chunkDir));\n        for (const [alias, chunkRelativeURL] of Object.entries(targetRecord.externalDependencyImportMap)) {\n            importMap.imports[alias] = `./${chunkBaseURL}/${chunkRelativeURL}`;\n        }\n\n        await fs.ensureDir(ps.dirname(importMapFile));\n        await fs.writeFile(importMapFile, JSON.stringify(importMap, undefined, 4));\n    }\n}\n\nclass EditorTransport extends Transport {\n    log(info: any, callback: () => void) {\n        setImmediate(() => {\n            this.emit('logged', info);\n        });\n\n        const MESSAGE = Symbol.for('message');\n        const LEVEL = Symbol.for('level');\n        const {\n            [MESSAGE]: message,\n            [LEVEL]: level,\n        } = info;\n\n        let consoleX:\n            | typeof console.log\n            | typeof console.warn\n            | typeof console.debug\n            | typeof console.error;\n\n        switch (level) {\n            case 'error':\n                consoleX = console.error;\n                break;\n            case 'warn':\n                consoleX = console.warn;\n                break;\n            case 'info':\n            case 'http':\n            default:\n                consoleX = console.info;\n                break;\n            case 'verbose':\n            case 'debug':\n            case 'silly':\n                consoleX = console.debug;\n                break;\n        }\n\n        consoleX.call(console, message);\n\n        callback();\n    }\n}\n\nexport class QuickCompiler {\n    constructor(options: QuickCompileOptions) {\n        this._options = Object.assign({}, options);\n        this._bundlers = options.targets.map((targetOptions) => {\n            return new ConcatBundler({\n                cacheDir: ps.join(targetOptions.dir, 'transform-cache'),\n                format: targetOptions.format,\n            });\n        });\n    }\n\n    public async build() {\n        await quickCompile(this._options, this._bundlers, await this._getOrCreateStatsQuery());\n    }\n\n    public async buildImportMap(targetIndex: number, features: string[], configurableFlags: Record<string, unknown>) {\n        const options = this._options;\n        const {\n            rootDir,\n        } = options;\n        const statsQuery = await this._getOrCreateStatsQuery();\n        const moduleOverrides = this._setupModuleOverrides(statsQuery, features, configurableFlags, options.platform);\n        const target = options.targets[targetIndex];\n        const bundler = this._bundlers[targetIndex];\n        let importMap: ImportMap = {};\n        try {\n            importMap = await fs.readJson(\n                ps.join(target.dir, 'partial-import-map.json'),\n            );\n        } catch (err) {\n            console.error(`Failed to read engine build result. Please rebuild engine`);\n            return;\n        }\n        for (const [k, v] of Object.entries(moduleOverrides)) {\n            const targetUid = encodeFilePath(v, rootDir);\n            if (!targetUid) {\n                continue;\n            }\n            const targetModuleId = bundler.getModuleId?.(targetUid);\n            if (!targetModuleId) {\n                continue;\n            }\n            let sourceModuleId = k;\n            const sourceUid = encodeFilePath(k, rootDir);\n            if (sourceUid) {\n                sourceModuleId = bundler.getModuleId?.(sourceUid) ?? '';\n            }\n            if (!sourceModuleId) {\n                continue;\n            }\n            (importMap.imports ??= {})[sourceModuleId] = targetModuleId;\n        }\n        await fs.outputJson(\n            ps.join(target.dir, 'import-map.json'),\n            importMap,\n            { spaces: 2 },\n        );\n    }\n\n    private _options: QuickCompileOptions;\n    private _bundlers: IBundler[];\n    private _statsQuery: StatsQuery | null = null;\n\n    private async _getOrCreateStatsQuery() {\n        if (this._statsQuery) {\n            return this._statsQuery;\n        }\n        const statsQuery = await StatsQuery.create(this._options.rootDir);\n        this._statsQuery = statsQuery;\n        return statsQuery;\n    }\n\n    private _setupModuleOverrides(\n        statsQuery: StatsQuery,\n        features: string[],\n        configurableFlags: Record<string, unknown>,\n        platform: Platform = 'HTML5',\n    ) {\n        const mode = 'PREVIEW';\n        const intrinsicFlags = statsQuery.getIntrinsicFlagsOfFeatures(features);\n        let buildTimeConstants = statsQuery.constantManager.genBuildTimeConstants({\n            mode,\n            platform,\n            flags: {\n                DEBUG: true,\n            },\n        });\n        // @ts-ignore\n        buildTimeConstants = {\n            ...buildTimeConstants,\n            ...intrinsicFlags,\n            ...configurableFlags,\n        };\n        const moduleOverrides = statsQuery.evaluateModuleOverrides({\n            mode,\n            platform,\n            buildTimeConstants,\n        });\n        return moduleOverrides;\n    }\n}\n\nexport namespace QuickCompiler {\n    export type Options = QuickCompileOptions;\n}\n\ntype OptionsRecord = QuickCompileOptions;\n\nfunction recordOptions(options: Readonly<QuickCompileOptions>): OptionsRecord {\n    const record = Object.assign({}, options) as OptionsRecord;\n    delete record.logFile;\n    delete record.targetLaunchPolicy;\n    return JSON.parse(JSON.stringify(record));\n}\n\nfunction matchOptionsRecord(record: OptionsRecord, options: OptionsRecord) {\n    return matchLhs(record, options);\n\n    function matchLhs(lhs: unknown, rhs: unknown): boolean {\n        if (Array.isArray(lhs)) {\n            return Array.isArray(rhs) && lhs.length === rhs.length &&\n                lhs.every((v, i) => matchLhs(v, rhs[i]));\n        } else if (typeof lhs === 'object' && lhs !== null) {\n            return typeof rhs === 'object'\n                && rhs !== null\n                && Object.keys(lhs).every((key) => matchLhs((lhs as any)[key], (rhs as any)[key]));\n        } else if (lhs === null) {\n            return rhs === null;\n        } else {\n            return lhs === rhs;\n        }\n    }\n}\n\ninterface IncrementalRecord {\n    version: string;\n    targets: TargetRecord[];\n    options: OptionsRecord;\n}\n\n"]}