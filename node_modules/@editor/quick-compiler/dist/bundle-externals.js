"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.bundleExternals = void 0;
const rollup_1 = require("rollup");
const plugin_babel_1 = __importDefault(require("@rollup/plugin-babel"));
const plugin_commonjs_1 = __importDefault(require("@rollup/plugin-commonjs"));
const plugin_node_resolve_1 = __importDefault(require("@rollup/plugin-node-resolve"));
// @ts-ignore
const preset_env_1 = __importDefault(require("@babel/preset-env"));
const utilts_1 = require("./utilts");
const fs_1 = __importDefault(require("fs"));
async function bundleExternals(entries, options) {
    // const withSourceMap = options.sourceMap;
    // const doMinify = options.minify;
    const realpath = typeof fs_1.default.realpath.native === 'function' ? fs_1.default.realpath.native : fs_1.default.realpath;
    const realPath = (file) => new Promise((resolve, reject) => {
        realpath(file, function (err, path) {
            if (err && err.code !== 'ENOENT') {
                reject(err);
            }
            else {
                resolve(err ? file : path);
            }
        });
    });
    const rollupWarningHandler = (warning, defaultHandler) => {
        var _a;
        if (typeof warning !== 'string') {
            if (warning.code === 'THIS_IS_UNDEFINED') {
                // TODO: It's really inappropriate to do this...
                // Let's fix these files instead of suppressing rollup.
                if ((_a = warning.id) === null || _a === void 0 ? void 0 : _a.match(/(?:spine-core\.js$)|(?:dragonBones\.js$)/)) {
                    console.debug(`Rollup warning 'THIS_IS_UNDEFINED' is omitted for ${warning.id}`);
                    return;
                }
            }
        }
        defaultHandler(warning);
    };
    const rollupPlugins = [
        (0, plugin_node_resolve_1.default)({
            jail: await realPath(options.rootDir),
            rootDir: options.rootDir,
        }),
        (0, plugin_commonjs_1.default)({
            include: [
                /node_modules[/\\]/,
                /asm\.js/,
            ],
            sourceMap: false, // Save performance
        }),
        (0, plugin_babel_1.default)({
            babelHelpers: 'bundled',
            overrides: [{
                    // Eliminates the babel compact warning:
                    // 'The code generator has deoptimised the styling of ...'
                    // that came from node_modules/@cocos
                    test: /node_modules[/\\]@cocos[/\\]/,
                    compact: true,
                }],
            exclude: [
                /node_modules[/\\]@cocos[/\\]ammo/,
                /node_modules[/\\]@cocos[/\\]cannon/,
                /node_modules[/\\]@cocos[/\\]physx/,
                /asm\.js/,
            ],
            presets: [
                preset_env_1.default,
            ],
        }),
        // rpSourcemaps,
    ];
    // if (doMinify) {
    //     rollupPlugins.push(terser);
    // }
    const entryMap = {};
    const rollupInput = {};
    for (const [entry, nameHint] of entries) {
        const entryChunkUUID = nameHint.split(/[\\/]/g).map((part) => (0, utilts_1.encodeUrlAsFilePath)(part)).join('/');
        entryMap[entry] = `${entryChunkUUID}.js`;
        rollupInput[entryChunkUUID] = entry;
    }
    const rollupOptions = {
        input: rollupInput,
        plugins: rollupPlugins,
        perf: options.perf,
        onwarn: rollupWarningHandler,
    };
    const rollupBuild = await (0, rollup_1.rollup)(rollupOptions);
    if (rollupBuild.getTimings) {
        console.debug(rollupBuild.getTimings());
    }
    const watchFiles = rollupBuild.watchFiles.slice();
    return {
        entryMap,
        watchFiles,
        write: async (writeOptions) => {
            const rollupOutputOptions = {
                format: writeOptions.format === 'systemjs' ? 'system' : (writeOptions.format),
                sourcemap: writeOptions.sourceMap,
                dir: writeOptions.chunkDir,
                exports: 'auto',
            };
            await rollupBuild.write(rollupOutputOptions);
        },
    };
}
exports.bundleExternals = bundleExternals;
//# sourceMappingURL=bundle-externals.js.map