(function (factory) {
	typeof define === 'function' && define.amd ? define(factory) :
	factory();
}((function () { 'use strict';

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function unwrapExports (x) {
		return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
	}

	function createCommonjsModule(fn, module) {
		return module = { exports: {} }, fn(module, module.exports), module.exports;
	}

	var coreJs = createCommonjsModule(function (module) {
	  /**
	   * core-js 3.4.1
	   * https://github.com/zloirock/core-js
	   * License: http://rock.mit-license.org
	   * Â© 2020 Denis Pushkarev (zloirock.ru)
	   */
	  !function (undefined$1) {
	    /******/

	    (function (modules) {
	      // webpackBootstrap

	      /******/
	      // The module cache

	      /******/
	      var installedModules = {};
	      /******/

	      /******/
	      // The require function

	      /******/

	      function __webpack_require__(moduleId) {
	        /******/

	        /******/
	        // Check if module is in cache

	        /******/
	        if (installedModules[moduleId]) {
	          /******/
	          return installedModules[moduleId].exports;
	          /******/
	        }
	        /******/
	        // Create a new module (and put it into the cache)

	        /******/


	        var module = installedModules[moduleId] = {
	          /******/
	          i: moduleId,

	          /******/
	          l: false,

	          /******/
	          exports: {}
	          /******/

	        };
	        /******/

	        /******/
	        // Execute the module function

	        /******/

	        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	        /******/

	        /******/
	        // Flag the module as loaded

	        /******/

	        module.l = true;
	        /******/

	        /******/
	        // Return the exports of the module

	        /******/

	        return module.exports;
	        /******/
	      }
	      /******/

	      /******/

	      /******/
	      // expose the modules object (__webpack_modules__)

	      /******/


	      __webpack_require__.m = modules;
	      /******/

	      /******/
	      // expose the module cache

	      /******/

	      __webpack_require__.c = installedModules;
	      /******/

	      /******/
	      // define getter function for harmony exports

	      /******/

	      __webpack_require__.d = function (exports, name, getter) {
	        /******/
	        if (!__webpack_require__.o(exports, name)) {
	          /******/
	          Object.defineProperty(exports, name, {
	            enumerable: true,
	            get: getter
	          });
	          /******/
	        }
	        /******/

	      };
	      /******/

	      /******/
	      // define __esModule on exports

	      /******/


	      __webpack_require__.r = function (exports) {
	        /******/
	        if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {
	          /******/
	          Object.defineProperty(exports, Symbol.toStringTag, {
	            value: 'Module'
	          });
	          /******/
	        }
	        /******/


	        Object.defineProperty(exports, '__esModule', {
	          value: true
	        });
	        /******/
	      };
	      /******/

	      /******/
	      // create a fake namespace object

	      /******/
	      // mode & 1: value is a module id, require it

	      /******/
	      // mode & 2: merge all properties of value into the ns

	      /******/
	      // mode & 4: return value when already ns object

	      /******/
	      // mode & 8|1: behave like require

	      /******/


	      __webpack_require__.t = function (value, mode) {
	        /******/
	        if (mode & 1) value = __webpack_require__(value);
	        /******/

	        if (mode & 8) return value;
	        /******/

	        if (mode & 4 && typeof value === 'object' && value && value.__esModule) return value;
	        /******/

	        var ns = Object.create(null);
	        /******/

	        __webpack_require__.r(ns);
	        /******/


	        Object.defineProperty(ns, 'default', {
	          enumerable: true,
	          value: value
	        });
	        /******/

	        if (mode & 2 && typeof value != 'string') for (var key in value) __webpack_require__.d(ns, key, function (key) {
	          return value[key];
	        }.bind(null, key));
	        /******/

	        return ns;
	        /******/
	      };
	      /******/

	      /******/
	      // getDefaultExport function for compatibility with non-harmony modules

	      /******/


	      __webpack_require__.n = function (module) {
	        /******/
	        var getter = module && module.__esModule ?
	        /******/
	        function getDefault() {
	          return module['default'];
	        } :
	        /******/
	        function getModuleExports() {
	          return module;
	        };
	        /******/

	        __webpack_require__.d(getter, 'a', getter);
	        /******/


	        return getter;
	        /******/
	      };
	      /******/

	      /******/
	      // Object.prototype.hasOwnProperty.call

	      /******/


	      __webpack_require__.o = function (object, property) {
	        return Object.prototype.hasOwnProperty.call(object, property);
	      };
	      /******/

	      /******/
	      // __webpack_public_path__

	      /******/


	      __webpack_require__.p = "";
	      /******/

	      /******/

	      /******/
	      // Load entry module and return exports

	      /******/

	      return __webpack_require__(__webpack_require__.s = 0);
	      /******/
	    })(
	    /************************************************************************/

	    /******/
	    [
	    /* 0 */

	    /***/
	    function (module, exports, __webpack_require__) {
	      __webpack_require__(1);

	      module.exports = __webpack_require__(45);
	      /***/
	    },
	    /* 1 */

	    /***/
	    function (module, exports, __webpack_require__) {
	      var $ = __webpack_require__(2);

	      var $hypot = Math.hypot;
	      var abs = Math.abs;
	      var sqrt = Math.sqrt; // Chrome 77 bug
	      // https://bugs.chromium.org/p/v8/issues/detail?id=9546

	      var BUGGY = !!$hypot && $hypot(Infinity, NaN) !== Infinity; // `Math.hypot` method
	      // https://tc39.github.io/ecma262/#sec-math.hypot

	      $({
	        target: 'Math',
	        stat: true,
	        forced: BUGGY
	      }, {
	        hypot: function hypot(value1, value2) {
	          // eslint-disable-line no-unused-vars
	          var sum = 0;
	          var i = 0;
	          var aLen = arguments.length;
	          var larg = 0;
	          var arg, div;

	          while (i < aLen) {
	            arg = abs(arguments[i++]);

	            if (larg < arg) {
	              div = larg / arg;
	              sum = sum * div * div + 1;
	              larg = arg;
	            } else if (arg > 0) {
	              div = arg / larg;
	              sum += div * div;
	            } else sum += arg;
	          }

	          return larg === Infinity ? Infinity : larg * sqrt(sum);
	        }
	      });
	      /***/
	    },
	    /* 2 */

	    /***/
	    function (module, exports, __webpack_require__) {
	      var global = __webpack_require__(3);

	      var getOwnPropertyDescriptor = __webpack_require__(4).f;

	      var createNonEnumerableProperty = __webpack_require__(18);

	      var redefine = __webpack_require__(21);

	      var setGlobal = __webpack_require__(25);

	      var copyConstructorProperties = __webpack_require__(32);

	      var isForced = __webpack_require__(44);
	      /*
	        options.target      - name of the target object
	        options.global      - target is the global object
	        options.stat        - export as static methods of target
	        options.proto       - export as prototype methods of target
	        options.real        - real prototype method for the `pure` version
	        options.forced      - export even if the native feature is available
	        options.bind        - bind methods to the target, required for the `pure` version
	        options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version
	        options.unsafe      - use the simple assignment of property instead of delete + defineProperty
	        options.sham        - add a flag to not completely full polyfills
	        options.enumerable  - export as enumerable property
	        options.noTargetGet - prevent calling a getter on target
	      */


	      module.exports = function (options, source) {
	        var TARGET = options.target;
	        var GLOBAL = options.global;
	        var STATIC = options.stat;
	        var FORCED, target, key, targetProperty, sourceProperty, descriptor;

	        if (GLOBAL) {
	          target = global;
	        } else if (STATIC) {
	          target = global[TARGET] || setGlobal(TARGET, {});
	        } else {
	          target = (global[TARGET] || {}).prototype;
	        }

	        if (target) for (key in source) {
	          sourceProperty = source[key];

	          if (options.noTargetGet) {
	            descriptor = getOwnPropertyDescriptor(target, key);
	            targetProperty = descriptor && descriptor.value;
	          } else targetProperty = target[key];

	          FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced); // contained in target

	          if (!FORCED && targetProperty !== undefined$1) {
	            if (typeof sourceProperty === typeof targetProperty) continue;
	            copyConstructorProperties(sourceProperty, targetProperty);
	          } // add a flag to not completely full polyfills


	          if (options.sham || targetProperty && targetProperty.sham) {
	            createNonEnumerableProperty(sourceProperty, 'sham', true);
	          } // extend global


	          redefine(target, key, sourceProperty, options);
	        }
	      };
	      /***/

	    },
	    /* 3 */

	    /***/
	    function (module, exports) {
	      var check = function (it) {
	        return it && it.Math == Math && it;
	      }; // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028


	      module.exports = // eslint-disable-next-line no-undef
	      check(typeof globalThis == 'object' && globalThis) || check(typeof window == 'object' && window) || check(typeof self == 'object' && self) || check(typeof commonjsGlobal == 'object' && commonjsGlobal) || // eslint-disable-next-line no-new-func
	      Function('return this')();
	      /***/
	    },
	    /* 4 */

	    /***/
	    function (module, exports, __webpack_require__) {
	      var DESCRIPTORS = __webpack_require__(5);

	      var propertyIsEnumerableModule = __webpack_require__(7);

	      var createPropertyDescriptor = __webpack_require__(8);

	      var toIndexedObject = __webpack_require__(9);

	      var toPrimitive = __webpack_require__(13);

	      var has = __webpack_require__(15);

	      var IE8_DOM_DEFINE = __webpack_require__(16);

	      var nativeGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor; // `Object.getOwnPropertyDescriptor` method
	      // https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptor

	      exports.f = DESCRIPTORS ? nativeGetOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
	        O = toIndexedObject(O);
	        P = toPrimitive(P, true);
	        if (IE8_DOM_DEFINE) try {
	          return nativeGetOwnPropertyDescriptor(O, P);
	        } catch (error) {
	          /* empty */
	        }
	        if (has(O, P)) return createPropertyDescriptor(!propertyIsEnumerableModule.f.call(O, P), O[P]);
	      };
	      /***/
	    },
	    /* 5 */

	    /***/
	    function (module, exports, __webpack_require__) {
	      var fails = __webpack_require__(6); // Thank's IE8 for his funny defineProperty


	      module.exports = !fails(function () {
	        return Object.defineProperty({}, 'a', {
	          get: function () {
	            return 7;
	          }
	        }).a != 7;
	      });
	      /***/
	    },
	    /* 6 */

	    /***/
	    function (module, exports) {
	      module.exports = function (exec) {
	        try {
	          return !!exec();
	        } catch (error) {
	          return true;
	        }
	      };
	      /***/

	    },
	    /* 7 */

	    /***/
	    function (module, exports, __webpack_require__) {

	      var nativePropertyIsEnumerable = {}.propertyIsEnumerable;
	      var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor; // Nashorn ~ JDK8 bug

	      var NASHORN_BUG = getOwnPropertyDescriptor && !nativePropertyIsEnumerable.call({
	        1: 2
	      }, 1); // `Object.prototype.propertyIsEnumerable` method implementation
	      // https://tc39.github.io/ecma262/#sec-object.prototype.propertyisenumerable

	      exports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
	        var descriptor = getOwnPropertyDescriptor(this, V);
	        return !!descriptor && descriptor.enumerable;
	      } : nativePropertyIsEnumerable;
	      /***/
	    },
	    /* 8 */

	    /***/
	    function (module, exports) {
	      module.exports = function (bitmap, value) {
	        return {
	          enumerable: !(bitmap & 1),
	          configurable: !(bitmap & 2),
	          writable: !(bitmap & 4),
	          value: value
	        };
	      };
	      /***/

	    },
	    /* 9 */

	    /***/
	    function (module, exports, __webpack_require__) {
	      // toObject with fallback for non-array-like ES3 strings
	      var IndexedObject = __webpack_require__(10);

	      var requireObjectCoercible = __webpack_require__(12);

	      module.exports = function (it) {
	        return IndexedObject(requireObjectCoercible(it));
	      };
	      /***/

	    },
	    /* 10 */

	    /***/
	    function (module, exports, __webpack_require__) {
	      var fails = __webpack_require__(6);

	      var classof = __webpack_require__(11);

	      var split = ''.split; // fallback for non-array-like ES3 and non-enumerable old V8 strings

	      module.exports = fails(function () {
	        // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
	        // eslint-disable-next-line no-prototype-builtins
	        return !Object('z').propertyIsEnumerable(0);
	      }) ? function (it) {
	        return classof(it) == 'String' ? split.call(it, '') : Object(it);
	      } : Object;
	      /***/
	    },
	    /* 11 */

	    /***/
	    function (module, exports) {
	      var toString = {}.toString;

	      module.exports = function (it) {
	        return toString.call(it).slice(8, -1);
	      };
	      /***/

	    },
	    /* 12 */

	    /***/
	    function (module, exports) {
	      // `RequireObjectCoercible` abstract operation
	      // https://tc39.github.io/ecma262/#sec-requireobjectcoercible
	      module.exports = function (it) {
	        if (it == undefined$1) throw TypeError("Can't call method on " + it);
	        return it;
	      };
	      /***/

	    },
	    /* 13 */

	    /***/
	    function (module, exports, __webpack_require__) {
	      var isObject = __webpack_require__(14); // `ToPrimitive` abstract operation
	      // https://tc39.github.io/ecma262/#sec-toprimitive
	      // instead of the ES6 spec version, we didn't implement @@toPrimitive case
	      // and the second argument - flag - preferred type is a string


	      module.exports = function (input, PREFERRED_STRING) {
	        if (!isObject(input)) return input;
	        var fn, val;
	        if (PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
	        if (typeof (fn = input.valueOf) == 'function' && !isObject(val = fn.call(input))) return val;
	        if (!PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
	        throw TypeError("Can't convert object to primitive value");
	      };
	      /***/

	    },
	    /* 14 */

	    /***/
	    function (module, exports) {
	      module.exports = function (it) {
	        return typeof it === 'object' ? it !== null : typeof it === 'function';
	      };
	      /***/

	    },
	    /* 15 */

	    /***/
	    function (module, exports) {
	      var hasOwnProperty = {}.hasOwnProperty;

	      module.exports = function (it, key) {
	        return hasOwnProperty.call(it, key);
	      };
	      /***/

	    },
	    /* 16 */

	    /***/
	    function (module, exports, __webpack_require__) {
	      var DESCRIPTORS = __webpack_require__(5);

	      var fails = __webpack_require__(6);

	      var createElement = __webpack_require__(17); // Thank's IE8 for his funny defineProperty


	      module.exports = !DESCRIPTORS && !fails(function () {
	        return Object.defineProperty(createElement('div'), 'a', {
	          get: function () {
	            return 7;
	          }
	        }).a != 7;
	      });
	      /***/
	    },
	    /* 17 */

	    /***/
	    function (module, exports, __webpack_require__) {
	      var global = __webpack_require__(3);

	      var isObject = __webpack_require__(14);

	      var document = global.document; // typeof document.createElement is 'object' in old IE

	      var EXISTS = isObject(document) && isObject(document.createElement);

	      module.exports = function (it) {
	        return EXISTS ? document.createElement(it) : {};
	      };
	      /***/

	    },
	    /* 18 */

	    /***/
	    function (module, exports, __webpack_require__) {
	      var DESCRIPTORS = __webpack_require__(5);

	      var definePropertyModule = __webpack_require__(19);

	      var createPropertyDescriptor = __webpack_require__(8);

	      module.exports = DESCRIPTORS ? function (object, key, value) {
	        return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));
	      } : function (object, key, value) {
	        object[key] = value;
	        return object;
	      };
	      /***/
	    },
	    /* 19 */

	    /***/
	    function (module, exports, __webpack_require__) {
	      var DESCRIPTORS = __webpack_require__(5);

	      var IE8_DOM_DEFINE = __webpack_require__(16);

	      var anObject = __webpack_require__(20);

	      var toPrimitive = __webpack_require__(13);

	      var nativeDefineProperty = Object.defineProperty; // `Object.defineProperty` method
	      // https://tc39.github.io/ecma262/#sec-object.defineproperty

	      exports.f = DESCRIPTORS ? nativeDefineProperty : function defineProperty(O, P, Attributes) {
	        anObject(O);
	        P = toPrimitive(P, true);
	        anObject(Attributes);
	        if (IE8_DOM_DEFINE) try {
	          return nativeDefineProperty(O, P, Attributes);
	        } catch (error) {
	          /* empty */
	        }
	        if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported');
	        if ('value' in Attributes) O[P] = Attributes.value;
	        return O;
	      };
	      /***/
	    },
	    /* 20 */

	    /***/
	    function (module, exports, __webpack_require__) {
	      var isObject = __webpack_require__(14);

	      module.exports = function (it) {
	        if (!isObject(it)) {
	          throw TypeError(String(it) + ' is not an object');
	        }

	        return it;
	      };
	      /***/

	    },
	    /* 21 */

	    /***/
	    function (module, exports, __webpack_require__) {
	      var global = __webpack_require__(3);

	      var shared = __webpack_require__(22);

	      var createNonEnumerableProperty = __webpack_require__(18);

	      var has = __webpack_require__(15);

	      var setGlobal = __webpack_require__(25);

	      var nativeFunctionToString = __webpack_require__(26);

	      var InternalStateModule = __webpack_require__(27);

	      var getInternalState = InternalStateModule.get;
	      var enforceInternalState = InternalStateModule.enforce;
	      var TEMPLATE = String(nativeFunctionToString).split('toString');
	      shared('inspectSource', function (it) {
	        return nativeFunctionToString.call(it);
	      });
	      (module.exports = function (O, key, value, options) {
	        var unsafe = options ? !!options.unsafe : false;
	        var simple = options ? !!options.enumerable : false;
	        var noTargetGet = options ? !!options.noTargetGet : false;

	        if (typeof value == 'function') {
	          if (typeof key == 'string' && !has(value, 'name')) createNonEnumerableProperty(value, 'name', key);
	          enforceInternalState(value).source = TEMPLATE.join(typeof key == 'string' ? key : '');
	        }

	        if (O === global) {
	          if (simple) O[key] = value;else setGlobal(key, value);
	          return;
	        } else if (!unsafe) {
	          delete O[key];
	        } else if (!noTargetGet && O[key]) {
	          simple = true;
	        }

	        if (simple) O[key] = value;else createNonEnumerableProperty(O, key, value); // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
	      })(Function.prototype, 'toString', function toString() {
	        return typeof this == 'function' && getInternalState(this).source || nativeFunctionToString.call(this);
	      });
	      /***/
	    },
	    /* 22 */

	    /***/
	    function (module, exports, __webpack_require__) {
	      var IS_PURE = __webpack_require__(23);

	      var store = __webpack_require__(24);

	      (module.exports = function (key, value) {
	        return store[key] || (store[key] = value !== undefined$1 ? value : {});
	      })('versions', []).push({
	        version: '3.4.1',
	        mode: IS_PURE ? 'pure' : 'global',
	        copyright: 'Â© 2019 Denis Pushkarev (zloirock.ru)'
	      });
	      /***/
	    },
	    /* 23 */

	    /***/
	    function (module, exports) {
	      module.exports = false;
	      /***/
	    },
	    /* 24 */

	    /***/
	    function (module, exports, __webpack_require__) {
	      var global = __webpack_require__(3);

	      var setGlobal = __webpack_require__(25);

	      var SHARED = '__core-js_shared__';
	      var store = global[SHARED] || setGlobal(SHARED, {});
	      module.exports = store;
	      /***/
	    },
	    /* 25 */

	    /***/
	    function (module, exports, __webpack_require__) {
	      var global = __webpack_require__(3);

	      var createNonEnumerableProperty = __webpack_require__(18);

	      module.exports = function (key, value) {
	        try {
	          createNonEnumerableProperty(global, key, value);
	        } catch (error) {
	          global[key] = value;
	        }

	        return value;
	      };
	      /***/

	    },
	    /* 26 */

	    /***/
	    function (module, exports, __webpack_require__) {
	      var shared = __webpack_require__(22);

	      module.exports = shared('native-function-to-string', Function.toString);
	      /***/
	    },
	    /* 27 */

	    /***/
	    function (module, exports, __webpack_require__) {
	      var NATIVE_WEAK_MAP = __webpack_require__(28);

	      var global = __webpack_require__(3);

	      var isObject = __webpack_require__(14);

	      var createNonEnumerableProperty = __webpack_require__(18);

	      var objectHas = __webpack_require__(15);

	      var sharedKey = __webpack_require__(29);

	      var hiddenKeys = __webpack_require__(31);

	      var WeakMap = global.WeakMap;
	      var set, get, has;

	      var enforce = function (it) {
	        return has(it) ? get(it) : set(it, {});
	      };

	      var getterFor = function (TYPE) {
	        return function (it) {
	          var state;

	          if (!isObject(it) || (state = get(it)).type !== TYPE) {
	            throw TypeError('Incompatible receiver, ' + TYPE + ' required');
	          }

	          return state;
	        };
	      };

	      if (NATIVE_WEAK_MAP) {
	        var store = new WeakMap();
	        var wmget = store.get;
	        var wmhas = store.has;
	        var wmset = store.set;

	        set = function (it, metadata) {
	          wmset.call(store, it, metadata);
	          return metadata;
	        };

	        get = function (it) {
	          return wmget.call(store, it) || {};
	        };

	        has = function (it) {
	          return wmhas.call(store, it);
	        };
	      } else {
	        var STATE = sharedKey('state');
	        hiddenKeys[STATE] = true;

	        set = function (it, metadata) {
	          createNonEnumerableProperty(it, STATE, metadata);
	          return metadata;
	        };

	        get = function (it) {
	          return objectHas(it, STATE) ? it[STATE] : {};
	        };

	        has = function (it) {
	          return objectHas(it, STATE);
	        };
	      }

	      module.exports = {
	        set: set,
	        get: get,
	        has: has,
	        enforce: enforce,
	        getterFor: getterFor
	      };
	      /***/
	    },
	    /* 28 */

	    /***/
	    function (module, exports, __webpack_require__) {
	      var global = __webpack_require__(3);

	      var nativeFunctionToString = __webpack_require__(26);

	      var WeakMap = global.WeakMap;
	      module.exports = typeof WeakMap === 'function' && /native code/.test(nativeFunctionToString.call(WeakMap));
	      /***/
	    },
	    /* 29 */

	    /***/
	    function (module, exports, __webpack_require__) {
	      var shared = __webpack_require__(22);

	      var uid = __webpack_require__(30);

	      var keys = shared('keys');

	      module.exports = function (key) {
	        return keys[key] || (keys[key] = uid(key));
	      };
	      /***/

	    },
	    /* 30 */

	    /***/
	    function (module, exports) {
	      var id = 0;
	      var postfix = Math.random();

	      module.exports = function (key) {
	        return 'Symbol(' + String(key === undefined$1 ? '' : key) + ')_' + (++id + postfix).toString(36);
	      };
	      /***/

	    },
	    /* 31 */

	    /***/
	    function (module, exports) {
	      module.exports = {};
	      /***/
	    },
	    /* 32 */

	    /***/
	    function (module, exports, __webpack_require__) {
	      var has = __webpack_require__(15);

	      var ownKeys = __webpack_require__(33);

	      var getOwnPropertyDescriptorModule = __webpack_require__(4);

	      var definePropertyModule = __webpack_require__(19);

	      module.exports = function (target, source) {
	        var keys = ownKeys(source);
	        var defineProperty = definePropertyModule.f;
	        var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;

	        for (var i = 0; i < keys.length; i++) {
	          var key = keys[i];
	          if (!has(target, key)) defineProperty(target, key, getOwnPropertyDescriptor(source, key));
	        }
	      };
	      /***/

	    },
	    /* 33 */

	    /***/
	    function (module, exports, __webpack_require__) {
	      var getBuiltIn = __webpack_require__(34);

	      var getOwnPropertyNamesModule = __webpack_require__(36);

	      var getOwnPropertySymbolsModule = __webpack_require__(43);

	      var anObject = __webpack_require__(20); // all object keys, includes non-enumerable and symbols


	      module.exports = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {
	        var keys = getOwnPropertyNamesModule.f(anObject(it));
	        var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
	        return getOwnPropertySymbols ? keys.concat(getOwnPropertySymbols(it)) : keys;
	      };
	      /***/

	    },
	    /* 34 */

	    /***/
	    function (module, exports, __webpack_require__) {
	      var path = __webpack_require__(35);

	      var global = __webpack_require__(3);

	      var aFunction = function (variable) {
	        return typeof variable == 'function' ? variable : undefined$1;
	      };

	      module.exports = function (namespace, method) {
	        return arguments.length < 2 ? aFunction(path[namespace]) || aFunction(global[namespace]) : path[namespace] && path[namespace][method] || global[namespace] && global[namespace][method];
	      };
	      /***/

	    },
	    /* 35 */

	    /***/
	    function (module, exports, __webpack_require__) {
	      module.exports = __webpack_require__(3);
	      /***/
	    },
	    /* 36 */

	    /***/
	    function (module, exports, __webpack_require__) {
	      var internalObjectKeys = __webpack_require__(37);

	      var enumBugKeys = __webpack_require__(42);

	      var hiddenKeys = enumBugKeys.concat('length', 'prototype'); // `Object.getOwnPropertyNames` method
	      // https://tc39.github.io/ecma262/#sec-object.getownpropertynames

	      exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
	        return internalObjectKeys(O, hiddenKeys);
	      };
	      /***/

	    },
	    /* 37 */

	    /***/
	    function (module, exports, __webpack_require__) {
	      var has = __webpack_require__(15);

	      var toIndexedObject = __webpack_require__(9);

	      var indexOf = __webpack_require__(38).indexOf;

	      var hiddenKeys = __webpack_require__(31);

	      module.exports = function (object, names) {
	        var O = toIndexedObject(object);
	        var i = 0;
	        var result = [];
	        var key;

	        for (key in O) !has(hiddenKeys, key) && has(O, key) && result.push(key); // Don't enum bug & hidden keys


	        while (names.length > i) if (has(O, key = names[i++])) {
	          ~indexOf(result, key) || result.push(key);
	        }

	        return result;
	      };
	      /***/

	    },
	    /* 38 */

	    /***/
	    function (module, exports, __webpack_require__) {
	      var toIndexedObject = __webpack_require__(9);

	      var toLength = __webpack_require__(39);

	      var toAbsoluteIndex = __webpack_require__(41); // `Array.prototype.{ indexOf, includes }` methods implementation


	      var createMethod = function (IS_INCLUDES) {
	        return function ($this, el, fromIndex) {
	          var O = toIndexedObject($this);
	          var length = toLength(O.length);
	          var index = toAbsoluteIndex(fromIndex, length);
	          var value; // Array#includes uses SameValueZero equality algorithm
	          // eslint-disable-next-line no-self-compare

	          if (IS_INCLUDES && el != el) while (length > index) {
	            value = O[index++]; // eslint-disable-next-line no-self-compare

	            if (value != value) return true; // Array#indexOf ignores holes, Array#includes - not
	          } else for (; length > index; index++) {
	            if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
	          }
	          return !IS_INCLUDES && -1;
	        };
	      };

	      module.exports = {
	        // `Array.prototype.includes` method
	        // https://tc39.github.io/ecma262/#sec-array.prototype.includes
	        includes: createMethod(true),
	        // `Array.prototype.indexOf` method
	        // https://tc39.github.io/ecma262/#sec-array.prototype.indexof
	        indexOf: createMethod(false)
	      };
	      /***/
	    },
	    /* 39 */

	    /***/
	    function (module, exports, __webpack_require__) {
	      var toInteger = __webpack_require__(40);

	      var min = Math.min; // `ToLength` abstract operation
	      // https://tc39.github.io/ecma262/#sec-tolength

	      module.exports = function (argument) {
	        return argument > 0 ? min(toInteger(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
	      };
	      /***/

	    },
	    /* 40 */

	    /***/
	    function (module, exports) {
	      var ceil = Math.ceil;
	      var floor = Math.floor; // `ToInteger` abstract operation
	      // https://tc39.github.io/ecma262/#sec-tointeger

	      module.exports = function (argument) {
	        return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor : ceil)(argument);
	      };
	      /***/

	    },
	    /* 41 */

	    /***/
	    function (module, exports, __webpack_require__) {
	      var toInteger = __webpack_require__(40);

	      var max = Math.max;
	      var min = Math.min; // Helper for a popular repeating case of the spec:
	      // Let integer be ? ToInteger(index).
	      // If integer < 0, let result be max((length + integer), 0); else let result be min(length, length).

	      module.exports = function (index, length) {
	        var integer = toInteger(index);
	        return integer < 0 ? max(integer + length, 0) : min(integer, length);
	      };
	      /***/

	    },
	    /* 42 */

	    /***/
	    function (module, exports) {
	      // IE8- don't enum bug keys
	      module.exports = ['constructor', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'toLocaleString', 'toString', 'valueOf'];
	      /***/
	    },
	    /* 43 */

	    /***/
	    function (module, exports) {
	      exports.f = Object.getOwnPropertySymbols;
	      /***/
	    },
	    /* 44 */

	    /***/
	    function (module, exports, __webpack_require__) {
	      var fails = __webpack_require__(6);

	      var replacement = /#|\.prototype\./;

	      var isForced = function (feature, detection) {
	        var value = data[normalize(feature)];
	        return value == POLYFILL ? true : value == NATIVE ? false : typeof detection == 'function' ? fails(detection) : !!detection;
	      };

	      var normalize = isForced.normalize = function (string) {
	        return String(string).replace(replacement, '.').toLowerCase();
	      };

	      var data = isForced.data = {};
	      var NATIVE = isForced.NATIVE = 'N';
	      var POLYFILL = isForced.POLYFILL = 'P';
	      module.exports = isForced;
	      /***/
	    },
	    /* 45 */

	    /***/
	    function (module, exports, __webpack_require__) {

	      var $ = __webpack_require__(2);

	      var createIteratorConstructor = __webpack_require__(46);

	      var requireObjectCoercible = __webpack_require__(12);

	      var toLength = __webpack_require__(39);

	      var aFunction = __webpack_require__(59);

	      var anObject = __webpack_require__(20);

	      var classof = __webpack_require__(60);

	      var isRegExp = __webpack_require__(61);

	      var getRegExpFlags = __webpack_require__(62);

	      var createNonEnumerableProperty = __webpack_require__(18);

	      var fails = __webpack_require__(6);

	      var wellKnownSymbol = __webpack_require__(51);

	      var speciesConstructor = __webpack_require__(63);

	      var advanceStringIndex = __webpack_require__(64);

	      var InternalStateModule = __webpack_require__(27);

	      var IS_PURE = __webpack_require__(23);

	      var MATCH_ALL = wellKnownSymbol('matchAll');
	      var REGEXP_STRING = 'RegExp String';
	      var REGEXP_STRING_ITERATOR = REGEXP_STRING + ' Iterator';
	      var setInternalState = InternalStateModule.set;
	      var getInternalState = InternalStateModule.getterFor(REGEXP_STRING_ITERATOR);
	      var RegExpPrototype = RegExp.prototype;
	      var regExpBuiltinExec = RegExpPrototype.exec;
	      var nativeMatchAll = ''.matchAll;
	      var WORKS_WITH_NON_GLOBAL_REGEX = !!nativeMatchAll && !fails(function () {
	        'a'.matchAll(/./);
	      });

	      var regExpExec = function (R, S) {
	        var exec = R.exec;
	        var result;

	        if (typeof exec == 'function') {
	          result = exec.call(R, S);
	          if (typeof result != 'object') throw TypeError('Incorrect exec result');
	          return result;
	        }

	        return regExpBuiltinExec.call(R, S);
	      }; // eslint-disable-next-line max-len


	      var $RegExpStringIterator = createIteratorConstructor(function RegExpStringIterator(regexp, string, global, fullUnicode) {
	        setInternalState(this, {
	          type: REGEXP_STRING_ITERATOR,
	          regexp: regexp,
	          string: string,
	          global: global,
	          unicode: fullUnicode,
	          done: false
	        });
	      }, REGEXP_STRING, function next() {
	        var state = getInternalState(this);
	        if (state.done) return {
	          value: undefined$1,
	          done: true
	        };
	        var R = state.regexp;
	        var S = state.string;
	        var match = regExpExec(R, S);
	        if (match === null) return {
	          value: undefined$1,
	          done: state.done = true
	        };

	        if (state.global) {
	          if (String(match[0]) == '') R.lastIndex = advanceStringIndex(S, toLength(R.lastIndex), state.unicode);
	          return {
	            value: match,
	            done: false
	          };
	        }

	        state.done = true;
	        return {
	          value: match,
	          done: false
	        };
	      });

	      var $matchAll = function (string) {
	        var R = anObject(this);
	        var S = String(string);
	        var C, flagsValue, flags, matcher, global, fullUnicode;
	        C = speciesConstructor(R, RegExp);
	        flagsValue = R.flags;

	        if (flagsValue === undefined$1 && R instanceof RegExp && !('flags' in RegExpPrototype)) {
	          flagsValue = getRegExpFlags.call(R);
	        }

	        flags = flagsValue === undefined$1 ? '' : String(flagsValue);
	        matcher = new C(C === RegExp ? R.source : R, flags);
	        global = !!~flags.indexOf('g');
	        fullUnicode = !!~flags.indexOf('u');
	        matcher.lastIndex = toLength(R.lastIndex);
	        return new $RegExpStringIterator(matcher, S, global, fullUnicode);
	      }; // `String.prototype.matchAll` method
	      // https://github.com/tc39/proposal-string-matchall


	      $({
	        target: 'String',
	        proto: true,
	        forced: WORKS_WITH_NON_GLOBAL_REGEX
	      }, {
	        matchAll: function matchAll(regexp) {
	          var O = requireObjectCoercible(this);
	          var flags, S, matcher, rx;

	          if (regexp != null) {
	            if (isRegExp(regexp)) {
	              flags = String(requireObjectCoercible('flags' in RegExpPrototype ? regexp.flags : getRegExpFlags.call(regexp)));
	              if (!~flags.indexOf('g')) throw TypeError('`.matchAll` does not allow non-global regexes');
	            }

	            if (WORKS_WITH_NON_GLOBAL_REGEX) return nativeMatchAll.apply(O, arguments);
	            matcher = regexp[MATCH_ALL];
	            if (matcher === undefined$1 && IS_PURE && classof(regexp) == 'RegExp') matcher = $matchAll;
	            if (matcher != null) return aFunction(matcher).call(regexp, O);
	          } else if (WORKS_WITH_NON_GLOBAL_REGEX) return nativeMatchAll.apply(O, arguments);

	          S = String(O);
	          rx = new RegExp(regexp, 'g');
	          return IS_PURE ? $matchAll.call(rx, S) : rx[MATCH_ALL](S);
	        }
	      });
	      IS_PURE || MATCH_ALL in RegExpPrototype || createNonEnumerableProperty(RegExpPrototype, MATCH_ALL, $matchAll);
	      /***/
	    },
	    /* 46 */

	    /***/
	    function (module, exports, __webpack_require__) {

	      var IteratorPrototype = __webpack_require__(47).IteratorPrototype;

	      var create = __webpack_require__(53);

	      var createPropertyDescriptor = __webpack_require__(8);

	      var setToStringTag = __webpack_require__(57);

	      var Iterators = __webpack_require__(58);

	      var returnThis = function () {
	        return this;
	      };

	      module.exports = function (IteratorConstructor, NAME, next) {
	        var TO_STRING_TAG = NAME + ' Iterator';
	        IteratorConstructor.prototype = create(IteratorPrototype, {
	          next: createPropertyDescriptor(1, next)
	        });
	        setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);
	        Iterators[TO_STRING_TAG] = returnThis;
	        return IteratorConstructor;
	      };
	      /***/

	    },
	    /* 47 */

	    /***/
	    function (module, exports, __webpack_require__) {

	      var getPrototypeOf = __webpack_require__(48);

	      var createNonEnumerableProperty = __webpack_require__(18);

	      var has = __webpack_require__(15);

	      var wellKnownSymbol = __webpack_require__(51);

	      var IS_PURE = __webpack_require__(23);

	      var ITERATOR = wellKnownSymbol('iterator');
	      var BUGGY_SAFARI_ITERATORS = false;

	      var returnThis = function () {
	        return this;
	      }; // `%IteratorPrototype%` object
	      // https://tc39.github.io/ecma262/#sec-%iteratorprototype%-object


	      var IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;

	      if ([].keys) {
	        arrayIterator = [].keys(); // Safari 8 has buggy iterators w/o `next`

	        if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS = true;else {
	          PrototypeOfArrayIteratorPrototype = getPrototypeOf(getPrototypeOf(arrayIterator));
	          if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype = PrototypeOfArrayIteratorPrototype;
	        }
	      }

	      if (IteratorPrototype == undefined$1) IteratorPrototype = {}; // 25.1.2.1.1 %IteratorPrototype%[@@iterator]()

	      if (!IS_PURE && !has(IteratorPrototype, ITERATOR)) {
	        createNonEnumerableProperty(IteratorPrototype, ITERATOR, returnThis);
	      }

	      module.exports = {
	        IteratorPrototype: IteratorPrototype,
	        BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS
	      };
	      /***/
	    },
	    /* 48 */

	    /***/
	    function (module, exports, __webpack_require__) {
	      var has = __webpack_require__(15);

	      var toObject = __webpack_require__(49);

	      var sharedKey = __webpack_require__(29);

	      var CORRECT_PROTOTYPE_GETTER = __webpack_require__(50);

	      var IE_PROTO = sharedKey('IE_PROTO');
	      var ObjectPrototype = Object.prototype; // `Object.getPrototypeOf` method
	      // https://tc39.github.io/ecma262/#sec-object.getprototypeof

	      module.exports = CORRECT_PROTOTYPE_GETTER ? Object.getPrototypeOf : function (O) {
	        O = toObject(O);
	        if (has(O, IE_PROTO)) return O[IE_PROTO];

	        if (typeof O.constructor == 'function' && O instanceof O.constructor) {
	          return O.constructor.prototype;
	        }

	        return O instanceof Object ? ObjectPrototype : null;
	      };
	      /***/
	    },
	    /* 49 */

	    /***/
	    function (module, exports, __webpack_require__) {
	      var requireObjectCoercible = __webpack_require__(12); // `ToObject` abstract operation
	      // https://tc39.github.io/ecma262/#sec-toobject


	      module.exports = function (argument) {
	        return Object(requireObjectCoercible(argument));
	      };
	      /***/

	    },
	    /* 50 */

	    /***/
	    function (module, exports, __webpack_require__) {
	      var fails = __webpack_require__(6);

	      module.exports = !fails(function () {
	        function F() {
	          /* empty */
	        }

	        F.prototype.constructor = null;
	        return Object.getPrototypeOf(new F()) !== F.prototype;
	      });
	      /***/
	    },
	    /* 51 */

	    /***/
	    function (module, exports, __webpack_require__) {
	      var global = __webpack_require__(3);

	      var shared = __webpack_require__(22);

	      var uid = __webpack_require__(30);

	      var NATIVE_SYMBOL = __webpack_require__(52);

	      var Symbol = global.Symbol;
	      var store = shared('wks');

	      module.exports = function (name) {
	        return store[name] || (store[name] = NATIVE_SYMBOL && Symbol[name] || (NATIVE_SYMBOL ? Symbol : uid)('Symbol.' + name));
	      };
	      /***/

	    },
	    /* 52 */

	    /***/
	    function (module, exports, __webpack_require__) {
	      var fails = __webpack_require__(6);

	      module.exports = !!Object.getOwnPropertySymbols && !fails(function () {
	        // Chrome 38 Symbol has incorrect toString conversion
	        // eslint-disable-next-line no-undef
	        return !String(Symbol());
	      });
	      /***/
	    },
	    /* 53 */

	    /***/
	    function (module, exports, __webpack_require__) {
	      var anObject = __webpack_require__(20);

	      var defineProperties = __webpack_require__(54);

	      var enumBugKeys = __webpack_require__(42);

	      var hiddenKeys = __webpack_require__(31);

	      var html = __webpack_require__(56);

	      var documentCreateElement = __webpack_require__(17);

	      var sharedKey = __webpack_require__(29);

	      var IE_PROTO = sharedKey('IE_PROTO');
	      var PROTOTYPE = 'prototype';

	      var Empty = function () {
	        /* empty */
	      }; // Create object with fake `null` prototype: use iframe Object with cleared prototype


	      var createDict = function () {
	        // Thrash, waste and sodomy: IE GC bug
	        var iframe = documentCreateElement('iframe');
	        var length = enumBugKeys.length;
	        var lt = '<';
	        var script = 'script';
	        var gt = '>';
	        var js = 'java' + script + ':';
	        var iframeDocument;
	        iframe.style.display = 'none';
	        html.appendChild(iframe);
	        iframe.src = String(js);
	        iframeDocument = iframe.contentWindow.document;
	        iframeDocument.open();
	        iframeDocument.write(lt + script + gt + 'document.F=Object' + lt + '/' + script + gt);
	        iframeDocument.close();
	        createDict = iframeDocument.F;

	        while (length--) delete createDict[PROTOTYPE][enumBugKeys[length]];

	        return createDict();
	      }; // `Object.create` method
	      // https://tc39.github.io/ecma262/#sec-object.create


	      module.exports = Object.create || function create(O, Properties) {
	        var result;

	        if (O !== null) {
	          Empty[PROTOTYPE] = anObject(O);
	          result = new Empty();
	          Empty[PROTOTYPE] = null; // add "__proto__" for Object.getPrototypeOf polyfill

	          result[IE_PROTO] = O;
	        } else result = createDict();

	        return Properties === undefined$1 ? result : defineProperties(result, Properties);
	      };

	      hiddenKeys[IE_PROTO] = true;
	      /***/
	    },
	    /* 54 */

	    /***/
	    function (module, exports, __webpack_require__) {
	      var DESCRIPTORS = __webpack_require__(5);

	      var definePropertyModule = __webpack_require__(19);

	      var anObject = __webpack_require__(20);

	      var objectKeys = __webpack_require__(55); // `Object.defineProperties` method
	      // https://tc39.github.io/ecma262/#sec-object.defineproperties


	      module.exports = DESCRIPTORS ? Object.defineProperties : function defineProperties(O, Properties) {
	        anObject(O);
	        var keys = objectKeys(Properties);
	        var length = keys.length;
	        var index = 0;
	        var key;

	        while (length > index) definePropertyModule.f(O, key = keys[index++], Properties[key]);

	        return O;
	      };
	      /***/
	    },
	    /* 55 */

	    /***/
	    function (module, exports, __webpack_require__) {
	      var internalObjectKeys = __webpack_require__(37);

	      var enumBugKeys = __webpack_require__(42); // `Object.keys` method
	      // https://tc39.github.io/ecma262/#sec-object.keys


	      module.exports = Object.keys || function keys(O) {
	        return internalObjectKeys(O, enumBugKeys);
	      };
	      /***/

	    },
	    /* 56 */

	    /***/
	    function (module, exports, __webpack_require__) {
	      var getBuiltIn = __webpack_require__(34);

	      module.exports = getBuiltIn('document', 'documentElement');
	      /***/
	    },
	    /* 57 */

	    /***/
	    function (module, exports, __webpack_require__) {
	      var defineProperty = __webpack_require__(19).f;

	      var has = __webpack_require__(15);

	      var wellKnownSymbol = __webpack_require__(51);

	      var TO_STRING_TAG = wellKnownSymbol('toStringTag');

	      module.exports = function (it, TAG, STATIC) {
	        if (it && !has(it = STATIC ? it : it.prototype, TO_STRING_TAG)) {
	          defineProperty(it, TO_STRING_TAG, {
	            configurable: true,
	            value: TAG
	          });
	        }
	      };
	      /***/

	    },
	    /* 58 */

	    /***/
	    function (module, exports) {
	      module.exports = {};
	      /***/
	    },
	    /* 59 */

	    /***/
	    function (module, exports) {
	      module.exports = function (it) {
	        if (typeof it != 'function') {
	          throw TypeError(String(it) + ' is not a function');
	        }

	        return it;
	      };
	      /***/

	    },
	    /* 60 */

	    /***/
	    function (module, exports, __webpack_require__) {
	      var classofRaw = __webpack_require__(11);

	      var wellKnownSymbol = __webpack_require__(51);

	      var TO_STRING_TAG = wellKnownSymbol('toStringTag'); // ES3 wrong here

	      var CORRECT_ARGUMENTS = classofRaw(function () {
	        return arguments;
	      }()) == 'Arguments'; // fallback for IE11 Script Access Denied error

	      var tryGet = function (it, key) {
	        try {
	          return it[key];
	        } catch (error) {
	          /* empty */
	        }
	      }; // getting tag from ES6+ `Object.prototype.toString`


	      module.exports = function (it) {
	        var O, tag, result;
	        return it === undefined$1 ? 'Undefined' : it === null ? 'Null' // @@toStringTag case
	        : typeof (tag = tryGet(O = Object(it), TO_STRING_TAG)) == 'string' ? tag // builtinTag case
	        : CORRECT_ARGUMENTS ? classofRaw(O) // ES3 arguments fallback
	        : (result = classofRaw(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : result;
	      };
	      /***/

	    },
	    /* 61 */

	    /***/
	    function (module, exports, __webpack_require__) {
	      var isObject = __webpack_require__(14);

	      var classof = __webpack_require__(11);

	      var wellKnownSymbol = __webpack_require__(51);

	      var MATCH = wellKnownSymbol('match'); // `IsRegExp` abstract operation
	      // https://tc39.github.io/ecma262/#sec-isregexp

	      module.exports = function (it) {
	        var isRegExp;
	        return isObject(it) && ((isRegExp = it[MATCH]) !== undefined$1 ? !!isRegExp : classof(it) == 'RegExp');
	      };
	      /***/

	    },
	    /* 62 */

	    /***/
	    function (module, exports, __webpack_require__) {

	      var anObject = __webpack_require__(20); // `RegExp.prototype.flags` getter implementation
	      // https://tc39.github.io/ecma262/#sec-get-regexp.prototype.flags


	      module.exports = function () {
	        var that = anObject(this);
	        var result = '';
	        if (that.global) result += 'g';
	        if (that.ignoreCase) result += 'i';
	        if (that.multiline) result += 'm';
	        if (that.dotAll) result += 's';
	        if (that.unicode) result += 'u';
	        if (that.sticky) result += 'y';
	        return result;
	      };
	      /***/

	    },
	    /* 63 */

	    /***/
	    function (module, exports, __webpack_require__) {
	      var anObject = __webpack_require__(20);

	      var aFunction = __webpack_require__(59);

	      var wellKnownSymbol = __webpack_require__(51);

	      var SPECIES = wellKnownSymbol('species'); // `SpeciesConstructor` abstract operation
	      // https://tc39.github.io/ecma262/#sec-speciesconstructor

	      module.exports = function (O, defaultConstructor) {
	        var C = anObject(O).constructor;
	        var S;
	        return C === undefined$1 || (S = anObject(C)[SPECIES]) == undefined$1 ? defaultConstructor : aFunction(S);
	      };
	      /***/

	    },
	    /* 64 */

	    /***/
	    function (module, exports, __webpack_require__) {

	      var charAt = __webpack_require__(65).charAt; // `AdvanceStringIndex` abstract operation
	      // https://tc39.github.io/ecma262/#sec-advancestringindex


	      module.exports = function (S, index, unicode) {
	        return index + (unicode ? charAt(S, index).length : 1);
	      };
	      /***/

	    },
	    /* 65 */

	    /***/
	    function (module, exports, __webpack_require__) {
	      var toInteger = __webpack_require__(40);

	      var requireObjectCoercible = __webpack_require__(12); // `String.prototype.{ codePointAt, at }` methods implementation


	      var createMethod = function (CONVERT_TO_STRING) {
	        return function ($this, pos) {
	          var S = String(requireObjectCoercible($this));
	          var position = toInteger(pos);
	          var size = S.length;
	          var first, second;
	          if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined$1;
	          first = S.charCodeAt(position);
	          return first < 0xD800 || first > 0xDBFF || position + 1 === size || (second = S.charCodeAt(position + 1)) < 0xDC00 || second > 0xDFFF ? CONVERT_TO_STRING ? S.charAt(position) : first : CONVERT_TO_STRING ? S.slice(position, position + 2) : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;
	        };
	      };

	      module.exports = {
	        // `String.prototype.codePointAt` method
	        // https://tc39.github.io/ecma262/#sec-string.prototype.codepointat
	        codeAt: createMethod(false),
	        // `String.prototype.at` method
	        // https://github.com/mathiasbynens/String.prototype.at
	        charAt: createMethod(true)
	      };
	      /***/
	    }
	    /******/
	    ]);
	  }();
	});
	unwrapExports(coreJs);

	var runtime_1 = createCommonjsModule(function (module) {
	  /**
	   * Copyright (c) 2014-present, Facebook, Inc.
	   *
	   * This source code is licensed under the MIT license found in the
	   * LICENSE file in the root directory of this source tree.
	   */
	  var runtime = function (exports) {

	    var Op = Object.prototype;
	    var hasOwn = Op.hasOwnProperty;
	    var undefined$1; // More compressible than void 0.

	    var $Symbol = typeof Symbol === "function" ? Symbol : {};
	    var iteratorSymbol = $Symbol.iterator || "@@iterator";
	    var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
	    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

	    function wrap(innerFn, outerFn, self, tryLocsList) {
	      // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
	      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
	      var generator = Object.create(protoGenerator.prototype);
	      var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,
	      // .throw, and .return methods.

	      generator._invoke = makeInvokeMethod(innerFn, self, context);
	      return generator;
	    }

	    exports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion
	    // record like context.tryEntries[i].completion. This interface could
	    // have been (and was previously) designed to take a closure to be
	    // invoked without arguments, but in all the cases we care about we
	    // already have an existing method we want to call, so there's no need
	    // to create a new function object. We can even get away with assuming
	    // the method takes exactly one argument, since that happens to be true
	    // in every case, so we don't have to touch the arguments object. The
	    // only additional allocation required is the completion record, which
	    // has a stable shape and so hopefully should be cheap to allocate.

	    function tryCatch(fn, obj, arg) {
	      try {
	        return {
	          type: "normal",
	          arg: fn.call(obj, arg)
	        };
	      } catch (err) {
	        return {
	          type: "throw",
	          arg: err
	        };
	      }
	    }

	    var GenStateSuspendedStart = "suspendedStart";
	    var GenStateSuspendedYield = "suspendedYield";
	    var GenStateExecuting = "executing";
	    var GenStateCompleted = "completed"; // Returning this object from the innerFn has the same effect as
	    // breaking out of the dispatch switch statement.

	    var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and
	    // .constructor.prototype properties for functions that return Generator
	    // objects. For full spec compliance, you may wish to configure your
	    // minifier not to mangle the names of these two functions.

	    function Generator() {}

	    function GeneratorFunction() {}

	    function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that
	    // don't natively support it.


	    var IteratorPrototype = {};

	    IteratorPrototype[iteratorSymbol] = function () {
	      return this;
	    };

	    var getProto = Object.getPrototypeOf;
	    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

	    if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
	      // This environment has a native %IteratorPrototype%; use it instead
	      // of the polyfill.
	      IteratorPrototype = NativeIteratorPrototype;
	    }

	    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
	    GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
	    GeneratorFunctionPrototype.constructor = GeneratorFunction;
	    GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = "GeneratorFunction"; // Helper for defining the .next, .throw, and .return methods of the
	    // Iterator interface in terms of a single ._invoke method.

	    function defineIteratorMethods(prototype) {
	      ["next", "throw", "return"].forEach(function (method) {
	        prototype[method] = function (arg) {
	          return this._invoke(method, arg);
	        };
	      });
	    }

	    exports.isGeneratorFunction = function (genFun) {
	      var ctor = typeof genFun === "function" && genFun.constructor;
	      return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
	      // do is to check its .name property.
	      (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
	    };

	    exports.mark = function (genFun) {
	      if (Object.setPrototypeOf) {
	        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
	      } else {
	        genFun.__proto__ = GeneratorFunctionPrototype;

	        if (!(toStringTagSymbol in genFun)) {
	          genFun[toStringTagSymbol] = "GeneratorFunction";
	        }
	      }

	      genFun.prototype = Object.create(Gp);
	      return genFun;
	    }; // Within the body of any async function, `await x` is transformed to
	    // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
	    // `hasOwn.call(value, "__await")` to determine if the yielded value is
	    // meant to be awaited.


	    exports.awrap = function (arg) {
	      return {
	        __await: arg
	      };
	    };

	    function AsyncIterator(generator) {
	      function invoke(method, arg, resolve, reject) {
	        var record = tryCatch(generator[method], generator, arg);

	        if (record.type === "throw") {
	          reject(record.arg);
	        } else {
	          var result = record.arg;
	          var value = result.value;

	          if (value && typeof value === "object" && hasOwn.call(value, "__await")) {
	            return Promise.resolve(value.__await).then(function (value) {
	              invoke("next", value, resolve, reject);
	            }, function (err) {
	              invoke("throw", err, resolve, reject);
	            });
	          }

	          return Promise.resolve(value).then(function (unwrapped) {
	            // When a yielded Promise is resolved, its final value becomes
	            // the .value of the Promise<{value,done}> result for the
	            // current iteration.
	            result.value = unwrapped;
	            resolve(result);
	          }, function (error) {
	            // If a rejected Promise was yielded, throw the rejection back
	            // into the async generator function so it can be handled there.
	            return invoke("throw", error, resolve, reject);
	          });
	        }
	      }

	      var previousPromise;

	      function enqueue(method, arg) {
	        function callInvokeWithMethodAndArg() {
	          return new Promise(function (resolve, reject) {
	            invoke(method, arg, resolve, reject);
	          });
	        }

	        return previousPromise = // If enqueue has been called before, then we want to wait until
	        // all previous Promises have been resolved before calling invoke,
	        // so that results are always delivered in the correct order. If
	        // enqueue has not been called before, then it is important to
	        // call invoke immediately, without waiting on a callback to fire,
	        // so that the async generator function has the opportunity to do
	        // any necessary setup in a predictable way. This predictability
	        // is why the Promise constructor synchronously invokes its
	        // executor callback, and why async functions synchronously
	        // execute code before the first await. Since we implement simple
	        // async functions in terms of async generators, it is especially
	        // important to get this right, even though it requires care.
	        previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later
	        // invocations of the iterator.
	        callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
	      } // Define the unified helper method that is used to implement .next,
	      // .throw, and .return (see defineIteratorMethods).


	      this._invoke = enqueue;
	    }

	    defineIteratorMethods(AsyncIterator.prototype);

	    AsyncIterator.prototype[asyncIteratorSymbol] = function () {
	      return this;
	    };

	    exports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of
	    // AsyncIterator objects; they just return a Promise for the value of
	    // the final result produced by the iterator.

	    exports.async = function (innerFn, outerFn, self, tryLocsList) {
	      var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList));
	      return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
	      : iter.next().then(function (result) {
	        return result.done ? result.value : iter.next();
	      });
	    };

	    function makeInvokeMethod(innerFn, self, context) {
	      var state = GenStateSuspendedStart;
	      return function invoke(method, arg) {
	        if (state === GenStateExecuting) {
	          throw new Error("Generator is already running");
	        }

	        if (state === GenStateCompleted) {
	          if (method === "throw") {
	            throw arg;
	          } // Be forgiving, per 25.3.3.3.3 of the spec:
	          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume


	          return doneResult();
	        }

	        context.method = method;
	        context.arg = arg;

	        while (true) {
	          var delegate = context.delegate;

	          if (delegate) {
	            var delegateResult = maybeInvokeDelegate(delegate, context);

	            if (delegateResult) {
	              if (delegateResult === ContinueSentinel) continue;
	              return delegateResult;
	            }
	          }

	          if (context.method === "next") {
	            // Setting context._sent for legacy support of Babel's
	            // function.sent implementation.
	            context.sent = context._sent = context.arg;
	          } else if (context.method === "throw") {
	            if (state === GenStateSuspendedStart) {
	              state = GenStateCompleted;
	              throw context.arg;
	            }

	            context.dispatchException(context.arg);
	          } else if (context.method === "return") {
	            context.abrupt("return", context.arg);
	          }

	          state = GenStateExecuting;
	          var record = tryCatch(innerFn, self, context);

	          if (record.type === "normal") {
	            // If an exception is thrown from innerFn, we leave state ===
	            // GenStateExecuting and loop back for another invocation.
	            state = context.done ? GenStateCompleted : GenStateSuspendedYield;

	            if (record.arg === ContinueSentinel) {
	              continue;
	            }

	            return {
	              value: record.arg,
	              done: context.done
	            };
	          } else if (record.type === "throw") {
	            state = GenStateCompleted; // Dispatch the exception by looping back around to the
	            // context.dispatchException(context.arg) call above.

	            context.method = "throw";
	            context.arg = record.arg;
	          }
	        }
	      };
	    } // Call delegate.iterator[context.method](context.arg) and handle the
	    // result, either by returning a { value, done } result from the
	    // delegate iterator, or by modifying context.method and context.arg,
	    // setting context.delegate to null, and returning the ContinueSentinel.


	    function maybeInvokeDelegate(delegate, context) {
	      var method = delegate.iterator[context.method];

	      if (method === undefined$1) {
	        // A .throw or .return when the delegate iterator has no .throw
	        // method always terminates the yield* loop.
	        context.delegate = null;

	        if (context.method === "throw") {
	          // Note: ["return"] must be used for ES3 parsing compatibility.
	          if (delegate.iterator["return"]) {
	            // If the delegate iterator has a return method, give it a
	            // chance to clean up.
	            context.method = "return";
	            context.arg = undefined$1;
	            maybeInvokeDelegate(delegate, context);

	            if (context.method === "throw") {
	              // If maybeInvokeDelegate(context) changed context.method from
	              // "return" to "throw", let that override the TypeError below.
	              return ContinueSentinel;
	            }
	          }

	          context.method = "throw";
	          context.arg = new TypeError("The iterator does not provide a 'throw' method");
	        }

	        return ContinueSentinel;
	      }

	      var record = tryCatch(method, delegate.iterator, context.arg);

	      if (record.type === "throw") {
	        context.method = "throw";
	        context.arg = record.arg;
	        context.delegate = null;
	        return ContinueSentinel;
	      }

	      var info = record.arg;

	      if (!info) {
	        context.method = "throw";
	        context.arg = new TypeError("iterator result is not an object");
	        context.delegate = null;
	        return ContinueSentinel;
	      }

	      if (info.done) {
	        // Assign the result of the finished delegate to the temporary
	        // variable specified by delegate.resultName (see delegateYield).
	        context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).

	        context.next = delegate.nextLoc; // If context.method was "throw" but the delegate handled the
	        // exception, let the outer generator proceed normally. If
	        // context.method was "next", forget context.arg since it has been
	        // "consumed" by the delegate iterator. If context.method was
	        // "return", allow the original .return call to continue in the
	        // outer generator.

	        if (context.method !== "return") {
	          context.method = "next";
	          context.arg = undefined$1;
	        }
	      } else {
	        // Re-yield the result returned by the delegate method.
	        return info;
	      } // The delegate iterator is finished, so forget it and continue with
	      // the outer generator.


	      context.delegate = null;
	      return ContinueSentinel;
	    } // Define Generator.prototype.{next,throw,return} in terms of the
	    // unified ._invoke helper method.


	    defineIteratorMethods(Gp);
	    Gp[toStringTagSymbol] = "Generator"; // A Generator should always return itself as the iterator object when the
	    // @@iterator function is called on it. Some browsers' implementations of the
	    // iterator prototype chain incorrectly implement this, causing the Generator
	    // object to not be returned from this call. This ensures that doesn't happen.
	    // See https://github.com/facebook/regenerator/issues/274 for more details.

	    Gp[iteratorSymbol] = function () {
	      return this;
	    };

	    Gp.toString = function () {
	      return "[object Generator]";
	    };

	    function pushTryEntry(locs) {
	      var entry = {
	        tryLoc: locs[0]
	      };

	      if (1 in locs) {
	        entry.catchLoc = locs[1];
	      }

	      if (2 in locs) {
	        entry.finallyLoc = locs[2];
	        entry.afterLoc = locs[3];
	      }

	      this.tryEntries.push(entry);
	    }

	    function resetTryEntry(entry) {
	      var record = entry.completion || {};
	      record.type = "normal";
	      delete record.arg;
	      entry.completion = record;
	    }

	    function Context(tryLocsList) {
	      // The root entry object (effectively a try statement without a catch
	      // or a finally block) gives us a place to store values thrown from
	      // locations where there is no enclosing try statement.
	      this.tryEntries = [{
	        tryLoc: "root"
	      }];
	      tryLocsList.forEach(pushTryEntry, this);
	      this.reset(true);
	    }

	    exports.keys = function (object) {
	      var keys = [];

	      for (var key in object) {
	        keys.push(key);
	      }

	      keys.reverse(); // Rather than returning an object with a next method, we keep
	      // things simple and return the next function itself.

	      return function next() {
	        while (keys.length) {
	          var key = keys.pop();

	          if (key in object) {
	            next.value = key;
	            next.done = false;
	            return next;
	          }
	        } // To avoid creating an additional object, we just hang the .value
	        // and .done properties off the next function object itself. This
	        // also ensures that the minifier will not anonymize the function.


	        next.done = true;
	        return next;
	      };
	    };

	    function values(iterable) {
	      if (iterable) {
	        var iteratorMethod = iterable[iteratorSymbol];

	        if (iteratorMethod) {
	          return iteratorMethod.call(iterable);
	        }

	        if (typeof iterable.next === "function") {
	          return iterable;
	        }

	        if (!isNaN(iterable.length)) {
	          var i = -1,
	              next = function next() {
	            while (++i < iterable.length) {
	              if (hasOwn.call(iterable, i)) {
	                next.value = iterable[i];
	                next.done = false;
	                return next;
	              }
	            }

	            next.value = undefined$1;
	            next.done = true;
	            return next;
	          };

	          return next.next = next;
	        }
	      } // Return an iterator with no values.


	      return {
	        next: doneResult
	      };
	    }

	    exports.values = values;

	    function doneResult() {
	      return {
	        value: undefined$1,
	        done: true
	      };
	    }

	    Context.prototype = {
	      constructor: Context,
	      reset: function (skipTempReset) {
	        this.prev = 0;
	        this.next = 0; // Resetting context._sent for legacy support of Babel's
	        // function.sent implementation.

	        this.sent = this._sent = undefined$1;
	        this.done = false;
	        this.delegate = null;
	        this.method = "next";
	        this.arg = undefined$1;
	        this.tryEntries.forEach(resetTryEntry);

	        if (!skipTempReset) {
	          for (var name in this) {
	            // Not sure about the optimal order of these conditions:
	            if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
	              this[name] = undefined$1;
	            }
	          }
	        }
	      },
	      stop: function () {
	        this.done = true;
	        var rootEntry = this.tryEntries[0];
	        var rootRecord = rootEntry.completion;

	        if (rootRecord.type === "throw") {
	          throw rootRecord.arg;
	        }

	        return this.rval;
	      },
	      dispatchException: function (exception) {
	        if (this.done) {
	          throw exception;
	        }

	        var context = this;

	        function handle(loc, caught) {
	          record.type = "throw";
	          record.arg = exception;
	          context.next = loc;

	          if (caught) {
	            // If the dispatched exception was caught by a catch block,
	            // then let that catch block handle the exception normally.
	            context.method = "next";
	            context.arg = undefined$1;
	          }

	          return !!caught;
	        }

	        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	          var entry = this.tryEntries[i];
	          var record = entry.completion;

	          if (entry.tryLoc === "root") {
	            // Exception thrown outside of any try block that could handle
	            // it, so set the completion value of the entire function to
	            // throw the exception.
	            return handle("end");
	          }

	          if (entry.tryLoc <= this.prev) {
	            var hasCatch = hasOwn.call(entry, "catchLoc");
	            var hasFinally = hasOwn.call(entry, "finallyLoc");

	            if (hasCatch && hasFinally) {
	              if (this.prev < entry.catchLoc) {
	                return handle(entry.catchLoc, true);
	              } else if (this.prev < entry.finallyLoc) {
	                return handle(entry.finallyLoc);
	              }
	            } else if (hasCatch) {
	              if (this.prev < entry.catchLoc) {
	                return handle(entry.catchLoc, true);
	              }
	            } else if (hasFinally) {
	              if (this.prev < entry.finallyLoc) {
	                return handle(entry.finallyLoc);
	              }
	            } else {
	              throw new Error("try statement without catch or finally");
	            }
	          }
	        }
	      },
	      abrupt: function (type, arg) {
	        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	          var entry = this.tryEntries[i];

	          if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
	            var finallyEntry = entry;
	            break;
	          }
	        }

	        if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
	          // Ignore the finally entry if control is not jumping to a
	          // location outside the try/catch block.
	          finallyEntry = null;
	        }

	        var record = finallyEntry ? finallyEntry.completion : {};
	        record.type = type;
	        record.arg = arg;

	        if (finallyEntry) {
	          this.method = "next";
	          this.next = finallyEntry.finallyLoc;
	          return ContinueSentinel;
	        }

	        return this.complete(record);
	      },
	      complete: function (record, afterLoc) {
	        if (record.type === "throw") {
	          throw record.arg;
	        }

	        if (record.type === "break" || record.type === "continue") {
	          this.next = record.arg;
	        } else if (record.type === "return") {
	          this.rval = this.arg = record.arg;
	          this.method = "return";
	          this.next = "end";
	        } else if (record.type === "normal" && afterLoc) {
	          this.next = afterLoc;
	        }

	        return ContinueSentinel;
	      },
	      finish: function (finallyLoc) {
	        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	          var entry = this.tryEntries[i];

	          if (entry.finallyLoc === finallyLoc) {
	            this.complete(entry.completion, entry.afterLoc);
	            resetTryEntry(entry);
	            return ContinueSentinel;
	          }
	        }
	      },
	      "catch": function (tryLoc) {
	        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	          var entry = this.tryEntries[i];

	          if (entry.tryLoc === tryLoc) {
	            var record = entry.completion;

	            if (record.type === "throw") {
	              var thrown = record.arg;
	              resetTryEntry(entry);
	            }

	            return thrown;
	          }
	        } // The context.catch method must only be called with a location
	        // argument that corresponds to a known catch block.


	        throw new Error("illegal catch attempt");
	      },
	      delegateYield: function (iterable, resultName, nextLoc) {
	        this.delegate = {
	          iterator: values(iterable),
	          resultName: resultName,
	          nextLoc: nextLoc
	        };

	        if (this.method === "next") {
	          // Deliberately forget the last sent value so that we don't
	          // accidentally pass it on to the delegate.
	          this.arg = undefined$1;
	        }

	        return ContinueSentinel;
	      }
	    }; // Regardless of whether this script is executing as a CommonJS module
	    // or not, return the runtime object so that we can declare the variable
	    // regeneratorRuntime in the outer scope, which allows this module to be
	    // injected easily by `bin/regenerator --include-runtime script.js`.

	    return exports;
	  }( // If this script is executing as a CommonJS module, use module.exports
	  // as the regeneratorRuntime namespace. Otherwise create a new empty
	  // object. Either way, the resulting object will be used to initialize
	  // the regeneratorRuntime variable at the top of this file.
	   module.exports );

	  try {
	    regeneratorRuntime = runtime;
	  } catch (accidentalStrictMode) {
	    // This module should not be running in strict mode, so the above
	    // assignment should always work unless something is misconfigured. Just
	    // in case runtime.js accidentally runs in strict mode, we can escape
	    // strict mode using a global Function call. This could conceivably fail
	    // if a Content Security Policy forbids using Function, but in that case
	    // the proper solution is to fix the accidental strict mode problem. If
	    // you've misconfigured your bundler to force strict mode and applied a
	    // CSP to forbid Function, and you're not willing to fix either of those
	    // problems, please detail your unique predicament in a GitHub issue.
	    Function("r", "regeneratorRuntime = r")(runtime);
	  }
	});

	var fetch_umd = createCommonjsModule(function (module, exports) {
	  (function (global, factory) {
	     factory(exports) ;
	  })(commonjsGlobal, function (exports) {

	    var support = {
	      searchParams: 'URLSearchParams' in self,
	      iterable: 'Symbol' in self && 'iterator' in Symbol,
	      blob: 'FileReader' in self && 'Blob' in self && function () {
	        try {
	          new Blob();
	          return true;
	        } catch (e) {
	          return false;
	        }
	      }(),
	      formData: 'FormData' in self,
	      arrayBuffer: 'ArrayBuffer' in self
	    };

	    function isDataView(obj) {
	      return obj && DataView.prototype.isPrototypeOf(obj);
	    }

	    if (support.arrayBuffer) {
	      var viewClasses = ['[object Int8Array]', '[object Uint8Array]', '[object Uint8ClampedArray]', '[object Int16Array]', '[object Uint16Array]', '[object Int32Array]', '[object Uint32Array]', '[object Float32Array]', '[object Float64Array]'];

	      var isArrayBufferView = ArrayBuffer.isView || function (obj) {
	        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
	      };
	    }

	    function normalizeName(name) {
	      if (typeof name !== 'string') {
	        name = String(name);
	      }

	      if (/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(name)) {
	        throw new TypeError('Invalid character in header field name');
	      }

	      return name.toLowerCase();
	    }

	    function normalizeValue(value) {
	      if (typeof value !== 'string') {
	        value = String(value);
	      }

	      return value;
	    } // Build a destructive iterator for the value list


	    function iteratorFor(items) {
	      var iterator = {
	        next: function () {
	          var value = items.shift();
	          return {
	            done: value === undefined,
	            value: value
	          };
	        }
	      };

	      if (support.iterable) {
	        iterator[Symbol.iterator] = function () {
	          return iterator;
	        };
	      }

	      return iterator;
	    }

	    function Headers(headers) {
	      this.map = {};

	      if (headers instanceof Headers) {
	        headers.forEach(function (value, name) {
	          this.append(name, value);
	        }, this);
	      } else if (Array.isArray(headers)) {
	        headers.forEach(function (header) {
	          this.append(header[0], header[1]);
	        }, this);
	      } else if (headers) {
	        Object.getOwnPropertyNames(headers).forEach(function (name) {
	          this.append(name, headers[name]);
	        }, this);
	      }
	    }

	    Headers.prototype.append = function (name, value) {
	      name = normalizeName(name);
	      value = normalizeValue(value);
	      var oldValue = this.map[name];
	      this.map[name] = oldValue ? oldValue + ', ' + value : value;
	    };

	    Headers.prototype['delete'] = function (name) {
	      delete this.map[normalizeName(name)];
	    };

	    Headers.prototype.get = function (name) {
	      name = normalizeName(name);
	      return this.has(name) ? this.map[name] : null;
	    };

	    Headers.prototype.has = function (name) {
	      return this.map.hasOwnProperty(normalizeName(name));
	    };

	    Headers.prototype.set = function (name, value) {
	      this.map[normalizeName(name)] = normalizeValue(value);
	    };

	    Headers.prototype.forEach = function (callback, thisArg) {
	      for (var name in this.map) {
	        if (this.map.hasOwnProperty(name)) {
	          callback.call(thisArg, this.map[name], name, this);
	        }
	      }
	    };

	    Headers.prototype.keys = function () {
	      var items = [];
	      this.forEach(function (value, name) {
	        items.push(name);
	      });
	      return iteratorFor(items);
	    };

	    Headers.prototype.values = function () {
	      var items = [];
	      this.forEach(function (value) {
	        items.push(value);
	      });
	      return iteratorFor(items);
	    };

	    Headers.prototype.entries = function () {
	      var items = [];
	      this.forEach(function (value, name) {
	        items.push([name, value]);
	      });
	      return iteratorFor(items);
	    };

	    if (support.iterable) {
	      Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
	    }

	    function consumed(body) {
	      if (body.bodyUsed) {
	        return Promise.reject(new TypeError('Already read'));
	      }

	      body.bodyUsed = true;
	    }

	    function fileReaderReady(reader) {
	      return new Promise(function (resolve, reject) {
	        reader.onload = function () {
	          resolve(reader.result);
	        };

	        reader.onerror = function () {
	          reject(reader.error);
	        };
	      });
	    }

	    function readBlobAsArrayBuffer(blob) {
	      var reader = new FileReader();
	      var promise = fileReaderReady(reader);
	      reader.readAsArrayBuffer(blob);
	      return promise;
	    }

	    function readBlobAsText(blob) {
	      var reader = new FileReader();
	      var promise = fileReaderReady(reader);
	      reader.readAsText(blob);
	      return promise;
	    }

	    function readArrayBufferAsText(buf) {
	      var view = new Uint8Array(buf);
	      var chars = new Array(view.length);

	      for (var i = 0; i < view.length; i++) {
	        chars[i] = String.fromCharCode(view[i]);
	      }

	      return chars.join('');
	    }

	    function bufferClone(buf) {
	      if (buf.slice) {
	        return buf.slice(0);
	      } else {
	        var view = new Uint8Array(buf.byteLength);
	        view.set(new Uint8Array(buf));
	        return view.buffer;
	      }
	    }

	    function Body() {
	      this.bodyUsed = false;

	      this._initBody = function (body) {
	        this._bodyInit = body;

	        if (!body) {
	          this._bodyText = '';
	        } else if (typeof body === 'string') {
	          this._bodyText = body;
	        } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
	          this._bodyBlob = body;
	        } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
	          this._bodyFormData = body;
	        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
	          this._bodyText = body.toString();
	        } else if (support.arrayBuffer && support.blob && isDataView(body)) {
	          this._bodyArrayBuffer = bufferClone(body.buffer); // IE 10-11 can't handle a DataView body.

	          this._bodyInit = new Blob([this._bodyArrayBuffer]);
	        } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
	          this._bodyArrayBuffer = bufferClone(body);
	        } else {
	          this._bodyText = body = Object.prototype.toString.call(body);
	        }

	        if (!this.headers.get('content-type')) {
	          if (typeof body === 'string') {
	            this.headers.set('content-type', 'text/plain;charset=UTF-8');
	          } else if (this._bodyBlob && this._bodyBlob.type) {
	            this.headers.set('content-type', this._bodyBlob.type);
	          } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
	            this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
	          }
	        }
	      };

	      if (support.blob) {
	        this.blob = function () {
	          var rejected = consumed(this);

	          if (rejected) {
	            return rejected;
	          }

	          if (this._bodyBlob) {
	            return Promise.resolve(this._bodyBlob);
	          } else if (this._bodyArrayBuffer) {
	            return Promise.resolve(new Blob([this._bodyArrayBuffer]));
	          } else if (this._bodyFormData) {
	            throw new Error('could not read FormData body as blob');
	          } else {
	            return Promise.resolve(new Blob([this._bodyText]));
	          }
	        };

	        this.arrayBuffer = function () {
	          if (this._bodyArrayBuffer) {
	            return consumed(this) || Promise.resolve(this._bodyArrayBuffer);
	          } else {
	            return this.blob().then(readBlobAsArrayBuffer);
	          }
	        };
	      }

	      this.text = function () {
	        var rejected = consumed(this);

	        if (rejected) {
	          return rejected;
	        }

	        if (this._bodyBlob) {
	          return readBlobAsText(this._bodyBlob);
	        } else if (this._bodyArrayBuffer) {
	          return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
	        } else if (this._bodyFormData) {
	          throw new Error('could not read FormData body as text');
	        } else {
	          return Promise.resolve(this._bodyText);
	        }
	      };

	      if (support.formData) {
	        this.formData = function () {
	          return this.text().then(decode);
	        };
	      }

	      this.json = function () {
	        return this.text().then(JSON.parse);
	      };

	      return this;
	    } // HTTP methods whose capitalization should be normalized


	    var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];

	    function normalizeMethod(method) {
	      var upcased = method.toUpperCase();
	      return methods.indexOf(upcased) > -1 ? upcased : method;
	    }

	    function Request(input, options) {
	      options = options || {};
	      var body = options.body;

	      if (input instanceof Request) {
	        if (input.bodyUsed) {
	          throw new TypeError('Already read');
	        }

	        this.url = input.url;
	        this.credentials = input.credentials;

	        if (!options.headers) {
	          this.headers = new Headers(input.headers);
	        }

	        this.method = input.method;
	        this.mode = input.mode;
	        this.signal = input.signal;

	        if (!body && input._bodyInit != null) {
	          body = input._bodyInit;
	          input.bodyUsed = true;
	        }
	      } else {
	        this.url = String(input);
	      }

	      this.credentials = options.credentials || this.credentials || 'same-origin';

	      if (options.headers || !this.headers) {
	        this.headers = new Headers(options.headers);
	      }

	      this.method = normalizeMethod(options.method || this.method || 'GET');
	      this.mode = options.mode || this.mode || null;
	      this.signal = options.signal || this.signal;
	      this.referrer = null;

	      if ((this.method === 'GET' || this.method === 'HEAD') && body) {
	        throw new TypeError('Body not allowed for GET or HEAD requests');
	      }

	      this._initBody(body);
	    }

	    Request.prototype.clone = function () {
	      return new Request(this, {
	        body: this._bodyInit
	      });
	    };

	    function decode(body) {
	      var form = new FormData();
	      body.trim().split('&').forEach(function (bytes) {
	        if (bytes) {
	          var split = bytes.split('=');
	          var name = split.shift().replace(/\+/g, ' ');
	          var value = split.join('=').replace(/\+/g, ' ');
	          form.append(decodeURIComponent(name), decodeURIComponent(value));
	        }
	      });
	      return form;
	    }

	    function parseHeaders(rawHeaders) {
	      var headers = new Headers(); // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
	      // https://tools.ietf.org/html/rfc7230#section-3.2

	      var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ');
	      preProcessedHeaders.split(/\r?\n/).forEach(function (line) {
	        var parts = line.split(':');
	        var key = parts.shift().trim();

	        if (key) {
	          var value = parts.join(':').trim();
	          headers.append(key, value);
	        }
	      });
	      return headers;
	    }

	    Body.call(Request.prototype);

	    function Response(bodyInit, options) {
	      if (!options) {
	        options = {};
	      }

	      this.type = 'default';
	      this.status = options.status === undefined ? 200 : options.status;
	      this.ok = this.status >= 200 && this.status < 300;
	      this.statusText = 'statusText' in options ? options.statusText : 'OK';
	      this.headers = new Headers(options.headers);
	      this.url = options.url || '';

	      this._initBody(bodyInit);
	    }

	    Body.call(Response.prototype);

	    Response.prototype.clone = function () {
	      return new Response(this._bodyInit, {
	        status: this.status,
	        statusText: this.statusText,
	        headers: new Headers(this.headers),
	        url: this.url
	      });
	    };

	    Response.error = function () {
	      var response = new Response(null, {
	        status: 0,
	        statusText: ''
	      });
	      response.type = 'error';
	      return response;
	    };

	    var redirectStatuses = [301, 302, 303, 307, 308];

	    Response.redirect = function (url, status) {
	      if (redirectStatuses.indexOf(status) === -1) {
	        throw new RangeError('Invalid status code');
	      }

	      return new Response(null, {
	        status: status,
	        headers: {
	          location: url
	        }
	      });
	    };

	    exports.DOMException = self.DOMException;

	    try {
	      new exports.DOMException();
	    } catch (err) {
	      exports.DOMException = function (message, name) {
	        this.message = message;
	        this.name = name;
	        var error = Error(message);
	        this.stack = error.stack;
	      };

	      exports.DOMException.prototype = Object.create(Error.prototype);
	      exports.DOMException.prototype.constructor = exports.DOMException;
	    }

	    function fetch(input, init) {
	      return new Promise(function (resolve, reject) {
	        var request = new Request(input, init);

	        if (request.signal && request.signal.aborted) {
	          return reject(new exports.DOMException('Aborted', 'AbortError'));
	        }

	        var xhr = new XMLHttpRequest();

	        function abortXhr() {
	          xhr.abort();
	        }

	        xhr.onload = function () {
	          var options = {
	            status: xhr.status,
	            statusText: xhr.statusText,
	            headers: parseHeaders(xhr.getAllResponseHeaders() || '')
	          };
	          options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
	          var body = 'response' in xhr ? xhr.response : xhr.responseText;
	          resolve(new Response(body, options));
	        };

	        xhr.onerror = function () {
	          reject(new TypeError('Network request failed'));
	        };

	        xhr.ontimeout = function () {
	          reject(new TypeError('Network request failed'));
	        };

	        xhr.onabort = function () {
	          reject(new exports.DOMException('Aborted', 'AbortError'));
	        };

	        xhr.open(request.method, request.url, true);

	        if (request.credentials === 'include') {
	          xhr.withCredentials = true;
	        } else if (request.credentials === 'omit') {
	          xhr.withCredentials = false;
	        }

	        if ('responseType' in xhr && support.blob) {
	          xhr.responseType = 'blob';
	        }

	        request.headers.forEach(function (value, name) {
	          xhr.setRequestHeader(name, value);
	        });

	        if (request.signal) {
	          request.signal.addEventListener('abort', abortXhr);

	          xhr.onreadystatechange = function () {
	            // DONE (success or failure)
	            if (xhr.readyState === 4) {
	              request.signal.removeEventListener('abort', abortXhr);
	            }
	          };
	        }

	        xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
	      });
	    }

	    fetch.polyfill = true;

	    if (!self.fetch) {
	      self.fetch = fetch;
	      self.Headers = Headers;
	      self.Request = Request;
	      self.Response = Response;
	    }

	    exports.Headers = Headers;
	    exports.Request = Request;
	    exports.Response = Response;
	    exports.fetch = fetch;
	    Object.defineProperty(exports, '__esModule', {
	      value: true
	    });
	  });
	});
	unwrapExports(fetch_umd);

})));
//# sourceMappingURL=bundle.js.map
