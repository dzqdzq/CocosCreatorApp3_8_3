'use strict';

/**
 * 编码一个 Error
 * @param {Error} error 
 * @param {Number} ignore 忽略 error 的调用栈行数
 */
function encode(error, ignore = 0) {
    // 调用栈第一行是 message
    ignore++;

    // 如果传入非错误数据，责生成 error 并将忽略计数加 1
    if (!(error instanceof Error)) {
        error = new Error(error);
        ignore++;
    }

    let message = error.message;
    let stacks = error.stack.split(/\r\n|\n\r|\r|\n/);
    for (let i=0; i<stacks.length; i++) {
        stacks[i] = stacks[i].trim();
    }
    stacks.splice(0, ignore);

    return {
        message,
        stacks,
    }
}

/**
 * 解码一个 Error
 * @param {Object} object 
 * @param {String} type
 */
function decode(object, type = 'error') {
    let error;
    if (type === 'error') {
        error = new Error(object.message);
        error.stack = `Error: ${object.message}`;
        object.stacks.forEach((text) => {
            error.stack += '\n';
            error.stack += `    ${text}`;
        });
    } else {
        error = object.message;
        object.stacks.forEach((text) => {
            error += '\n';
            error += `    ${text}`;
        });
    }
    return error;
}

exports.encode = encode;
exports.decode = decode;
