"use strict";const ipc=require("@base/electron-base-ipc"),{ipcRenderer:ipcRenderer}=require("electron"),{EventEmitter:EventEmitter}=require("events"),pkg=require("../package.json"),ipcFlag=`${pkg.name}@${pkg.version}`;let _action="refresh";ipcRenderer.on(`${ipcFlag}:close`,()=>{_action="close"});class WindowManager extends EventEmitter{constructor(){super(),this.uuid=window.location.hash.substr(1),this.userData=ipc.sendSync(`${ipcFlag}:query-user-data`,this.uuid)}setMinSize(e,i){ipc.send(`${ipcFlag}:set-min-size`,e,i)}sync(){ipc.send(`${ipcFlag}:sync-user-date`,this.uuid,this.userData)}close(){_action="close",window.close()}}module.exports=new WindowManager,console.time("ask-win"),ipc.send(`${ipcFlag}:ask-win`).callback((e,i)=>{if(console.timeEnd("ask-win"),e||!i)return;let s=!1;window.addEventListener("beforeunload",e=>{let i=module.exports._events.close;if(s||!i)return ipc.send(`${ipcFlag}:sync-closed`,module.exports.uuid,!0),!0;e.returnValue=!0,Array.isArray(i)||(i=[i]),process.nextTick(async()=>{for(let e=0;e<i.length;e++){if(!1===await i[e]())return _action="refresh",void ipc.send(`${ipcFlag}:sync-closed`,module.exports.uuid,!1)}s=!0,"refresh"===_action?window.location.reload():(ipc.send(`${ipcFlag}:sync-closed`,module.exports.uuid,!0),window.close())})})}).timeout(3e3);