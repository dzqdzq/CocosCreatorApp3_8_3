"use stirct";const ipc=require("@base/electron-base-ipc"),utils=require("./utils"),{EventEmitter:EventEmitter}=require("events"),pkg=require("../package.json"),ipcFlag=`${pkg.name}@${pkg.version}`;class Logger extends EventEmitter{constructor(){super(),this._logHandler=null,this._level=4}setLogHandler(e){this._logHandler=e}setLevel(e){("number"!=typeof e||isNaN(e))&&(e=4),this._level=e}record(e,r){const o=utils.formatMessage(e,r);this._logHandler&&this._logHandler(o),ipc.send(`${ipcFlag}:record`,o)}query(e){return new Promise((r,o)=>{ipc.send(`${ipcFlag}:query`,e).callback((e,n)=>{if(e)return o(e);r(n)})})}clear(e){ipc.send(`${ipcFlag}:clear`,e)}}let logger=module.exports=new Logger;const vendor={log:console.log.bind(this),info:console.info.bind(this),warn:console.warn.bind(this),error:console.error.bind(this)},electronReg=/^\(node:\d+\) electron:/;console.log=function(e,...r){electronReg.test(e)?vendor.warn(e,...r):(logger._level>3&&logger.record("log",utils.format(e,...r)),vendor.log(e,...r))},console.info=function(e,...r){electronReg.test(e)?vendor.warn(e,...r):(logger._level>2&&logger.record("info",utils.format(e,...r)),vendor.info(e,...r))},console.warn=function(e,...r){electronReg.test(e)?vendor.warn(e,...r):(logger._level>1&&logger.record("warn",utils.format(e,...r)),vendor.warn(e,...r))},console.error=function(e,...r){electronReg.test(e)?vendor.warn(e,...r):(logger._level>0&&logger.record("error",utils.format(e,...r)),vendor.error(e,...r))},ipc.on(`${ipcFlag}:record`,(e,r)=>{try{logger.emit("record",r)}catch(e){vendor.error(e)}}),ipc.on(`${ipcFlag}:clear`,e=>{try{logger.emit("clear")}catch(e){vendor.error(e)}});