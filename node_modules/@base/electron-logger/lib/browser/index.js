"use stirct";const ipc=require("@base/electron-base-ipc"),utils=require("../utils"),{EventEmitter:EventEmitter}=require("events"),pkg=require("../../package.json"),ipcFlag=`${pkg.name}@${pkg.version}`;class Logger extends EventEmitter{constructor(){super(),this._logHandler=null,this._prefix={log:"",stack:""},this._level=4,this._logs=[]}setLogHandler(e){this._logHandler=e}setLevel(e){("number"!=typeof e||isNaN(e))&&(e=3),this._level=e}record(e,r){let o=utils.formatMessage(e,r);if(!this._logHandler||!1!==this._logHandler(o)){this._logs.push(o);try{this.emit("record",o)}catch(e){vendor.error(e)}ipc.broadcast(`${ipcFlag}:record`,o)}}query(e){return this._logs}clear(e){if(e&&e instanceof RegExp)for(let r=0;r<this._logs.length;r++)e.test(this._logs[r].message)&&this._logs.splice(r--,1);else this._logs=[];try{this.emit("clear")}catch(e){vendor.error(e)}ipc.broadcast(`${ipcFlag}:clear`)}}let logger=module.exports=new Logger;const vendor={log:console.log.bind(console),info:console.info.bind(console),warn:console.warn.bind(console),error:console.error.bind(console)},electronReg=/^(\(node:\d+\) electron:)/;console.log=function(e,...r){electronReg.test(e)?vendor.warn(e,...r):(logger._level>2&&logger.record("log",utils.format(e,...r)),vendor.log(e,...r))},console.info=function(e,...r){electronReg.test(e)?vendor.warn(e,...r):(logger._level>2&&logger.record("info",utils.format(e,...r)),vendor.info(e,...r))},console.warn=function(e,...r){electronReg.test(e)?vendor.warn(e,...r):(logger._level>1&&logger.record("warn",utils.format(e,...r)),vendor.warn(e,...r))},console.error=function(e,...r){electronReg.test(e)?vendor.warn(e,...r):(logger._level>0&&logger.record("error",utils.format(e,...r)),vendor.error(e,...r))},ipc.on(`${ipcFlag}:record`,(e,r)=>{logger._logs.push(r),logger.emit("record",r),ipc.broadcast(`${ipcFlag}:record`,r);try{vendor[r.type]&&vendor[r.type](r.message)}catch(e){vendor.warn(e)}}),ipc.on(`${ipcFlag}:query`,(e,r)=>{const o=logger.query(r);return e.reply(null,o),o}),ipc.on(`${ipcFlag}:clear`,e=>logger.clear());