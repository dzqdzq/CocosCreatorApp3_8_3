"use strict";var __createBinding=this&&this.__createBinding||(Object.create?function(e,n,r,t){void 0===t&&(t=r);var s=Object.getOwnPropertyDescriptor(n,r);s&&("get"in s?n.__esModule:!s.writable&&!s.configurable)||(s={enumerable:!0,get:function(){return n[r]}}),Object.defineProperty(e,t,s)}:function(e,n,r,t){void 0===t&&(t=r),e[t]=n[r]}),__setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(e,n){Object.defineProperty(e,"default",{enumerable:!0,value:n})}:function(e,n){e.default=n}),__importStar=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&__createBinding(n,e,r);return __setModuleDefault(n,e),n};Object.defineProperty(exports,"__esModule",{value:!0}),exports.sendToContent=exports.sendToChannel=exports.unregisterChannel=exports.registerChannel=exports.removeAllListeners=exports.removeListener=exports.once=exports.on=exports.sendSync=exports.send=exports.emit=exports._events=void 0;const events_1=require("events"),electron_1=require("electron"),sender_1=require("./sender"),event_1=require("./event"),channelPool=__importStar(require("v-electron-channel")),utils_1=require("./utils"),pkg=require("../package.json"),ipcFlag=`${pkg.name}@${pkg.version}`,eventBus=new events_1.EventEmitter;function emit(e,...n){let r=eventBus._events[e];return r||(r=[]),Array.isArray(r)||(r=[r]),new sender_1.EventSender(r,{message:e,arguments:n})}function send(e,...n){return new sender_1.MainSender({message:e,arguments:n})}function sendSync(e,...n){let r={message:e,arguments:n},t=electron_1.ipcRenderer.sendSync(`${ipcFlag}:sendSync`,r);if(t){if(t.error)throw(0,event_1.deserializeError)(t.error);return t.value}return null}function on(e,n){return eventBus.on(e,n)}function once(e,n){return eventBus.once(e,n)}function removeListener(e,n){return eventBus.removeListener(e,n)}function removeAllListeners(e){return eventBus.removeAllListeners(e)}function registerChannel(e){channelPool.register(`${ipcFlag}:${e}`)}function unregisterChannel(e){channelPool.clear(`${ipcFlag}:${e}`)}function sendToChannel(e,n,...r){const t=channelPool.query(`${ipcFlag}:${e}`);if(!t)throw new Error(`Channel does not exist: ${e}`);const s=t[t.length-1];return new sender_1.WindowIDSender(s,{message:n,arguments:r})}function sendToContent(e,n,...r){return new sender_1.WindowIDSender(e,{message:n,arguments:r})}exports._events=eventBus._events,exports.emit=emit,exports.send=send,exports.sendSync=sendSync,exports.on=on,exports.once=once,exports.removeListener=removeListener,exports.removeAllListeners=removeAllListeners,exports.registerChannel=registerChannel,exports.unregisterChannel=unregisterChannel,exports.sendToChannel=sendToChannel,exports.sendToContent=sendToContent,electron_1.ipcRenderer.on(`${ipcFlag}:broadcast`,(e,n)=>{let r=new event_1.MessageEvent("browser");r.sender=e.sender,eventBus.emit(n.message,r,...n.arguments)}),electron_1.ipcRenderer.on(`${ipcFlag}:send-reply`,(e,n,r,t)=>{let s=sender_1.MainSender.query(n);if(s){if(clearTimeout(s._timer),s._callback){const e=s.options.original?t:(0,utils_1.decodeArgs)(t);s._callback((0,event_1.deserializeError)(r),...e)}sender_1.MainSender.remove(n)}else r&&console.warn(r)}),electron_1.ipcRenderer.on(`${ipcFlag}:send`,(e,n)=>{let r=new event_1.MessageEvent("renderer");r.sender=e.sender,n.needCallback&&(r.needCallback=!0,r.reply=function(r,...t){!r||r instanceof Error||console.warn(`${n.message} - The first parameter of event.reply must be 'Error'`);const s=n.original?t:(0,utils_1.encodeArgs)(t);e.senderId>0?e.sender.sendTo(e.senderId,`${ipcFlag}:send-reply`,n.cid,(0,event_1.serializeError)(r),s):e.sender.send(`${ipcFlag}:send-reply`,n.cid,(0,event_1.serializeError)(r),s)}),eventBus.emit(n.message,r,...n.arguments)});