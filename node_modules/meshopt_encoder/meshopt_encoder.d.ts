declare module 'meshopt_encoder' {
    const encoder: {
        init: () => Promise<void>;
        utils: {
            createHeapArray: (buffer: ArrayBuffer) => Uint8Array;
            freeHeapArray: (array: ArrayBuffer) => void;
            allocateHeapArrayBuffer: (byteLength: number) => ArrayBuffer;
        };
        optimizer: {
            optimizeVertexCache: (destBuffer: ArrayBuffer, indexBuffer: ArrayBuffer, indexCount: number, vertexCount: number) => void;
            optimizeVertexFetch: (destBuffer: ArrayBuffer, indexBuffer: ArrayBuffer, indexCount: number, vertexBuffer: ArrayBuffer, vertexCount: number, vertexSize: number) => number;
            optimizeOverdraw: (destBuffer: ArrayBuffer, indexBuffer: ArrayBuffer, indexCount: number, vertexBuffer: ArrayBuffer, vertexCount: number, vertexSize: number, threshold: number) => ArrayBuffer;
            optimizeVertexFetchRemap: (destBuffer: ArrayBuffer, indexBuffer: ArrayBuffer, indexCount: number, vertexCount: number) => number;
            optimizeRemapIndex: (destBuffer: ArrayBuffer, indexBuffer: ArrayBuffer, indexCount: number, remapBuffer: ArrayBuffer) => void;
            optimizeRemapVertex: (destBuffer: ArrayBuffer, vertexBuffer: ArrayBuffer, vertexCount: number, vertexSize: number, remapBuffer: ArrayBuffer) => void;
            encodeIndexBufferBound: (indexCount: number, vertexCount: number) => number;
            encodeIndexBuffer: (destBuffer: ArrayBuffer, destIndexCount: number, indexBuffer: ArrayBuffer, indexCount: number) => number;
            encodeVertexBufferBound: (vertexCount: number, vertexSize: number) => number;
            encodeVertexBuffer: (destBuffer: ArrayBuffer, destVertexCount: number, vertexBuffer: ArrayBuffer, vertexCount: number, vertexSize: number) => number;
            simplifyWithAttributes: () => void;
            simplify: (destBuffer: ArrayBuffer, indexBuffer: ArrayBuffer, indexCount: number, vertexBuffer: ArrayBuffer, vertexCount: number, vertexSize: number, targetIndexCount: number, targetError: number, options: number, result_error: number) => number;
            simplifySloppy: () => void;
            simplifyPoints: (destBuffer: ArrayBuffer, vertexBuffer: ArrayBuffer, vertexCount: number, vertexSize: number, targetCount: number) => number;
            buildMeshLetsBound: (indexCount: number, maxVertices: number, maxTriangles: number) => number;
            buildMeshLetsScan: (meshlet: ArrayBuffer, meshletVertices: ArrayBuffer, meshletTriangles: ArrayBuffer, indexBuffer: ArrayBuffer, indexCount: number, vertexCount: number, maxVertices: number, maxTriangles: number) => number;
            buildMeshLets: (meshlet: ArrayBuffer, meshletVertices: ArrayBuffer, meshletTriangles: ArrayBuffer, indexBuffer: ArrayBuffer, indexCount: number, vertexPositions: ArrayBuffer, vertexCount: number, vertexSize: number, maxVertices: number, maxTriangles: number, coneWeight: number) => number;
            computeMeshLetsBound: (meshletVertices: ArrayBuffer, meshletTriangles: ArrayBuffer, meshletCount: number, vertexBuffer: ArrayBuffer, vertexCounts: number, vertexSize: number) => MeshLet;
            quantizeMesh: (destBuffer: ArrayBuffer, destSize: number, vertexBuffer: ArrayBuffer, vertexCount:number, vertexSize:number, attributes:ArrayBuffer, attributeCount: number) => void;
        };
    };
    export = encoder;
}