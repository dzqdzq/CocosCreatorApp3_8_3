'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = require("assert");
const event_1 = require("../lib/event");
describe(`EventEmitter`, function () {
    const emitter = new event_1.EventEmitter();
    it('addListener / emit', function () {
        let num = 0;
        emitter.emit('test-a', '1', 1);
        function listener(a, b) {
            num++;
            return false;
        }
        emitter.addListener('test-a', listener);
        emitter.emit('test-a', '1', 1);
        (0, assert_1.equal)(num, 1);
    });
    it('addListener / removeListener', function () {
        let num = 0;
        emitter.emit('test-a', '1', 1);
        function listener(a, b) {
            num++;
            return false;
        }
        emitter.addListener('test-a', listener);
        emitter.removeListener('test-a', listener);
        emitter.emit('test-a', '1', 1);
        (0, assert_1.equal)(num, 0);
    });
    it('addListener / clear', function () {
        let num = 0;
        emitter.emit('test-a', '1', 1);
        function listener(a, b) {
            num++;
            return false;
        }
        emitter.addListener('test-a', listener);
        emitter.addListener('test-b', listener);
        emitter.clear('test-a');
        emitter.emit('test-a', '1', 1);
        emitter.emit('test-b', '1', 1);
        (0, assert_1.equal)(num, 1);
    });
    it('addListener / clear 2', function () {
        let num = 0;
        emitter.emit('test-a', '1', 1);
        function listener(a, b) {
            num++;
            return false;
        }
        emitter.addListener('test-a', listener);
        emitter.addListener('test-b', listener);
        emitter.clear();
        emitter.emit('test-a', '1', 1);
        emitter.emit('test-b', '1', 1);
        (0, assert_1.equal)(num, 0);
    });
});
