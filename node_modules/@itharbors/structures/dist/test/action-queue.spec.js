'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = require("assert");
const action_queue_1 = require("../lib/action-queue");
describe(`ActionQueue`, function () {
    describe('base', () => {
        it('基础信息', () => {
            const execArray = [];
            class TestAction extends action_queue_1.Action {
                exec(params) {
                    execArray.push(this.detail.id);
                }
                revertAction() {
                    const uid = this.detail.id + '\'';
                    return this.target || new TestAction({ id: uid, });
                }
            }
            const manager = new action_queue_1.ActionQueue({});
            (0, assert_1.equal)(manager.length, 0);
            manager.exec(new TestAction({ id: `a`, }));
            (0, assert_1.equal)(manager.length, 1);
            manager.exec(new TestAction({ id: `b`, }));
            (0, assert_1.equal)(manager.length, 2);
            (0, assert_1.deepEqual)(manager.queue.map(action => action.detail.id), [`a`, `b`]);
        });
    });
    describe('undo / redo', () => {
        const TestList = [
            {
                source: [],
                action: [`undo`],
                result: [],
            },
            {
                source: [],
                action: [`redo`],
                result: [],
            },
            {
                source: [`a`],
                action: [`undo`],
                result: [`a`, `a'`],
            },
            {
                source: [`a`],
                action: [`redo`],
                result: [`a`],
            },
            {
                source: [`a`, `b`],
                action: [`undo`, `undo`],
                result: [`a`, `b`, `b'`, `a'`],
            },
            {
                source: [`a`, `b`],
                action: [`undo`, `redo`],
                result: [`a`, `b`, `b'`, `b`],
            },
            {
                source: [`a`, `b`],
                action: [`undo`, `redo`, `redo`],
                result: [`a`, `b`, `b'`, `b`],
            },
            {
                source: [`a`, `b`],
                action: [`undo`, `redo`, `undo`],
                result: [`a`, `b`, `b'`, `b`, `b'`],
            },
            {
                source: [`a`, `b`],
                action: [`undo`, `undo`, `redo`, `redo`],
                result: [`a`, `b`, `b'`, `a'`, `a`, `b`],
            },
            {
                source: [`a`, `b`],
                action: [`undo`, `undo`, `redo`, `undo`, `redo`],
                result: [`a`, `b`, `b'`, `a'`, `a`, `a'`, `a`],
            },
            {
                source: [`a`, `b`],
                action: [`undo`, `undo`, `redo`, `undo`, `redo`, `redo`],
                result: [`a`, `b`, `b'`, `a'`, `a`, `a'`, `a`],
            },
            {
                source: [`a`, `b`],
                action: [`undo`, `undo`, `redo`, `undo`, `undo`],
                result: [`a`, `b`, `b'`, `a'`, `a`, `a'`],
            },
        ];
        TestList.forEach((item) => {
            it(`${JSON.stringify(item.source)} -> ${item.action + ''} -> ${JSON.stringify(item.result)}`, () => {
                const execArray = [];
                class TestAction extends action_queue_1.Action {
                    exec(params) {
                        execArray.push(this.detail.id);
                    }
                    revertAction() {
                        const uid = this.detail.id + '\'';
                        return this.target || new TestAction({ id: uid, });
                    }
                }
                const manager = new action_queue_1.ActionQueue({});
                item.source.forEach((id) => {
                    manager.exec(new TestAction({ id, }));
                });
                item.action.forEach((action) => {
                    manager[action]();
                });
                const idArray = manager.queue.map(action => action.detail.id);
                (0, assert_1.deepEqual)(idArray, item.result);
                (0, assert_1.deepEqual)(execArray, item.result);
            });
        });
    });
    describe('ActionList', () => {
        const TestList = [
            {
                source: [],
                action: [`undo`],
                result: [],
            },
            {
                source: [],
                action: [`redo`],
                result: [],
            },
            {
                source: [[`a`, `b`]],
                action: [],
                result: [`a`, `b`],
            },
            {
                source: [[`a`, `b`]],
                action: [`undo`],
                result: [`a`, `b`, `b'`, `a'`],
            },
            {
                source: [[`a`, `b`]],
                action: [`undo`, `redo`],
                result: [`a`, `b`, `b'`, `a'`, `a`, `b`],
            },
            {
                source: [[`a`, `b`], [`c`, `d`]],
                action: [],
                result: [`a`, `b`, `c`, `d`],
            },
            {
                source: [[`a`, `b`], [`c`, `d`]],
                action: [`undo`, `undo`, `redo`],
                result: [`a`, `b`, `c`, `d`, `d'`, `c'`, `b'`, `a'`, `a`, `b`],
            },
        ];
        TestList.forEach((item) => {
            it(`${JSON.stringify(item.source)} -> ${item.action + ''} -> ${JSON.stringify(item.result)}`, () => __awaiter(this, void 0, void 0, function* () {
                const execArray = [];
                class TestAction extends action_queue_1.Action {
                    exec(params) {
                        execArray.push(this.detail.id);
                    }
                    revertAction() {
                        const uid = this.detail.id + '\'';
                        return this.target || new TestAction({ id: uid, });
                    }
                }
                const manager = new action_queue_1.ActionQueue({});
                for (let IDList of item.source) {
                    const action = new action_queue_1.ActionList({
                        queue: IDList.map(id => new TestAction({ id, })),
                    });
                    yield manager.exec(action);
                }
                for (let action of item.action) {
                    yield manager[action]();
                }
                (0, assert_1.deepEqual)(execArray, item.result);
            }));
        });
    });
});
