'use strict';
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = require("assert");
function step(name) {
    return __awaiter(this, void 0, void 0, function* () {
        const queue = yield Promise.resolve().then(() => __importStar(require('../index')));
        const Ctor = queue[name];
        describe(`Queue: ${name}`, function () {
            describe('default', () => {
                const queue = new Ctor();
                it('size', function () {
                    (0, assert_1.equal)(queue.size(), 0);
                });
                it('isEmpty', function () {
                    (0, assert_1.equal)(queue.isEmpty(), true);
                });
            });
            describe('enqueue', function () {
                const queue = new Ctor();
                it('push', function () {
                    queue.enqueue('a');
                    (0, assert_1.equal)(queue.size(), 1);
                    (0, assert_1.equal)(queue.isEmpty(), false);
                });
                it('push again', function () {
                    queue.enqueue('b');
                    (0, assert_1.equal)(queue.size(), 2);
                    (0, assert_1.equal)(queue.isEmpty(), false);
                });
            });
            describe('dequeue', function () {
                const queue = new Ctor();
                it('dequeue(empty)', () => {
                    (0, assert_1.equal)(queue.dequeue(), undefined);
                    (0, assert_1.equal)(queue.size(), 0);
                    (0, assert_1.equal)(queue.isEmpty(), true);
                });
                it('dequeue', () => {
                    queue.enqueue('a');
                    queue.enqueue('b');
                    (0, assert_1.equal)(queue.dequeue(), 'a');
                    (0, assert_1.equal)(queue.size(), 1);
                    (0, assert_1.equal)(queue.isEmpty(), false);
                });
                it('dequeue again', () => {
                    (0, assert_1.equal)(queue.dequeue(), 'b');
                    (0, assert_1.equal)(queue.size(), 0);
                    (0, assert_1.equal)(queue.isEmpty(), true);
                });
            });
            describe('peek', function () {
                const queue = new Ctor();
                it('peek(empty)', () => {
                    (0, assert_1.equal)(queue.peek(), undefined);
                    (0, assert_1.equal)(queue.size(), 0);
                    (0, assert_1.equal)(queue.isEmpty(), true);
                });
                it('peek', () => {
                    queue.enqueue('a');
                    queue.enqueue('b');
                    (0, assert_1.equal)(queue.peek(), 'a');
                    (0, assert_1.equal)(queue.size(), 2);
                    (0, assert_1.equal)(queue.isEmpty(), false);
                });
                it('peek again', () => {
                    (0, assert_1.equal)(queue.peek(), 'a');
                    (0, assert_1.equal)(queue.size(), 2);
                    (0, assert_1.equal)(queue.isEmpty(), false);
                });
            });
            describe('clear', function () {
                const queue = new Ctor();
                it('clear(empty)', () => {
                    queue.clear();
                    (0, assert_1.equal)(queue.size(), 0);
                    (0, assert_1.equal)(queue.isEmpty(), true);
                });
                it('clear', () => {
                    queue.enqueue('a');
                    queue.enqueue('b');
                    queue.clear();
                    (0, assert_1.equal)(queue.size(), 0);
                    (0, assert_1.equal)(queue.isEmpty(), true);
                });
                it('clear again', () => {
                    queue.clear();
                    (0, assert_1.equal)(queue.size(), 0);
                    (0, assert_1.equal)(queue.isEmpty(), true);
                });
            });
            it('性能测试', function () {
                const queueA = new Ctor();
                console.time('连续操作 10w 数据');
                for (let i = 0; i < 100000; i++) {
                    queueA.enqueue('1');
                    queueA.dequeue();
                }
                console.timeEnd('连续操作 10w 数据');
                const queueB = new Ctor();
                console.time('添加 10w 次数据，然后删除 10w 数据');
                for (let i = 0; i < 100000; i++) {
                    queueB.enqueue('1');
                }
                for (let i = 0; i < 100000; i++) {
                    queueB.dequeue();
                }
                console.timeEnd('添加 10w 次数据，然后删除 10w 数据');
            });
        });
    });
}
step('ObjectQueue');
step('ArrayQueue');
