'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = require("assert");
const task_scheduler_1 = require("../lib/task-scheduler");
describe(`TaskScheduler`, function () {
    describe('add', function () {
        it('添加一个任务', function () {
            const scheduler = new task_scheduler_1.TaskScheduler();
            (0, assert_1.equal)(scheduler.size, 0);
            scheduler.add('test', {
                depends: [],
                execute() { },
                revert() { },
            });
            (0, assert_1.equal)(scheduler.size, 1);
        });
        it('重复添加任务', function () {
            const scheduler = new task_scheduler_1.TaskScheduler();
            (0, assert_1.equal)(scheduler.size, 0);
            scheduler.add('test1', {
                depends: [],
                execute() { },
                revert() { },
            });
            scheduler.add('test2', {
                depends: [],
                execute() { },
                revert() { },
            });
            (0, assert_1.equal)(scheduler.size, 2);
        });
        it('添加相同的任务', function () {
            const scheduler = new task_scheduler_1.TaskScheduler();
            (0, assert_1.equal)(scheduler.size, 0);
            scheduler.add('test', {
                depends: [],
                execute() { },
                revert() { },
            });
            scheduler.add('test', {
                depends: [],
                execute() { },
                revert() { },
            });
            (0, assert_1.equal)(scheduler.size, 1);
        });
    });
    describe('remove', function () {
        it('删除不存在的任务', function () {
            const scheduler = new task_scheduler_1.TaskScheduler();
            scheduler.add('test', {
                depends: [],
                execute() { },
                revert() { },
            });
            (0, assert_1.equal)(scheduler.size, 1);
            scheduler.remove('test1');
            (0, assert_1.equal)(scheduler.size, 1);
        });
        it('删除存在的任务', function () {
            const scheduler = new task_scheduler_1.TaskScheduler();
            scheduler.add('test1', {
                depends: [],
                execute() { },
                revert() { },
            });
            scheduler.add('test2', {
                depends: [],
                execute() { },
                revert() { },
            });
            (0, assert_1.equal)(scheduler.size, 2);
            scheduler.remove('test1');
            (0, assert_1.equal)(scheduler.size, 1);
        });
        it('添加后立即删除', function () {
            const scheduler = new task_scheduler_1.TaskScheduler();
            scheduler.add('test', {
                depends: [],
                execute() { },
                revert() { },
            });
            (0, assert_1.equal)(scheduler.size, 1);
            scheduler.remove('test');
            (0, assert_1.equal)(scheduler.size, 0);
        });
        it('添加后延迟删除', function () {
            return __awaiter(this, void 0, void 0, function* () {
                const scheduler = new task_scheduler_1.TaskScheduler();
                scheduler.add('test', {
                    depends: [],
                    execute() { },
                    revert() { },
                });
                (0, assert_1.equal)(scheduler.size, 1);
                yield new Promise((resolve) => {
                    setTimeout(resolve, 100);
                });
                scheduler.remove('test');
                (0, assert_1.equal)(scheduler.size, 0);
            });
        });
    });
    describe('execute', function () {
        it('执行一个任务', function () {
            const scheduler = new task_scheduler_1.TaskScheduler();
            let execNum = 0;
            let revertNum = 0;
            scheduler.add('test', {
                depends: [],
                execute() { execNum++; },
                revert() { revertNum++; },
            });
            scheduler.execute('test');
            (0, assert_1.equal)(revertNum, 0);
            (0, assert_1.equal)(execNum, 1);
        });
        it('执行任务后自动执行依赖任务', function () {
            return __awaiter(this, void 0, void 0, function* () {
                const scheduler = new task_scheduler_1.TaskScheduler();
                const execList = [];
                const revertList = [];
                scheduler.add('a', {
                    depends: [],
                    execute() { execList.push('a'); },
                    revert() { revertList.push('a'); },
                });
                scheduler.add('b', {
                    depends: ['a'],
                    execute() { execList.push('b'); },
                    revert() { revertList.push('b'); },
                });
                scheduler.add('c', {
                    depends: ['b'],
                    execute() { execList.push('c'); },
                    revert() { revertList.push('c'); },
                });
                scheduler.add('d', {
                    depends: [],
                    execute() { execList.push('d'); },
                    revert() { revertList.push('d'); },
                });
                scheduler.execute('a');
                yield new Promise((resolve) => {
                    setTimeout(resolve, 100);
                });
                (0, assert_1.deepEqual)(execList, ['a', 'b', 'c']);
                (0, assert_1.deepEqual)(revertList, []);
            });
        });
        it('执行并行依赖', function () {
            return __awaiter(this, void 0, void 0, function* () {
                const scheduler = new task_scheduler_1.TaskScheduler();
                const execList = [];
                const revertList = [];
                scheduler.add('a', {
                    depends: [],
                    execute() { execList.push('a'); },
                    revert() { revertList.push('a'); },
                });
                scheduler.add('b', {
                    depends: ['a'],
                    execute() { execList.push('b'); },
                    revert() { revertList.push('b'); },
                });
                scheduler.add('c', {
                    depends: ['b'],
                    execute() { execList.push('c'); },
                    revert() { revertList.push('c'); },
                });
                scheduler.add('d', {
                    depends: ['b'],
                    execute() { execList.push('d'); },
                    revert() { revertList.push('d'); },
                });
                scheduler.execute('a');
                yield new Promise((resolve) => {
                    setTimeout(resolve, 100);
                });
                (0, assert_1.deepEqual)(execList, ['a', 'b', 'c', 'd']);
                (0, assert_1.deepEqual)(revertList, []);
            });
        });
    });
    describe('revert', function () {
        it('撤销一个任务', function () {
            const scheduler = new task_scheduler_1.TaskScheduler();
            let execNum = 0;
            let revertNum = 0;
            scheduler.add('test', {
                depends: [],
                execute() { execNum++; },
                revert() { revertNum++; },
            });
            scheduler.execute('test');
            (0, assert_1.equal)(revertNum, 0);
            (0, assert_1.equal)(execNum, 1);
            scheduler.revert('test');
            (0, assert_1.equal)(revertNum, 1);
            (0, assert_1.equal)(execNum, 1);
        });
        it('撤销任务的时候，连带撤销后续任务', function () {
            return __awaiter(this, void 0, void 0, function* () {
                const scheduler = new task_scheduler_1.TaskScheduler();
                const execList = [];
                const revertList = [];
                scheduler.add('a', {
                    depends: [],
                    execute() { execList.push('a'); },
                    revert() { revertList.push('a'); },
                });
                scheduler.add('b', {
                    depends: ['a'],
                    execute() { execList.push('b'); },
                    revert() { revertList.push('b'); },
                });
                scheduler.add('c', {
                    depends: ['b'],
                    execute() { execList.push('c'); },
                    revert() { revertList.push('c'); },
                });
                scheduler.add('d', {
                    depends: ['b'],
                    execute() { execList.push('d'); },
                    revert() { revertList.push('d'); },
                });
                scheduler.execute('a');
                yield new Promise((resolve) => {
                    setTimeout(resolve, 100);
                });
                scheduler.revert('a');
                yield new Promise((resolve) => {
                    setTimeout(resolve, 100);
                });
                (0, assert_1.deepEqual)(revertList, ['a', 'b', 'c', 'd']);
            });
        });
    });
});
