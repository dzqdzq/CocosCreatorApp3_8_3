'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = require("assert");
const object_recycler_1 = require("../lib/object-recycler");
describe(`ObjectRecycler`, function () {
    describe('default', () => {
        it('acquireObject / releaseObject', function () {
            let ctorNum = 0;
            let initNum = 0;
            let destroyNum = 0;
            class Test {
                constructor() { ctorNum++; }
                initialize() { initNum++; }
                destroy() { destroyNum++; }
            }
            const recycler = new object_recycler_1.ObjectRecycler({
                generate() { return new Test(); }
            });
            const obj = recycler.acquireObject();
            (0, assert_1.equal)(ctorNum, 1);
            (0, assert_1.equal)(initNum, 1);
            (0, assert_1.equal)(destroyNum, 0);
            recycler.recycleObject(obj);
            (0, assert_1.equal)(ctorNum, 1);
            (0, assert_1.equal)(initNum, 1);
            (0, assert_1.equal)(destroyNum, 1);
        });
        it('acquireObject / releaseObject', function () {
            let ctorNum = 0;
            let initNum = 0;
            let destroyNum = 0;
            class Test {
                constructor() { ctorNum++; }
                initialize() { initNum++; }
                destroy() { destroyNum++; }
            }
            const recycler = new object_recycler_1.ObjectRecycler({
                generate() { return new Test(); }
            });
            const objA = recycler.acquireObject();
            (0, assert_1.equal)(ctorNum, 1);
            (0, assert_1.equal)(initNum, 1);
            (0, assert_1.equal)(destroyNum, 0);
            const objB = recycler.acquireObject();
            (0, assert_1.equal)(ctorNum, 2);
            (0, assert_1.equal)(initNum, 2);
            (0, assert_1.equal)(destroyNum, 0);
            recycler.recycleObject(objA);
            (0, assert_1.equal)(ctorNum, 2);
            (0, assert_1.equal)(initNum, 2);
            (0, assert_1.equal)(destroyNum, 1);
            recycler.recycleObject(objA);
            (0, assert_1.equal)(ctorNum, 2);
            (0, assert_1.equal)(initNum, 2);
            (0, assert_1.equal)(destroyNum, 2);
            recycler.recycleObject(objB);
            (0, assert_1.equal)(ctorNum, 2);
            (0, assert_1.equal)(initNum, 2);
            (0, assert_1.equal)(destroyNum, 3);
            const objC = recycler.acquireObject();
            (0, assert_1.equal)(ctorNum, 2);
            (0, assert_1.equal)(initNum, 3);
            (0, assert_1.equal)(destroyNum, 3);
            (0, assert_1.equal)(objC, objB);
            const objD = recycler.acquireObject();
            (0, assert_1.equal)(ctorNum, 2);
            (0, assert_1.equal)(initNum, 4);
            (0, assert_1.equal)(destroyNum, 3);
            (0, assert_1.equal)(objD, objA);
        });
    });
});
