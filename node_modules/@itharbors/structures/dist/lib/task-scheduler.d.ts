declare class Task {
    name: string;
    executed: boolean;
    running: boolean;
    option: TaskOption;
    constructor(name: string, option: TaskOption);
}
interface TaskOption {
    depends: string[];
    execute(): void;
    revert(): void;
}
export declare class TaskScheduler {
    get size(): number;
    name2item: {
        [key: string]: Task;
    };
    depend2item: {
        [key: string]: Task[];
    };
    /**
     * 添加一个任务
     * @param name
     * @param option
     */
    add(name: string, option: TaskOption): void;
    /**
     * 移出一个任务
     * @param name
     */
    remove(name: string): void;
    /**
     * 执行某个任务
     * @param name
     */
    execute(name: string): Promise<void | null>;
    /**
     * 重置一个任务的标记
     * 会将依赖该任务的其他任务也一并重制
     * @param name
     */
    revert(name: string): Promise<void>;
}
export {};
