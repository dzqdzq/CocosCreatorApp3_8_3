import { EventEmitter } from './event';
type TaskOption = {
    name: string;
    maxConcurrent: number;
};
export declare class Task {
    handle(): void;
}
export declare class TaskManager extends EventEmitter<TaskEvents> {
    private pendingQueue;
    private executingQueue;
    private completedQueue;
    private state;
    private options;
    get name(): string;
    get progress(): number;
    get length(): number;
    constructor(options: TaskOption);
    private step;
    /**
     * 开始执行任务队列
     */
    start(): void;
    /**
     * 暂停后续任务
     */
    pause(): void;
    /**
     * 重新开始暂停的队列
     */
    resume(): void;
    /**
     * 插入子任务
     * @param task
     */
    push(task: Task): void;
    /**
     * 插入队列头部
     * @param task
     */
    unshift(task: Task): void;
    /**
     * 移除自任务
     * @param task
     */
    remove(task: Task): void;
    /**
     * 循环等待队列
     * @param handle
     */
    forEachPendingQueue(handle: (task: Task) => void): void;
}
type TaskEvents = {
    start: {
        params: [];
        result: void;
    };
    pause: {
        params: [];
        result: void;
    };
    resume: {
        params: [];
        result: void;
    };
    finish: {
        params: [];
        result: void;
    };
    error: {
        params: [
            any
        ];
        result: void;
    };
};
export {};
