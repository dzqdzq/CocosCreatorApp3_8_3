interface Queue<T> {
    enqueue(item: T): void;
    dequeue(): void;
    peek(): T | undefined;
    isEmpty(): boolean;
    size(): number;
    clear(): void;
}
export declare class ObjectQueue<T> implements Queue<T> {
    private head;
    private tail;
    private items;
    /**
     * 向队列尾部添加元素
     * @param item
     */
    enqueue(item: T): void;
    /**
     * 从队列头部移除元素，并返回被移除的元素
     * @returns
     */
    dequeue(): T | undefined;
    /**
     * 返回队列头部的元素，但不移除它
     * @returns
     */
    peek(): T | undefined;
    /**
     * 检查队列是否为空
     * @returns
     */
    isEmpty(): boolean;
    /**
     * 返回队列的大小（包含的元素数量）
     * @returns
     */
    size(): number;
    /**
     * 清空队列
     */
    clear(): void;
}
export declare class ArrayQueue<T> implements Queue<T> {
    private items;
    /**
     * 向队列尾部添加元素
     * @param item
     */
    enqueue(item: T): void;
    /**
     * 从队列头部移除元素，并返回被移除的元素
     * @returns
     */
    dequeue(): T | undefined;
    /**
     * 返回队列头部的元素，但不移除它
     * @returns
     */
    peek(): T | undefined;
    /**
     * 检查队列是否为空
     * @returns
     */
    isEmpty(): boolean;
    /**
     * 返回队列的大小（包含的元素数量）
     * @returns
     */
    size(): number;
    /**
     * 清空队列
     */
    clear(): void;
}
export {};
