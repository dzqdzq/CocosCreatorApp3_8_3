'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TaskScheduler = void 0;
class Task {
    constructor(name, option) {
        // 该任务是否已经执行过
        this.executed = false;
        // 该任务是否正在执行
        this.running = false;
        this.option = option || {};
        // 该任务的名字
        this.name = name;
    }
}
class TaskScheduler {
    constructor() {
        this.name2item = {};
        this.depend2item = {};
    }
    get size() {
        return Object.keys(this.name2item).length;
    }
    /**
     * 添加一个任务
     * @param name
     * @param option
     */
    add(name, option) {
        const item = this.name2item[name] = new Task(name, option);
        if (item.option.depends) {
            item.option.depends.forEach((name) => {
                const array = this.depend2item[name] = this.depend2item[name] || [];
                array.push(item);
            });
        }
    }
    /**
     * 移出一个任务
     * @param name
     */
    remove(name) {
        const item = this.name2item[name];
        if (!item) {
            return;
        }
        delete this.name2item[name];
        if (item.option.depends) {
            item.option.depends.forEach((name) => {
                const array = this.depend2item[name];
                const index = array.indexOf(item);
                array.splice(index, 1);
                if (!array.length) {
                    delete this.depend2item[name];
                }
            });
        }
    }
    /**
     * 执行某个任务
     * @param name
     */
    execute(name) {
        return __awaiter(this, void 0, void 0, function* () {
            const item = this.name2item[name];
            if (!item) {
                console.warn(`Task execution failed: '${name}' does not exist.`);
                return null;
            }
            // 检查依赖是否都运行
            const refused = item.option.depends.some((name) => {
                const depend = this.name2item[name];
                return !depend.executed;
            });
            if (refused) {
                console.warn(`Task execution failed: '${name}' dependencies are not completed.`);
                return null;
            }
            if (!item.executed && !item.running) {
                item.running = true;
                const result = yield item.option.execute();
                item.running = false;
                item.executed = true;
                // 任务执行完毕之后，执行依赖这个任务的其他任务
                const depends = this.depend2item[name] || [];
                for (let i = 0; i < depends.length; i++) {
                    const child = depends[i];
                    // 检查依赖这个任务的某个任务是否达到了执行标准
                    const allow = !child.option.depends.some((name) => {
                        return !this.name2item[name] || !this.name2item[name].executed;
                    });
                    if (allow) {
                        this.execute(child.name);
                    }
                }
                return result;
            }
            return null;
        });
    }
    /**
     * 重置一个任务的标记
     * 会将依赖该任务的其他任务也一并重制
     * @param name
     */
    revert(name) {
        return __awaiter(this, void 0, void 0, function* () {
            const item = this.name2item[name];
            if (!item) {
                return;
            }
            yield item.option.revert();
            item.executed = false;
            item.running = false;
            const depends = this.depend2item[name] || [];
            for (let i = 0; i < depends.length; i++) {
                const child = depends[i];
                this.revert(child.name);
            }
        });
    }
}
exports.TaskScheduler = TaskScheduler;
