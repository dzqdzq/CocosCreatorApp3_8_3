'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventEmitter = void 0;
class EventEmitter {
    constructor() {
        this._events = {};
    }
    /**
     * 监听一个事件
     * @param action
     * @param handle
     */
    addListener(action, handle) {
        const HandleArray = this._events[action] = this._events[action] || [];
        if (HandleArray.find(item => item.handle === handle)) {
            return console.error(`Please do not listen to the same function repeatedly.`);
        }
        HandleArray.push({
            handle,
            once: false,
        });
    }
    /**
     * 监听一个事件，触发后立即删除
     * @param action
     * @param handle
     */
    addOnceListener(action, handle) {
        const HandleArray = this._events[action] = this._events[action] || [];
        if (HandleArray.find(item => item.handle === handle)) {
            return console.error(`Please do not listen to the same function repeatedly.`);
        }
        HandleArray.push({
            handle,
            once: true,
        });
    }
    /**
     * 取消一个事件监听
     * @param action
     * @param handle
     */
    removeListener(action, handle) {
        if (!handle) {
            if (this._events[action]) {
                this._events[action].length === 0;
                delete this._events[action];
            }
            return;
        }
        const HandleArray = this._events[action] = this._events[action] || [];
        for (let i = 0; i < HandleArray.length; i++) {
            const Item = HandleArray[i];
            if (Item.handle === handle) {
                HandleArray.splice(i, 1);
                break;
            }
        }
    }
    /**
     * 清空事件监听
     * @param action
     */
    clear(action) {
        if (action) {
            if (this._events[action]) {
                this._events[action].length === 0;
                delete this._events[action];
            }
            return;
        }
        Object.keys(this._events).forEach((name) => {
            this._events[name].length === 0;
            delete this._events[name];
        });
    }
    /**
     * 触发一个事件
     * @param action
     * @param args
     */
    emit(action, ...args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this._events[action]) {
                return;
            }
            const HandleArray = this._events[action];
            for (let i = 0; i < HandleArray.length; i++) {
                const HandleItem = HandleArray[i];
                if (HandleItem.once) {
                    HandleArray.splice(i, 1);
                    i--;
                }
                try {
                    yield HandleItem.handle.call(this, ...args);
                }
                catch (error) {
                    console.error(error);
                }
            }
        });
    }
}
exports.EventEmitter = EventEmitter;
