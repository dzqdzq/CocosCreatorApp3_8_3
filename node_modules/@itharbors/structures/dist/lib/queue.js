'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArrayQueue = exports.ObjectQueue = void 0;
class ObjectQueue {
    constructor() {
        this.head = 0;
        this.tail = 0;
        this.items = {};
    }
    /**
     * 向队列尾部添加元素
     * @param item
     */
    enqueue(item) {
        this.items[this.tail] = item;
        this.tail += 1;
    }
    /**
     * 从队列头部移除元素，并返回被移除的元素
     * @returns
     */
    dequeue() {
        if (this.isEmpty()) {
            return undefined;
        }
        const item = this.items[this.head];
        delete this.items[this.head];
        this.head += 1;
        return item;
    }
    /**
     * 返回队列头部的元素，但不移除它
     * @returns
     */
    peek() {
        if (this.isEmpty()) {
            return undefined;
        }
        return this.items[this.head];
    }
    /**
     * 检查队列是否为空
     * @returns
     */
    isEmpty() {
        return this.tail - this.head <= 0;
    }
    /**
     * 返回队列的大小（包含的元素数量）
     * @returns
     */
    size() {
        return this.tail - this.head;
    }
    /**
     * 清空队列
     */
    clear() {
        while (this.head < this.tail) {
            delete this.items[this.head];
            this.head += 1;
        }
    }
}
exports.ObjectQueue = ObjectQueue;
class ArrayQueue {
    constructor() {
        this.items = [];
    }
    /**
     * 向队列尾部添加元素
     * @param item
     */
    enqueue(item) {
        this.items.push(item);
    }
    /**
     * 从队列头部移除元素，并返回被移除的元素
     * @returns
     */
    dequeue() {
        if (this.isEmpty()) {
            return undefined;
        }
        return this.items.shift();
    }
    /**
     * 返回队列头部的元素，但不移除它
     * @returns
     */
    peek() {
        if (this.isEmpty()) {
            return undefined;
        }
        return this.items[0];
    }
    /**
     * 检查队列是否为空
     * @returns
     */
    isEmpty() {
        return this.items.length === 0;
    }
    /**
     * 返回队列的大小（包含的元素数量）
     * @returns
     */
    size() {
        return this.items.length;
    }
    /**
     * 清空队列
     */
    clear() {
        this.items.length = 0;
    }
}
exports.ArrayQueue = ArrayQueue;
