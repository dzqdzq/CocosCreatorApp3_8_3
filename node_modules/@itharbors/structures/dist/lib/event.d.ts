/**
 * 消息定义示例
 */
interface HandleItem {
    handle: Function;
    once: boolean;
}
export interface EventTable {
    [action: string]: {
        params: any[];
        result: any;
    };
}
export declare class EventEmitter<T extends EventTable = EventTable> {
    _events: {
        [action: string]: HandleItem[];
    };
    /**
     * 监听一个事件
     * @param action
     * @param handle
     */
    addListener<A extends keyof T>(action: A, handle: (...args: T[A]['params']) => T[A]['result']): void;
    /**
     * 监听一个事件，触发后立即删除
     * @param action
     * @param handle
     */
    addOnceListener<A extends keyof T>(action: A, handle: (...args: T[A]['params']) => T[A]['result']): void;
    /**
     * 取消一个事件监听
     * @param action
     * @param handle
     */
    removeListener<A extends keyof T>(action: A, handle: (...args: T[A]['params']) => T[A]['result']): void;
    /**
     * 清空事件监听
     * @param action
     */
    clear<A extends keyof T>(action?: A): void;
    /**
     * 触发一个事件
     * @param action
     * @param args
     */
    emit<A extends keyof T>(action: A, ...args: T[A]['params']): Promise<void>;
}
export {};
