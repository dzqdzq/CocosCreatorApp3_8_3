/**
 * Action 抽象类
 * 用于执行一个既定动作
 */
export declare abstract class Action<Detail = {
    [key: string]: any;
}, ExecParams = any> {
    target?: Action;
    detail: Detail;
    constructor(detail: Detail, action?: Action);
    /**
     * 执行这个动作
     */
    abstract exec(params: ExecParams): void;
    /**
     * 生成一个反向动作
     */
    abstract revertAction(): Action;
}
/**
 * 多个 Action 合并成一个 List
 */
export declare class ActionList<Params = any> extends Action<{
    queue: Action[];
}, Params> {
    exec(params: Params): Promise<void>;
    revertAction(): ActionList;
}
/**
 * Action 队列
 */
export declare class ActionQueue<D> {
    private _redoOffset;
    private _queue;
    private _state;
    private _recordActionList;
    get queue(): Action<{
        [key: string]: any;
    }, any>[];
    get length(): number;
    _params: D;
    constructor(params: D);
    /**
     * 开始记录 action 队列
     */
    startRecording(): void;
    /**
     * 结束记录 action 队列，将之前记录的动作全部插入到一个动作里
     */
    stopRecording(): void;
    /**
     * 记录一个操作
     * @param action
     */
    exec(action: Action): Promise<void>;
    /**
     * 执行一次撤销
     */
    undo(): Promise<void>;
    /**
     * 执行一次重做
     */
    redo(): Promise<void>;
}
