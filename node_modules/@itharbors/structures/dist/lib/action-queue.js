'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ActionQueue = exports.ActionList = exports.Action = void 0;
/**
 * Action 抽象类
 * 用于执行一个既定动作
 */
class Action {
    constructor(detail, action) {
        this.detail = detail;
        this.target = action;
    }
}
exports.Action = Action;
/**
 * 多个 Action 合并成一个 List
 */
class ActionList extends Action {
    exec(params) {
        return __awaiter(this, void 0, void 0, function* () {
            for (let action of this.detail.queue) {
                yield action.exec(params);
            }
        });
    }
    revertAction() {
        const queue = [];
        for (let i = this.detail.queue.length - 1; i >= 0; i--) {
            const action = this.detail.queue[i];
            queue.push(action.revertAction());
        }
        return new ActionList({
            queue,
        }, this);
    }
}
exports.ActionList = ActionList;
var ActionQueueState;
(function (ActionQueueState) {
    ActionQueueState[ActionQueueState["normal"] = 0] = "normal";
    ActionQueueState[ActionQueueState["record"] = 1] = "record";
})(ActionQueueState || (ActionQueueState = {}));
/**
 * Action 队列
 */
class ActionQueue {
    get queue() {
        return this._queue;
    }
    get length() {
        return this._queue.length;
    }
    constructor(params) {
        this._redoOffset = 0;
        // action 队列
        this._queue = [];
        this._state = ActionQueueState.normal;
        this._recordActionList = [];
        this._params = params;
    }
    /**
     * 开始记录 action 队列
     */
    startRecording() {
        if (this._state === ActionQueueState.record) {
            this.stopRecording();
        }
        this._state = ActionQueueState.record;
    }
    /**
     * 结束记录 action 队列，将之前记录的动作全部插入到一个动作里
     */
    stopRecording() {
        if (this._recordActionList.length > 0) {
            this._queue.push(new ActionList({
                queue: this._recordActionList,
            }));
            this._recordActionList = [];
        }
        this._state = ActionQueueState.normal;
    }
    /**
     * 记录一个操作
     * @param action
     */
    exec(action) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._state === ActionQueueState.record) {
                this._recordActionList.push(action);
            }
            else {
                this._queue.push(action);
            }
            this._redoOffset = 0;
            yield action.exec(this._params);
        });
    }
    /**
     * 执行一次撤销
     */
    undo() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._state === ActionQueueState.record) {
                this.stopRecording();
            }
            const setter = new Set();
            let undoAction;
            for (let i = this._queue.length - 1; i >= 0; i--) {
                const action = this._queue[i];
                if (action.target) {
                    setter.add(action.target);
                }
                else if (!setter.has(action)) {
                    undoAction = action;
                    break;
                }
            }
            if (undoAction) {
                let redoAction = undoAction.target;
                if (!redoAction) {
                    redoAction = undoAction.revertAction();
                    redoAction.target = undoAction;
                }
                this._queue.push(redoAction);
                redoAction.exec(this._params);
            }
            this._redoOffset = 0;
        });
    }
    /**
     * 执行一次重做
     */
    redo() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._state === ActionQueueState.record) {
                this.stopRecording();
            }
            const action = this._queue[this._queue.length - 1 - this._redoOffset];
            if (action && action.target) {
                let execAction = action.target;
                if (!execAction) {
                    execAction = action.revertAction();
                    execAction.target = action;
                }
                this._queue.push(execAction);
                execAction.exec(this._params);
                this._redoOffset += 2;
            }
        });
    }
}
exports.ActionQueue = ActionQueue;
