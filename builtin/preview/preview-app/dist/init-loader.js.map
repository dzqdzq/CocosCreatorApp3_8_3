{"version":3,"file":"init-loader.js","sourceRoot":"","sources":["../src/init-loader.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAGA,SAAS,gBAAgB,CAAC,IAA0B,EAAE,IAAc;QAApE,iBAqBC;QApBG,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC;QACzB,CAAC;;;;;wBACY,CAAC,GAAG,CAAC;;;6BAAE,CAAA,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAA;wBAC3B,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAgC,CAAC;wBAC1D,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,QAAQ,EAAE;4BAAE,wBAAS;yBAAE;;;;wBAExB,qBAAM,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,EAAA;;wBAA3C,SAAS,GAAG,SAA+B;wBACjD,IAAI,SAAS,EAAE;4BACX,IAAI,CAAC,GAAG,GAAG,SAAS,CAAC;4BACrB,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;yBACnD;;;;wBAED,wBAAS;;wBAVsB,CAAC,EAAE,CAAA;;;;;aAa7C,CAAC,EAAE,CAAC,IAAI,CAAC;YACN,IAAI,CAAC,IAAI,CAAC,CAAC;QACf,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,MAAM;YACZ,IAAI,CAAC,MAAM,CAAC,CAAC;QACjB,CAAC,CAAC,CAAC;IACP,CAAC;IAOD,SAAe,cAAc,CAAC,IAAY;;;;;;wBACtC,IAAI,IAAI,IAAI,KAAK,EAAE;4BACf,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,IAAI,EAAE;gCACtB,sBAAO,KAAK,CAAC,IAAI,CAAW,EAAC;6BAChC;4BACD,sBAAO,IAAI,OAAO,CAAC,UAAC,OAAO;oCACvB,UAAU,CAAC,IAAI,CAAC,GAAG,UAAU,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;oCAC1C,UAAU,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gCACnC,CAAC,CAAC,EAAC;yBACN;wBACD,KAAK,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;;;;wBAEE,qBAAM,KAAK,CAAC,yBAAkB,IAAI,CAAE,CAAC,EAAA;;wBAAhD,QAAQ,GAAG,SAAqC;wBACzC,qBAAM,QAAQ,CAAC,IAAI,EAAE,EAAA;;wBAA5B,SAAO,SAAqB;wBAClC,KAAK,CAAC,IAAI,CAAC,GAAG,MAAI,CAAC;wBACnB,IAAI,UAAU,CAAC,IAAI,CAAC,EAAE;4BAClB,UAAU,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,MAAI,CAAC,EAAV,CAAU,CAAC,CAAC;4BAC7C,UAAU,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;yBACzB;wBACD,sBAAO,MAAI,EAAC;;;wBAEZ,OAAO,CAAC,KAAK,CAAC,OAAK,CAAC,CAAC;wBACrB,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;wBACjB,sBAAO,EAAE,EAAC;;;;;KAEjB;;;;;;;;YA/BD,EAAE,CAAC,YAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;YACrD,EAAE,CAAC,YAAY,CAAC,aAAa,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;YAEpD,KAAK,GAAoC,EAAE,CAAC;YAC5C,UAAU,GAAmC,EAAE,CAAC","sourcesContent":["// @ts-expect-error\nimport * as cc from 'cc';\n\nfunction replaceExtension(task: cc.AssetManager.Task, done: Function) {\n    task.output = task.input;\n    (async () => {\n        for (let i = 0; i < task.input.length; i++) {\n            const item = task.input[i] as cc.AssetManager.RequestItem;\n            if (!item.uuid || item.isNative) { continue; }\n            try {\n                const extension = await queryExtension(item.uuid);\n                if (extension) {\n                    item.ext = extension;\n                    item.url = item.url.replace('.json', extension);\n                }\n            } catch (err) {\n                continue;\n            }\n        }\n    })().then(() => {\n        done(null);\n    }).catch((reason) => {\n        done(reason);\n    });\n}\ncc.assetManager.pipeline.insert(replaceExtension, 1);\ncc.assetManager.fetchPipeline.insert(replaceExtension, 1);\n\nconst cache: {[uuid: string]: string | null} = {};\nconst resolveMap: { [uuid: string]: Function[] } = {};\n\nasync function queryExtension(uuid: string): Promise<string> {\n    if (uuid in cache) {\n        if (cache[uuid] !== null) {\n            return cache[uuid] as string;\n        }\n        return new Promise((resolve) => {\n            resolveMap[uuid] = resolveMap[uuid] || [];\n            resolveMap[uuid].push(resolve);\n        });\n    }\n    cache[uuid] = null;\n    try {\n        const response = await fetch(`/query-extname/${uuid}`);\n        const text = await response.text();\n        cache[uuid] = text;\n        if (resolveMap[uuid]) {\n            resolveMap[uuid].forEach(func => func(text));\n            resolveMap[uuid] = [];\n        }\n        return text;\n    } catch (error) {\n        console.error(error);\n        cache[uuid] = '';\n        return '';\n    }\n}\n"]}