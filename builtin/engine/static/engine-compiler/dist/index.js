"use strict";var __createBinding=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var o=Object.getOwnPropertyDescriptor(t,i);o&&("get"in o?t.__esModule:!o.writable&&!o.configurable)||(o={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,o)}:function(e,t,i,r){e[r=void 0===r?i:r]=t[i]}),__setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),__importStar=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&__createBinding(t,e,i);return __setModuleDefault(t,e),t};Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.getRightEngine=exports.rebuildImportMaps=exports.rebuild=exports.compileEngine=void 0;const ccbuild_1=require("@cocos/ccbuild"),utils_1=require("@editor/lib-programming/dist/utils"),child_process_1=require("child_process"),fs_extra_1=require("fs-extra"),path_1=require("path");let compiler=null,nativeCompiler=null,engineDir="",busy=!1,outDir="";const editorFeaturesCache=[],VERSION="3";async function compileEngine(e,t){engineDir=e,outDir=(0,path_1.join)(e,"bin",".cache","dev");e=(0,path_1.join)(outDir,"VERSION");let i=!1;try{await(0,fs_extra_1.readFile)(e,"utf8")!==VERSION&&(i=!0)}catch(e){i=!0}compiler=await generateCompiler();e=await getIsSceneNative();let r=!1;e&&(nativeCompiler=await generateCompiler({isNative:!0}),r=await getIsDebugNative()),i?(console.debug("[EditorQuickCompiler]Version information lost."),await(0,fs_extra_1.emptyDir)(outDir)):console.debug("[EditorQuickCompiler]Version information looks good."),(i||r||null!==Editor&&void 0!==Editor&&Editor.App.dev||t)&&!process.argv.includes("--no-quick-compile")?await rebuild({isNativeScene:e,debugNative:r}):console.debug("Note, quick compiler does not get launched.")}async function generateCompiler(e){var t=(await Promise.resolve().then(()=>__importStar(require("@editor/quick-compiler"))))["QuickCompiler"],i=null!==Editor&&void 0!==Editor&&Editor.Project.tmpDir?(0,path_1.join)(engineDir,"bin",".cache","logs","log.txt"):void 0,r=(i&&await(0,fs_extra_1.ensureDir)((0,path_1.dirname)(i)),await ccbuild_1.StatsQuery.create(engineDir));const o=["wait-for-ammo-instantiation"];var r=r.getFeatures(),n=r.filter(e=>!o.includes(e)),a=(editorFeaturesCache.push(...n),"cce:/internal/x/cc-fu/");return null!=e&&e.isNative?(e=(0,path_1.join)(engineDir,"bin/.editor"),new t({rootDir:engineDir,outDir:e,targets:[{featureUnitPrefix:a,dir:e,format:"systemjs",targets:"node 10",loose:!0,includeEditorExports:!0,includeIndex:{features:r},loader:!0}],logFile:i,platform:"NATIVE"})):new t({rootDir:engineDir,outDir:outDir,targets:[{featureUnitPrefix:a,dir:(0,path_1.join)(outDir,"editor"),format:"systemjs",usedInElectron509:!0,targets:utils_1.editorBrowserslistQuery,includeIndex:{features:n},loader:!0,loose:!0},{featureUnitPrefix:a,dir:(0,path_1.join)(outDir,"preview"),format:"systemjs",loose:!0}],logFile:i})}async function rebuild(e){if(void 0===(null==e?void 0:e.isNativeScene)&&((e=null!=e?e:{}).isNativeScene=await getIsSceneNative(),e.isNativeScene)&&(e.debugNative=await getIsDebugNative()),!compiler||null!=e&&e.isNativeScene&&!nativeCompiler)await compileEngine(engineDir,!0);else if(busy)console.error("Compile engine fails: The compilation is in progress");else{busy=!0,console.log("Start Quick Compile");var t=Date.now();if(compiler)try{e.isNativeScene&&(await nativeCompiler.build(),await rebuildNativeImportMap(),await generateEngineAddon(e),await updateAdapter()),await compiler.build(),Editor&&await rebuildImportMaps();var i=(0,path_1.join)(outDir,"VERSION");await(0,fs_extra_1.outputFile)(i,VERSION,{encoding:"utf8"})}catch(e){throw e}finally{console.log("Quick Compile: "+(Date.now()-t)+"ms"),busy=!1}else busy=!1,console.error("Compile engine fails: The compiler does not exist.")}}async function rebuildImportMaps(){var e;compiler&&(e=await getEditorShippedFeatures(),await rebuildTargetImportMap(compiler,0,e),e=await getPreviewShippedFeatures(),await rebuildTargetImportMap(compiler,1,e))}async function rebuildNativeImportMap(){var e=await getEditorShippedFeatures();await rebuildTargetImportMap(nativeCompiler,0,e,"NATIVE","EDITOR")}async function rebuildTargetImportMap(e,t,i,r,o,n){var a=await getConfigurableFlagsOfFeatures(i);await e.buildImportMap(t,i,{mode:o,platform:r,out:n,features:i,configurableFlags:a})}async function getEditorShippedFeatures(){return editorFeaturesCache}async function getPreviewShippedFeatures(){return Editor?Editor.Profile.getProject("engine","modules.includeModules"):[]}async function getConfigurableFlagsOfFeatures(e){var t={};if(Editor){var i=await Editor.Profile.getProject("engine","modules.flags");if(i)for(var[r,o]of Object.entries(i))e.includes(r)&&Object.assign(t,o)}return t}async function generateEngineAddon(i){let t;if(t=Editor?(0,path_1.join)(Editor.App.path,"../resources/3d/editor-native-scene"):(0,path_1.join)(__dirname,"../../../../../../resources/3d/editor-native-scene"),(0,fs_extra_1.existsSync)(t)){var e=(0,path_1.join)(engineDir,"native");if((0,fs_extra_1.existsSync)(e)){var o="arm64"===process.arch;let e;e=Editor?(0,path_1.join)(Editor.App.path,"../tools/cmake/bin"):(0,path_1.join)(engineDir,"../../../tools/cmake/bin");const c=joinPathEx(__dirname,"../node_modules/cmake-js/bin/cmake-js");var n="win32"===process.platform;const l=n?(0,path_1.join)(t,"win"):(0,path_1.join)(t,"mac"),u={};Object.assign(u,process.env),Object.keys(u).filter(e=>e.toLowerCase().startsWith("npm_")).forEach(e=>delete u[e]),n?u.Path=process.env.PATH+";"+e:u.PATH=process.env.PATH+":"+e;let r="";try{var a="--CDCOCOS_DIR="+(0,path_1.join)(engineDir,"../");const d=(0,path_1.join)(l,"build");var s=await getIsDebugLastTime();"win32"!==process.platform&&(null!==s&&s!==(null==i?void 0:i.debugNative)&&(0,fs_extra_1.existsSync)(d)&&(console.warn("cmake configure change,now will clean build cache"),(0,fs_extra_1.rmdirSync)(d,{recursive:!0})),await setIsDebugLastTime(!(null==i||!i.debugNative)));const p=[a],g=(n||(p.push("-x"),p.push("-a"),p.push(o?"arm64":"x64")),null!=i&&i.debugNative&&p.push("-D"),console.time("cmake build"),async i=>{await forkModule(c,["configure",...p],{cwd:l,env:u},{async success(e){var t;await(null==(t=null==i?void 0:i.onSuccess)?void 0:t.call(i,e))},async failed(e){var t;try{await(null==(t=null==i?void 0:i.onError)?void 0:t.call(i,e))}catch(e){e instanceof Error&&(r+=e.message+"\n")}}})});let t=!1;const f=e=>{t=!0,console.log("cmake configure success")};if(await g({onSuccess:f,async onError(e){if(r+=e+"\n",console.error(e),!(0,fs_extra_1.existsSync)(d))throw new Error(`cmake configure failed, output path ${d} is not exist `);console.warn("cmake configure error,now will clean build cache and try again"),await(0,fs_extra_1.remove)(d),await g({onSuccess:f,onError(e){console.error(e),r+=e+"\n"}})}}),!t)throw console.warn("cmake configure failed,skip build native scene"),console.timeEnd("cmake build"),r;await forkModule(c,["build",...p],{cwd:l,env:u},{success(){console.timeEnd("cmake build"),console.log("Native engine cmake build succeeded.")},failed(e){console.timeEnd("cmake build"),console.error("Native engine cmake build failed, the reason is",e)}})}catch(e){let t;e instanceof Error?(r+=e.message+"\n",t=r):"string"==typeof e&&(t=e),console.error(t),outputErrorTxt("build-native-scene-error"+getFormat24HourTime(),t)}}else console.error("build failed: native engine not exist,path: "+e)}else console.error("build failed: editor-native-scene not exist,path: "+t)}async function updateAdapter(){try{let e=!0;var t,i=(0,path_1.join)(engineDir,"bin/.editor"),r=(0,path_1.join)(engineDir,"bin/adapter/native/web-adapter.js"),o=((0,fs_extra_1.existsSync)(r)?(t=(0,path_1.join)(i,"web-adapter.js"),(0,fs_extra_1.copyFileSync)(r,t)):(e=!1,console.error(r+" not exist,please build engine first")),(0,path_1.join)(engineDir,"bin/adapter/native/engine-adapter.js"));return(0,fs_extra_1.existsSync)(o)?(0,fs_extra_1.copyFileSync)(o,(0,path_1.join)(i,"engine-adapter.js")):(e=!1,console.error(o+" not exist,please build engine first")),e?console.log("update adapter success"):console.error("update adapter failed"),Promise.resolve()}catch(e){return Promise.reject(e)}}function getRightEngine(e,t){t={version:"builtin",path:t};return e.custom&&(0,fs_extra_1.existsSync)(e.custom)&&(t.version="custom",t.path=e.custom),t}function forkModule(n,a,s,c={}){return new Promise((t,i)=>{null==s.execArgv&&(s.execArgv=["--max-old-space-size=8192"]),s.cwd&&(0,fs_extra_1.ensureDirSync)(s.cwd),null==s.stdio&&(s.stdio="pipe");var e=(0,child_process_1.fork)(n,a,s);let r="",o="";e.stdout&&e.stdout.on("data",e=>{r+=e}),e.stderr&&e.stderr.on("data",e=>{o+=e}),e.on("close",async e=>{0===e?c.success&&await c.success(o||r):c.failed&&await c.failed(o||r),t(e)}),e.on("error",e=>{i(e)})})}async function getIsSceneNative(){var e;let t=!0;return t=Editor?null!=(e=await Editor.Profile.getConfig("scene","scene.native-engine","global"))&&e:t}async function getIsDebugNative(){return!!await(null===Editor||void 0===Editor?void 0:Editor.Profile.getConfig("scene","scene.debug-native"))}async function getIsDebugLastTime(){return null===Editor||void 0===Editor?void 0:Editor.Profile.getConfig("engine","is-debug-native")}async function setIsDebugLastTime(e){return null===Editor||void 0===Editor?void 0:Editor.Profile.setConfig("engine","is-debug-native",e,"global")}function getFormat24HourTime(){var e=new Date,t=e=>9<e?e:"0"+e,i=t(e.getDate()),r=t(e.getMonth()+1);return e.getFullYear()+`-${r}-${i}-${t(e.getHours())}-${t(e.getMinutes())}-`+t(e.getSeconds())}function outputErrorTxt(e,t,i){try{null!=i||(i=null!==Editor&&void 0!==Editor&&Editor.Project.path?(0,path_1.join)(Editor.Project.path,"temp/crash/"):(0,path_1.join)(engineDir,"bin",".editor","logs"));var r=(0,path_1.join)(i,e+".txt");(0,fs_extra_1.ensureDirSync)(i),(0,fs_extra_1.writeFileSync)(r,t,{encoding:"utf-8"})}catch(e){e instanceof Error&&console.error("output error failed,reason is "+e.message)}}function joinPathEx(e,t){let i=(0,path_1.join)(e,t);return-1!==i.indexOf("app.asar")&&(i=i.replace("app.asar","app.asar.unpacked")).indexOf("app.asar.unpacked")&&!(0,fs_extra_1.existsSync)(i)&&console.trace(i+" not exist"),i}exports.compileEngine=compileEngine,exports.rebuild=rebuild,exports.rebuildImportMaps=rebuildImportMaps,exports.getRightEngine=getRightEngine,exports.default=__importStar(require("./index"));