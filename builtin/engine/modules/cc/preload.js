"use strict";var __importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.loadDynamic=void 0;const module_1=__importDefault(require("module")),path_1=__importDefault(require("path"));let hasPreload=!1,loader=null;async function preload(e){var r,o;function n(e){return"cc"===e||e.startsWith("cc/")&&!e.startsWith("cc/preload")||e.startsWith("cce:/internal/")}try{if(hasPreload)throw new Error("You can only preload engine once.");hasPreload=!0;var t,{requiredModules:i,editorExtensions:a=!0,editorPath:l}=e,s=null!=(r=e.root)?r:await require("@base/electron-base-ipc").sendSync("packages-engine:query-engine-info").path,c=null!=(o=e.dist)?o:path_1.default.join(s,"bin",".cache","dev","editor");globalThis.CC_EDITOR=!0,a&&(t=require("@base/electron-base-ipc").sendSync("packages-engine:query-engine-info"),globalThis.EditorExtends=require(path_1.default.join(t.editor,"./builtin/engine/dist/editor-extends")));const p={};var d=require(path_1.default.resolve(c,"loader"));loader=d.default;for(const g of i)p[g]=await loader.import(g);var u=module_1.default;const f=u._resolveFilename,h=(u._resolveFilename=function(e){return n(e)?e:f.apply(this,arguments)},u._load);u._load=function(e){if(n(e)){var r=p[e];if(r)return r;throw new Error(`Can not load engine module: ${e}. Valid engine modules are: `+Object.keys(p).join(","))}return h.apply(this,arguments)},i.includes("cc")&&postProcess(l)}catch(e){let r="preload engine failed!";throw console.error(r),console.error(e),e instanceof Error&&(r+=(e.stack,e.stack)),Editor.Message.send("engine","import-engine-error",r),e}}async function loadDynamic(e){if(loader)return loader.import(e);throw new Error(`Failed to load engine module ${e}. `+"Loader has not been initialized. You should call preload() first.")}function postProcess(e){let r;r=e?{editor:e}:require("@base/electron-base-ipc").sendSync("packages-engine:query-engine-info");var o,e=require("v-stacks"),e=("__MAIN__"in window&&((o=new Error("Try not to run the engine in the window process.")).stack=e.ignoreStack(o.stack,1),console.warn(o)),"Import engine");console.time(e);let n;try{n=require("cc")}catch(e){let r="require cc failed!";throw e instanceof Error&&(r+=(e.stack,e.stack)),Editor.Message.send("engine","import-engine-error",r),e}console.timeEnd(e),window.ccm=n,require("./polyfill/engine"),globalThis.EditorExtends.init(),require("./overwrite")(n,r)}exports.default=preload,exports.loadDynamic=loadDynamic;