"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const cc_1=require("cc"),types_1=require("./types"),{CLASS_PROP_TYPE_OFFSET,MASK_CLASS,OBJ_DATA_MASK,CUSTOM_OBJ_DATA_CLASS}=cc_1.deserialize._macros;class Type{constructor(e){this.properties=new Map,this.nodes=new Array,this.setNodeProperties(e),this.nodes.push(e)}setNodeProperties(t){var s=this.properties;for(const e of t.simpleKeys)s.set(e,0);for(let e=0;e<t.advanceds.length;e+=2){var r=t.advanceds[e];s.set(r,t.advanceds[e+1])}}addNode(t){var s=this.properties;let r=!1;for(const e of t.simpleKeys)if(s.has(e)){if(0!==s.get(e))return!1}else r=!0;for(let e=0;e<t.advanceds.length;e+=2){var a=t.advanceds[e];if(s.has(a)){if(s.get(a)!==t.advanceds[e+1])return!1}else r=!0}return r&&this.setNodeProperties(t),this.nodes.push(t),!0}static shouldUseSameMask(e){var t=this.simpleKeys,s=e.simpleKeys,r=this.advanceds,a=e.advanceds;if(t.length!==s.length||r.length!==a.length)return!1;for(let e=0;e<t.length;++e)if(t[e]!==s[e])return!1;for(let e=0;e<r.length;e+=2)if(r[e]!==a[e])return!1;return!0}dump(e,t,s){var r=new types_1.TraceableDict,a=new types_1.TraceableDict,n=new Array;for(let e=0;e<this.nodes.length;++e){var i=this.nodes[e],o=n.find(Type.shouldUseSameMask,i);if(o)s.trace(o,i.dumped,OBJ_DATA_MASK);else{var d=[types_1.TraceableDict.PLACEHOLDER];for(let e=0;e<i.simpleKeys.length;++e){var c=i.simpleKeys[e];r.traceString(c,d,d.length),d.push(types_1.TraceableDict.PLACEHOLDER)}const f=d.length;for(let e=0;e<i.advanceds.length;e+=2){var l=i.advanceds[e];a.traceString(l,d,d.length),d.push(types_1.TraceableDict.PLACEHOLDER)}d.push(f),t.trace(this,d,MASK_CLASS),s.trace(i,i.dumped,OBJ_DATA_MASK).result=d,n.push(i)}}var p=r.dump(),h=a.dump(p.length),u=p.concat(h);const f=CLASS_PROP_TYPE_OFFSET+1-p.length;p=h.map(e=>this.properties.get(e)),h=[e,u,f,...p];t.get(this).result=h}}function registerType(e,t){for(const s of e)if(s.addNode(t))return;const s=new Type(t);e.push(s)}function default_1(t){var e,s,r=new types_1.TraceableDict,a=new types_1.TraceableDict,n=new Map;for(let e=0;e<t.length;++e){var i=t[e],o=i.ctor;if(i instanceof types_1.CustomClassNode)r.traceString(o,i.dumped,CUSTOM_OBJ_DATA_CLASS);else{let e=n.get(o);e||(e=[],n.set(o,e)),registerType(e,i)}}for([e,s]of n)for(const d of s)d.dump(e,r,a);return{sharedClasses:r.dump(),sharedMasks:a.dump()}}exports.default=default_1;