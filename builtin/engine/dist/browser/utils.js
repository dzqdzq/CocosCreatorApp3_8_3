"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.rebuildImportMaps=exports.rebuild=exports.registerI18n=exports.compileEngine=void 0;const fs_extra_1=require("fs-extra"),path_1=require("path"),i18n=require("@base/electron-i18n"),engineCompiler=require("../../static/engine-compiler/dist/index");async function compileEngine(e,r){return engineCompiler.compileEngine(e,r)}function registerI18n(e){try{const i=(0,path_1.join)(e,"editor","i18n");(0,fs_extra_1.existsSync)(i)&&(0,fs_extra_1.statSync)(i).isDirectory()&&(0,fs_extra_1.readdirSync)(i).map(e=>{const t=(0,path_1.join)(i,e);var r;(0,fs_extra_1.statSync)(t).isDirectory()&&(r=(0,fs_extra_1.readdirSync)(t).reduce((e,r)=>{r=(0,path_1.join)(t,r);try{var i=require(r);e.ENGINE?e.ENGINE=Object.assign(e.ENGINE,i):e.ENGINE=i}catch(e){}return e},{}),i18n.register(r,e))})}catch(e){e instanceof Error&&console.log("Load I18n files failed: "+e.message)}}async function rebuild(e){return engineCompiler.rebuild(e)}async function rebuildImportMaps(){return engineCompiler.rebuildImportMaps()}exports.compileEngine=compileEngine,exports.registerI18n=registerI18n,exports.rebuild=rebuild,exports.rebuildImportMaps=rebuildImportMaps;