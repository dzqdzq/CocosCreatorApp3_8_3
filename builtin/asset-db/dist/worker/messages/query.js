"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.MessageMap=void 0;const asset_db_1=require("@editor/asset-db"),fs_extra_1=require("fs-extra"),asset_db_manager_1=require("../asset-db-manager"),asset_handler_manager_1=require("../manager/asset-handler-manager"),utils_1=require("../utils"),asset_manager_1=require("../manager/asset-manager");exports.MessageMap={"generate-available-url":e=>{var a;return e&&"string"==typeof e?(a=(0,asset_db_1.queryPath)(e))?(0,fs_extra_1.existsSync)(a)?(a=Editor.Utils.File.getName(a),(0,asset_db_1.queryUrl)(a)):e:"":null},"query-path":e=>{if(!e||"string"!=typeof e)throw new Error("parameter error");if(e.startsWith("db://")){var a=e.substr(5);if(asset_db_manager_1.assetDBManager.assetDBMap[a])return asset_db_manager_1.assetDBManager.assetDBMap[a].options.target;a=(0,utils_1.url2uuid)(e);a&&(0,asset_db_1.queryAsset)(a)&&(e=a)}return(0,asset_db_1.queryPath)(e)},"query-uuid":e=>asset_manager_1.assetManager.queryAssetUUID(e),"query-url":e=>{var a;if(e&&"string"==typeof e)return a=e.substr(Editor.Project.path.length+1),asset_db_manager_1.assetDBManager.assetDBMap[a]?"db://"+a:(0,asset_db_1.queryUrl)(e);throw new Error("parameter error")},"query-db-info":(e="")=>{return"string"==typeof e&&""!==e&&(e.startsWith("db://")&&(e=e.split("/").filter(Boolean)[1]),asset_db_manager_1.assetDBManager.assetDBInfo[e])||null},"query-db-list":()=>Object.keys(asset_db_manager_1.assetDBManager.assetDBMap),"query-missing-asset-info":e=>(0,asset_db_1.queryMissingInfo)(e),"query-assets":async(e,a)=>asset_manager_1.assetManager.queryAssetInfos(e,a),"query-asset-info":async(e,a)=>asset_manager_1.assetManager.queryAssetInfo(e,a),"query-asset-mtime":async e=>{if(e.startsWith("db://")){var a=e.substr(5);if(asset_db_manager_1.assetDBManager.assetDBMap[a])return asset_manager_1.assetManager.queryDBAssetInfo(a);e=(0,utils_1.url2uuid)(e)}return asset_manager_1.assetManager.queryAssetMtime(e)},"query-asset-meta":async e=>asset_manager_1.assetManager.queryAssetMeta(e),"query-asset-dependencies":async(e,a="asset")=>asset_manager_1.assetManager.queryAssetDependencies(e,a),"query-asset-users":async(e,a="asset")=>asset_manager_1.assetManager.queryAssetUsers(e,a),"query-asset-data":async a=>{let s=null;return(0,asset_db_1.forEach)(e=>{e.dataManager.dataMap[a]&&(s=e.dataManager.dataMap[a])}),s},"query-create-list":async()=>asset_handler_manager_1.assetHandlerManager.getCreateMap(),"query-icon-config-map":async()=>asset_handler_manager_1.assetHandlerManager.queryIconConfigMap(),"query-asset-config-map":async()=>asset_handler_manager_1.assetHandlerManager.queryAssetConfigMap(),"query-asset-thumbnail":async(e,a)=>{var s=(0,asset_db_1.queryAsset)(e);if(s)return asset_handler_manager_1.assetHandlerManager.generateThumbnail(s,a);throw new Error(`Can not find asset ${e}, please check your params`)},"query-asset-userData-config":async e=>{if(Editor.Utils.UUID.isUUID(e)){var a=(0,asset_db_1.queryAsset)(e);if(a)return asset_handler_manager_1.assetHandlerManager.queryUserDataConfig(a);throw new Error(`Can not find asset ${e}, please check your params`)}return asset_handler_manager_1.assetHandlerManager.queryUserDataConfigDefault(e)}};