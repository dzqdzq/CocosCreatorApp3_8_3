"use strict";var __createBinding=this&&this.__createBinding||(Object.create?function(e,t,s,a){void 0===a&&(a=s);var r=Object.getOwnPropertyDescriptor(t,s);r&&("get"in r?t.__esModule:!r.writable&&!r.configurable)||(r={enumerable:!0,get:function(){return t[s]}}),Object.defineProperty(e,a,r)}:function(e,t,s,a){e[a=void 0===a?s:a]=t[s]}),__setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),__importStar=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var s in e)"default"!==s&&Object.prototype.hasOwnProperty.call(e,s)&&__createBinding(t,e,s);return __setModuleDefault(t,e),t},__importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.assetDBManager=exports.AssetDBManager=void 0;const assetdb=__importStar(require("@editor/asset-db")),events_1=__importDefault(require("events")),fs_extra_1=require("fs-extra"),path_1=require("path"),console_1=require("./console"),utils_1=require("./utils"),plugin_1=__importDefault(require("./manager/plugin")),asset_handler_manager_1=require("./manager/asset-handler-manager"),AssetDBPriority={internal:99,assets:98};class AssetDBManager extends events_1.default{constructor(){super(...arguments),this.assetDBMap={},this.hasPause=!1,this.startPause=!1,this.ready=!1,this.state="free",this.assetDBInfo={},this.startupDatabaseQueue=[],this.waitingTaskQueue=[],this.waitingRefreshAsset=[],this.reimportCheck=!1,this.assetBusyTask=new Set,this.pluginManager=plugin_1.default,this.assetHandlerManager=asset_handler_manager_1.assetHandlerManager}get isPause(){return this.hasPause||this.startPause}get assetBusy(){return 0<this.assetBusyTask.size}get free(){return this.ready&&!this.isPause&&"free"!==this.state&&!this.assetBusy}async start(){console_1.newConsole.trackMemoryStart("asset-db:worker-init: preStart"),Editor.Metrics.trackTimeStart("asset-db:start-database"),await this.pluginManager.runHook("beforePreStart",[this.assetDBInfo]),await this._preStart(),await this.pluginManager.runHook("afterPreStart",[this.assetDBInfo]),console_1.newConsole.trackMemoryEnd("asset-db:worker-init: preStart"),console_1.newConsole.trackMemoryStart("asset-db:worker-init: startup"),await this._startup(),console_1.newConsole.trackMemoryEnd("asset-db:worker-init: startup"),this.ready=!0,await this.pluginManager.runHook("beforeReady"),Editor.Metrics.trackTimeEnd("asset-db:start-database",{output:!0}),Editor.Metrics.trackTimeEnd("asset-db:ready",{output:!0}),Editor.Message.broadcast("asset-db:ready"),await this.pluginManager.runHook("afterReady"),this.assetHandlerManager.activateRegisterAll(),this.step(),console_1.newConsole.clearAuto()}async init(e){console_1.newConsole.trackMemoryStart("asset-db:worker-init: initEngine"),await initEngine(e),console_1.newConsole.trackMemoryEnd("asset-db:worker-init: initEngine"),Editor.Profile.__protected__.on("change",(e,t,s,a)=>{"local"!==e&&"global"!==e&&"project"!==e||(e=this.pluginManager.assetDBProfileMap[t+`(${s})`])&&this.ready&&(a?(t=this.pluginManager.getAssetDBInfo(e))&&(this.assetDBInfo[t.name]=patchAssetDBInfo(t),this.startDB(this.assetDBInfo[e],!0)):this._removeDB(e))}),Editor.Task.__protected__.updateSyncTask("import-asset","init asset-db ..."),await this.pluginManager.init(),await this.pluginManager.runHook("beforeInit",[e]),await this.assetHandlerManager.init(),this.reimportCheck=await Editor.Profile.getConfig("asset-db","flagReimportCheck"),this.assetDBInfo.internal=patchAssetDBInfo({name:"internal",target:(0,path_1.join)(e.engine,"./editor/assets"),readonly:!Editor.App.dev,visible:!0,ignoreGlob:""});var t=await Editor.Profile.getConfig("asset-db","ignoreGlob"),t=(this.assetDBInfo.assets=patchAssetDBInfo({name:"assets",target:(0,path_1.join)(Editor.Project.path,"assets"),readonly:!1,visible:!0,ignoreGlob:t}),await this.pluginManager.queryAssetDBInfos());this.pluginManager.on("register",async(e,t)=>{t.assetHandlerInfos&&this.assetHandlerManager.register(e,t.assetHandlerInfos,t.internal);t=await this.pluginManager.queryAssetDBInfo(e);t&&(console.debug(`start custom db ${t.name}...`),this.addDB(t))}),this.pluginManager.on("unregister",async(e,t)=>{t.assetHandlerInfos&&this.assetHandlerManager.unregister(e,t.assetHandlerInfos),await this._removeDB(e)});for(const e of t)this.assetDBInfo[e.name]=patchAssetDBInfo(e);await this.pluginManager.runHook("afterInit",[e])}async _preStart(){for(const e of Object.keys(this.assetDBInfo).sort((e,t)=>(AssetDBPriority[t]||0)-(AssetDBPriority[e]||0)))await this.startDB(this.assetDBInfo[e],!1)}isBusy(){for(const e in this.assetDBMap)if(this.assetDBMap[e])if(0<this.assetDBMap[e].assetProgressInfo.wait)return!0;return!1}hasDB(e){return!!this.assetDBMap[e]}async startDB(e,t=!0){this.hasDB(e.name)||(await this._createDB(e),this.ready&&await this.pluginManager.runHook("beforeStartDB",[e]),await this._startDB(e.name,t),this.ready&&await this.pluginManager.runHook("afterStartDB",[e]),Editor.Message.broadcast("asset-db:db-ready",e.name))}path2url(t,e){if(t==="db://"+name)return t;let s;if(!(s=e?exports.assetDBManager.assetDBMap[e]:Object.values(exports.assetDBManager.assetDBMap).find(e=>Editor.Utils.Path.contains(e.options.target,t))))return console.error("Can not find asset db with asset path: "+t),t;let a=(0,path_1.relative)(s.options.target,t);return a=a.replace(/\\/g,"/"),`db://${s.options.name}/`+a}async _createDB(e){var t;e.target.includes("app.asar")&&Editor.Utils.Path.contains(Editor.App.path,e.target)&&(t=e.target.replace("app.asar","app.asar.unpacked"),(0,fs_extra_1.existsSync)(t)?e.target=t:console.warn(`[asset-db] The current database address(${e.target}) is in the installation package and may cause problems, please move to the unpack directory`)),(0,fs_extra_1.ensureDirSync)(e.library),(0,fs_extra_1.ensureDirSync)(e.temp),e.flags={reimportCheck:this.reimportCheck};const s=assetdb.create(e),a=(this.assetDBMap[e.name]=s,await this.pluginManager.registerImporterList(s),s.importerManager.find);return s.importerManager.find=async e=>{var t=await this.assetHandlerManager.findImporter(e,!0);return t||(!(t=await a.call(s.importerManager,e))||"*"===t.name)&&await this.assetHandlerManager.getDefaultImporter(e)||t},this.emit("db-created",s),s}async _startDB(s,e=!0){const a=this.assetDBMap[s];Editor.Metrics.trackTimeStart(`asset-db:worker-startup-database[${a.options.name}]`),console_1.newConsole.trackMemoryStart(`asset-db:worker-startup-database[${a.options.name}]`),this.assetDBInfo[s].state="start";var t=getPreImporterHandler(this.assetDBInfo[s].preImportExtList);t&&(a.preImporterHandler=t);const r={afterScan:afterScan};if((0,fs_extra_1.existsSync)(this.assetDBInfo[s].target)||((0,fs_extra_1.ensureDirSync)(this.assetDBInfo[s].target),e=!0),!e)return new Promise(async e=>{const t={name:a.options.name,afterPreImportResolve:()=>{console.error(`Start database ${s} failed!`),t.finish&&t.finish()}};r.afterPreImport=async()=>(await afterPreImport(a),console.debug(`Preimport db ${s} success`),e(),new Promise(e=>{t.afterPreImportResolve=e})),r.afterStart=()=>{t.finish&&t.finish()},this.startupDatabaseQueue.push(t),a.start({hooks:r}),this.assetDBInfo[s].state="start"});r.afterPreImport=async()=>{await afterPreImport(a)},console.debug(`start asset-db(${s})...`),await a.start({hooks:r}),this.assetDBInfo[s].state="startup",this.emit("db-started",a),Editor.Metrics.trackTimeEnd(`asset-db:worker-startup-database[${a.options.name}]`,{output:!0}),console_1.newConsole.trackMemoryEnd(`asset-db:worker-startup-database[${a.options.name}]`)}async _startup(){for(let e=0;e<this.startupDatabaseQueue.length;e++){const s=this.startupDatabaseQueue[e];console.debug(`Start up the '${s.name}' database...`),Editor.Metrics.trackTimeStart(`asset-db: startup '${s.name}' database...`),await new Promise(async e=>{s.finish=e,s.afterPreImportResolve()}),Editor.Metrics.trackTimeEnd(`asset-db:worker-startup-database[${s.name}]`,{output:!0}),console_1.newConsole.trackMemoryEnd(`asset-db:worker-startup-database[${s.name}]`),this.assetDBInfo[s.name].state="startup";var t=this.assetDBMap[s.name];this.emit("db-started",t),Editor.Metrics.trackTimeEnd(`asset-db: startup '${s.name}' database...`)}this.step()}async addDB(e){this.assetDBInfo[e.name]=patchAssetDBInfo(e),await this.startDB(this.assetDBInfo[e.name],!0)}async removeDB(t){return this.isPause?(console.log(Editor.I18n.t("asset-db.assetDBPauseTips",{operate:"removeDB"})),new Promise(e=>{this._addTaskToQueue({func:this._removeDB.bind(this),args:[t],resolve:e})})):this._removeDB(t)}async _operate(t,...s){var a=t+Date.now();t.endsWith("Asset")&&this.assetBusyTask.add(a);try{var e=await this[t](...s);return this.assetBusyTask.delete(a),e}catch(e){console.error(t+" failed with args: "+s.toString()),console.error(e),this.assetBusyTask.delete(a)}}async _removeDB(e){var t,s=this.assetDBMap[e];s&&(t=this.assetDBInfo[e],this.ready&&await this.pluginManager.runHook("beforeStopDB",[t]),await s.stop(),this.ready&&await this.pluginManager.runHook("afterStopDB",[t]),this.emit("db-removed",s),delete this.assetDBMap[e],delete this.assetDBInfo[e],Editor.Message.broadcast("asset-db:db-close",e))}async refresh(){if(this.ready)return"free"!==this.state||this.isPause||this.assetBusy?(this.isPause&&console.log(Editor.I18n.t("asset-db.assetDBPauseTips",{operate:"refresh"})),new Promise(e=>{this._addTaskToQueue({func:this._refresh.bind(this),args:[],resolve:e})})):this._refresh()}async _refresh(){this.state="busy",await this.pluginManager.runHook("beforeRefresh"),Editor.Metrics.trackTimeStart("asset-db:refresh-all-database");for(const e in this.assetDBMap)if(this.assetDBMap[e]){const t=this.assetDBMap[e];await t.refresh(t.options.target,{ignoreSelf:!0,hooks:"assets"===e?{afterPreImport:async()=>{await afterPreImport(t)}}:{}}),console.debug(`refresh db ${e} success`)}else console.debug(`Get assetDB ${e} form manager failed!`);Editor.Metrics.trackTimeEnd("asset-db:refresh-all-database",{output:!0}),await this.pluginManager.runHook("afterRefresh"),Editor.Message.broadcast("asset-db:refresh-finish"),this.state="free",this.step()}async autoRefreshAssetLazy(e){return this.waitingRefreshAsset.includes(e)||this.waitingRefreshAsset.push(e),this.autoRefreshTimer&&clearTimeout(this.autoRefreshTimer),new Promise(s=>{this.autoRefreshTimer=setTimeout(async()=>{var e="autoRefreshAssetLazy"+Date.now(),t=(this.assetBusyTask.add(e),JSON.parse(JSON.stringify(this.waitingRefreshAsset)));this.waitingRefreshAsset.length=0,await Promise.all(t.map(e=>assetdb.refresh(e))),this.assetBusyTask.delete(e),this.step(),s(!0)},100)})}async resume(){(this.hasPause||this.startPause)&&(this.hasPause=!1,this.startPause=!1,Editor.Message.broadcast("asset-db:resume"),console_1.newConsole.record(),console.log("Asset DB is resume!"),await this.step())}async addTask(t,s){return this.isPause||"busy"===this.state?(console.log(Editor.I18n.t("asset-db.assetDBPauseTips",{operate:t.name})),new Promise(e=>{this._addTaskToQueue({func:t,args:s,resolve:e})})):t(...s)}_addTaskToQueue(e){var t=this.waitingTaskQueue[this.waitingTaskQueue.length-1],s={func:e.func,args:e.args};e.resolve&&(s.resolves=[e.resolve]),!t||t.func.name!==s.func.name||s.args.toString()!==t.args.toString()?(this.waitingTaskQueue.push(s),this.step()):e.resolve&&(t.resolves?t.resolves.push(e.resolve):t.resolves=s.resolves,this.step())}async step(){if(this.startPause&&this.waitPauseHandle&&(this.waitPauseHandle(!0),this.waitPauseHandle=void 0),!this.isPause&&this.waitingTaskQueue.length&&"busy"!==this.state){let t=Array.from(this.waitingTaskQueue);const a=[];t=t.filter(e=>!(this.assetBusy&&(!this.assetBusy||"_refresh"===e.func.name)&&(a.push(e),1))),this.waitingTaskQueue=a;for(let e=0;e<t.length;e++){var s=t[e];try{if("_refresh"===s.func.name&&this.assetBusy)this.waitingTaskQueue.push(s);else{const r=await s.func(...s.args);if(!s.resolves)return;s.resolves.forEach(e=>e(r))}}catch(e){console.warn(e)}}}}async pause(t="unkown"){return this.startPause=!0,this.isBusy()?(this.hasPause&&(this.waitPausePromiseTask=new Promise(e=>{this.waitPauseHandle=()=>{this.waitPausePromiseTask=void 0,Editor.Message.broadcast("asset-db:pause",t),console.log(`Asset DB is paused with ${t}!`),console_1.newConsole.stopRecord(),this.hasPause=!0,console_1.newConsole.stopRecord(),e(!0)}}),setTimeout(()=>{this.waitPausePromiseTask&&(0,utils_1.decidePromiseState)(this.waitPausePromiseTask).then(e=>{e===utils_1.PROMISE_STATE.PENDING&&(this.hasPause=!0,Editor.Message.broadcast("asset-db:pause",t),this.waitPauseHandle(),console.debug("Pause asset db time out"))})},12e4)),this.waitPausePromiseTask):(this.hasPause=!0,Editor.Message.broadcast("asset-db:pause",t),console.log(`Asset DB is paused with ${t}!`),!0)}}function patchAssetDBInfo(e){return{name:e.name,target:Editor.Utils.Path.normalize(e.target),readonly:!!e.readonly,temp:Editor.Utils.Path.normalize((0,path_1.join)(Editor.Project.path,"temp/asset-db",e.name)),library:Editor.Utils.Path.normalize((0,path_1.join)(Editor.Project.path,"library")),level:4,ignoreGlob:e.ignoreGlob,ignoreFiles:[".DS_Store",".rename_temp"],visible:e.visible,state:"none",preImportExtList:e.preImportExtList||[]}}exports.AssetDBManager=AssetDBManager,exports.assetDBManager=new AssetDBManager;const layerMask=[];for(let e=0;e<=19;e++)layerMask[e]=1<<e;async function initEngine(e){window.CC_PREVIEW=!1,Editor.Metrics.trackTimeStart("asset-db:require-engine-code"),Editor.Task.__protected__.updateSyncTask("import-asset","preload cc engine ...");var t=(await Promise.resolve().then(()=>__importStar(require("cc/preload"))))["default"],s=(await t({requiredModules:["cc","cc/editor/populate-internal-constants","cc/editor/serialization","cc/editor/animation-clip-migration","cc/editor/exotic-animation","cc/editor/new-gen-anim","cc/editor/offline-mappings","cc/editor/embedded-player","cc/editor/color-utils","cc/editor/custom-pipeline"]}),Editor.Metrics.trackTimeEnd("asset-db:require-engine-code",{output:!0}),await Editor.Profile.getProject("engine","modules.includeModules"));let a="";var r=["physics-cannon","physics-ammo","physics-builtin","physics-physx"];for(let e=0;e<r.length;e++)if(0<=s.indexOf(r[e])){a=r[e];break}var t=await Editor.Profile.getProject("project","physics"),i=await Editor.Profile.getProject("engine","macroConfig"),n=await Editor.Profile.getProject("project","layer"),o=await Editor.Profile.getProject("project","sorting-layer")||{},n=n.map(t=>{var e=layerMask.findIndex(e=>t.value===e);return{name:t.name,bit:e}}),o=o.layers||[],u=await Editor.Profile.getProject("project","general.highQuality"),i={debugMode:cc.debug.DebugMode.WARN,overrideSettings:{engine:{builtinAssets:[],macros:i,sortingLayers:o,customLayers:n},profiling:{showFPS:!1},screen:{frameRate:30,exactFitScreen:!0},rendering:{renderMode:3,highQualityMode:u},physics:Object.assign(Object.assign({},t),{physicsEngine:a,enabled:!1}),assets:{importBase:(0,path_1.join)(Editor.Project.path,"library"),nativeBase:(0,path_1.join)(Editor.Project.path,"library")}},exactFitScreen:!0};cc.physics.selector.runInEditor=!0,await cc.game.init(i),Editor.Task.__protected__.updateSyncTask("import-asset","init engine success")}function getPreImporterHandler(t){return t&&t.length?function(e){e=(0,path_1.extname)(e);return!e||t.includes(e)}:null}const afterScan=async function(t){let s=0,a=0,r=0;for(let e=0;e<t.length;e++){var i=t[e],n=(0,path_1.extname)(i);n?".chunk"===n?(t.splice(e,1),t.splice(s+a,0,i),a+=1):".effect"===n&&(t.splice(e,1),t.splice(s+a+r,0,i),r+=1):(t.splice(e,1),t.splice(s,0,i),s+=1)}};async function afterPreImport(e){e.taskManager.start(),await e.taskManager.waitQueue(),e.taskManager.stop()}