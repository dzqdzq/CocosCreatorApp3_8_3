"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.Metrics=void 0;const utils_1=require("../utils"),log_1=require("./log");class Metrics{constructor(){this._clientID="",this._userID="",this._metricsDebugMode=!1,this._init=!1,this._eventGroup={},this._metricsObservers=[]}get trackInfoList(){return Editor.Metrics.__protected__.getTrackInfoList()}get trackTimeStartMap(){return Editor.Metrics.__protected__.getTrackTimeStartMap()}get processMemoryMap(){return Editor.Metrics.__protected__.getProcessMemoryMap()}get metricInitData(){return Editor.Metrics.__protected__.getMetricInitData()}set metricInitData(e){Editor.Metrics.__protected__.setMetricInitData(e)}get trackAwaitHandler(){return Editor.Metrics.__protected__.getTrackAwaitHandler()}replyAsyncFunction(t,e,r){var i=this.trackAwaitHandler.findIndex(e=>e.index===t),s=this.trackAwaitHandler[i];s&&(this.trackAwaitHandler.splice(i,1),e?s.reject(e):s.resolve(r))}addMetricsObserver(e){this._metricsObservers.includes(e)||this._metricsObservers.push(e)}getTrackInfoMapByTime(t){var e=this.trackInfoList.findIndex(e=>e.index===t),r=this.trackInfoList[e];if(r)return this.trackInfoList.splice(e,1),r}register(){var e=Editor.Metrics.__protected__;e.register("init",this.init.bind(this)),e.register("clear",this.clear.bind(this)),e.register("close",this.close.bind(this)),e.register("trackEvent",this.trackEvent.bind(this)),e.register("trackException",this.trackException.bind(this)),e.register("trackProcessMemory",this.trackProcessMemory.bind(this)),e.register("trackTimeStart",this.trackTimeStart.bind(this)),e.register("trackTimeEnd",this.trackTimeEnd.bind(this)),e.register("trackProcessMemoryStart",this.trackProcessMemoryStart.bind(this)),e.register("trackProcessMemoryEnd",this.trackProcessMemoryEnd.bind(this)),e.register("_trackEventWithTimer",this._trackEventWithTimer.bind(this)),e.register("_sendEventGroup",this._sendEventGroup.bind(this)),e.register("_trackCrashEvent",this._trackCrashEvent.bind(this)),setInterval(()=>{this.sync()},18e5)}async sync(){this.metricInitData&&(await this.init(),this.metricInitData=void 0);var t=[...this.trackInfoList];for(let e=0;e<t.length;e++){var r=t[e],i=r.index,s=this[r.funcName];if(s){let e=null,t=null;try{var o="AsyncFunction"===s.constructor.name;e=o?await Promise.resolve(s.bind(this)(i)):s.bind(this)(i)}catch(e){t=new Error(e.message)}this.replyAsyncFunction(i,t,e)}else console.debug("Function not queried "+r.funcName)}Editor.Metrics.__protected__.reset()}clear(){log_1.logMgr.collectToFile("[clear]",JSON.stringify({trackInfoList:this.trackInfoList,trackAwaitHandler:this.trackAwaitHandler}))}async init(){if(this.metricInitData){var e=this.metricInitData["outputMetricLog"],t=(this._clientID=await(0,utils_1.getClientID)(),await Editor.User.getData()),t=(this._userID=t&&t.cocos_uid?t.cocos_uid:"-1",this._metricsDebugMode=!!await Editor.Profile.getConfig("utils","features.analytics-debug"),await log_1.logMgr.init(e,this._metricsDebugMode),!!await Editor.Profile.getConfig("utils","features.disable-analytics-ga")),e=(t||this.addMetricsObserver(require("../observers/google-metrics-observer")),this.addMetricsObserver(require("../observers/google-metrics-observer-v4")),this.addMetricsObserver(require("../observers/cocos-metrics-observer")),(0,utils_1.getMainDisplay)());const r={cid:this._clientID,uid:this._userID,debug:this._metricsDebugMode||!1,resolution:e.size.width+"x"+e.size.height,scaleFactor:""+e.scaleFactor};this._metricsObservers.forEach(e=>{e.sendAppInfo(r)}),this._init=!0}}trackEvent(e){if(this._userID){e=this.getTrackInfoMapByTime(e);if(e){const t={cid:this._clientID,uid:this._userID,debug:this._metricsDebugMode||!1,useTestServer:this._metricsDebugMode||!1},r=e["info"];try{r.sendToCocosAnalyticsOnly||delete r.sendToCocosAnalyticsOnly,r.sendToNewCocosAnalyticsOnly||delete r.sendToNewCocosAnalyticsOnly}catch(e){console.debug(e)}r.projectID=Editor.Project.uuid||"";try{log_1.logMgr.collectToFile("[trackEvent]",JSON.stringify(r)),this._metricsObservers.forEach(e=>{e.trackEvent(r,t)})}catch(e){console.debug(e)}}}}close(){const t={cid:this._clientID,uid:this._userID,debug:this._metricsDebugMode||!1,useTestServer:this._metricsDebugMode||!1};log_1.logMgr.collectToFile("[close]",JSON.stringify(t)),this._metricsObservers.forEach(e=>{e.close(t)})}_trackEventWithTimer(e){e=this.getTrackInfoMapByTime(e);if(e&&e.info){e=e.info;try{log_1.logMgr.collectToFile("[trackEventWithTimer]",JSON.stringify(e)),this._eventGroup[e.category]||(this._eventGroup[e.category]={}),this._eventGroup[e.category][e.id]||(this._eventGroup[e.category][e.id]={}),"number"==typeof this._eventGroup[e.category][e.id]?this._eventGroup[e.category][e.id]=(100*(this._eventGroup[e.category][e.id]+e.value)|0)/100:this._eventGroup[e.category][e.id]=e.value,this._timer||(this._timer=setTimeout(()=>{this._timer&&clearTimeout(this._timer),this._timer=void 0,this._sendEventGroup()},3e5))}catch(e){console.debug(e)}}}trackException(e){if(this._userID){e=this.getTrackInfoMapByTime(e);if(e){const t=e.info,r={cid:this._clientID,uid:this._userID,debug:this._metricsDebugMode||!1};try{this._metricsObservers.forEach(e=>{e.trackException(t,r)}),log_1.logMgr.collectToFile("[trackException]",JSON.stringify(t))}catch(e){console.debug(e)}}}}trackProcessMemory(e){var t,e=this.getTrackInfoMapByTime(e);e&&(t=`[trackMemory][${process}]`,e=""+JSON.stringify(e.memoryInfo),log_1.logMgr.collectToFile(t,e),console.debug(t+":"+e))}trackTimeStart(){}trackTimeEnd(e){var t,r,i,e=this.getTrackInfoMapByTime(e);return e&&e.info?(t=(r=e.info).message,r=r.options,i=this.trackTimeStartMap,r.value||i.has(t)?(e=r.value||(e.time||Date.now())-i.get(t),i.delete(t),log_1.logMgr.collectToFile("[trackTime]"+t,e+"ms"),r.output&&(i="string"==typeof r.label&&(Editor.I18n.t(r.label.replace("i18n:",""))||r.label)||t,console.debug(i+` (${e}ms)`)),e):void console.debug(`trackTimeEnd failed! Can not find the track time ${t} start`)):-1}trackProcessMemoryStart(e){}async trackProcessMemoryEnd(e){var t,r,i,s,e=this.getTrackInfoMapByTime(e);return e&&e.info?(e=e.info,r=(t=this.processMemoryMap).get(e.message)||0,s=(i=e.memory.heapUsed)-r,t.delete(e.message),log_1.logMgr.collectToFile("[trackProcessMemory]"+e.message,{start:r,end:i,incremental:s}),s):-1}_sendEventGroup(){if(Object.keys(this._eventGroup).length){log_1.logMgr.collectToFile("[sendCollectData]",String(Object.keys(this._eventGroup).length));const t=JSON.parse(JSON.stringify(this._eventGroup));this._eventGroup={},Object.keys(t).forEach(e=>{Editor.Metrics.trackEvent({category:e,value:t[e],sendToNewCocosAnalyticsOnly:!0})})}}async _trackCrashEvent(e){try{if(!this._userID)throw new Error("User ID invalid");var t,r,i=this.getTrackInfoMapByTime(e);if(i)return t=i.info,r={cid:this._clientID,uid:this._userID,debug:this._metricsDebugMode||!1,useTestServer:this._metricsDebugMode||!1},t.projectID=Editor.Project.uuid||"",log_1.logMgr.collectToFile("[trackCrashEvent]",JSON.stringify(t)),await require("../observers/cocos-metrics-observer")._trackCrashEvent(t,r)}catch(e){throw log_1.logMgr.collectToFile("[trackCrashEvent fail]",e),console.debug(e),e}}}exports.Metrics=Metrics,exports.default=new Metrics;