"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.unload=exports.load=exports.methods=void 0;const clip_cache_1=require("./clip-cache");async function load(){await clip_cache_1.animationClipCacheManager.init()}function unload(){}exports.methods={open(){Editor.Panel.open("animator")},openDocs(){Editor.Message.send("program","open-url",Editor.Utils.Url.getDocUrl("animation/animation.html"))},queryLatestClipCache(e){return clip_cache_1.animationClipCacheManager.queryLatestCache(e)},saveClipCacheToFile(e,a){return clip_cache_1.animationClipCacheManager.save(e,a)},updateCacheConfig(){clip_cache_1.animationClipCacheManager.updateConfig()},async dropClipToNode(e,a){var o=e.value;for(const i of a){var t=i.uuid.value;await Editor.Message.request("scene","execute-scene-script",{name:"animator",method:"createAniCompFromAsset",args:[t,[o]]})}}},exports.load=load,exports.unload=unload;