"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.RenameCommand=exports.Command=exports.CommandType=void 0;const path_1=require("path"),asserts_1=require("../utils/asserts"),path_2=require("../utils/path");var CommandType=exports.CommandType||(exports.CommandType={});CommandType[CommandType.rename=0]="rename";class Command{}class RenameCommand extends(exports.Command=Command){static _createDescription(e,t){return`Rename ${(0,path_2.resolveFileName)(e)} to ${(0,path_2.resolveFileName)(t)}.`}static _createID(e,t){return this._createDescription(e,t)}static create(e,t){return new RenameCommand(e,t)}constructor(e,t){super(),this.oldFilePath=e,this.newFilePath=t,this._executed=!1,this.oldFilePath=(0,path_2.resolveFileName)(e),this.oldFilePathWithOutExt=(0,path_2.removeTSExt)(this.oldFilePath),this.newFilePath=(0,path_2.resolveFileName)(t),this.newFilePathWithOutExt=(0,path_2.removeTSExt)(this.newFilePath),this.id=RenameCommand._createID(e,t),this.description=RenameCommand._createDescription(e,t),this.commandType=CommandType.rename}applyImportChanges(a,i,s,r){(0,asserts_1.asserts)(this._newFileDBInfo),(0,asserts_1.asserts)(this._newFileDBURL),(0,asserts_1.asserts)(this._oldFileDBInfo),(0,asserts_1.asserts)(this._newFileDBInfo);var h=(0,path_2.removeTSExt)(i),e=i===this.newFilePath,l=Editor.Utils.Path.contains(this._newFileDBInfo.target,i),o=e||!l;for(let e=r.length-1;0<=e;e--){var{span:n,newText:d}=r[e];let t=d;var m=(0,path_1.join)(i,"../",t);if(o)if(s.substring(n.start,n.start+5)!==path_2.dbURLRoot||l){let e;e=i===this.newFilePath?this.oldFilePathWithOutExt:h;var p=(0,path_2.resolveFileName)((0,path_1.join)(e,"../",s.substring(n.start,this.textSpanEnd(n))));p===this.oldFilePathWithOutExt?t=this._newFileDBURL:Editor.Utils.Path.contains(this.oldFilePath+"/",p)?t=p.replace(this.oldFilePath,this._newFileDBURL):e===this.oldFilePathWithOutExt&&(p=Editor.Utils.Path.relative(this._oldFileDBInfo.target,p),t=this._oldFileDBInfo.dbURL+(0,path_2.resolveFileName)(p))}else if(!d.startsWith(path_2.dbURLRoot)&&a)for(let e=0;e<a.length;e++){var _=a[e];if(Editor.Utils.Path.contains(_.target,m)){var F=Editor.Utils.Path.relative(_.target,m);t=_.dbURL+(0,path_2.resolveFileName)(F);break}}s=""+s.substring(0,n.start)+t+s.substring(this.textSpanEnd(n))}return s}textSpanEnd(e){return e.start+e.length}async execute(t){for(let e=0;e<t.dbURLInfos.length;e++){var a,i=t.dbURLInfos[e];Editor.Utils.Path.contains(i.target,this.newFilePath)&&(this._newFileDBInfo=i,a=Editor.Utils.Path.relative(i.target,this.newFilePath),this._newFileDBURL=i.dbURL+(0,path_2.removeTSExt)((0,path_2.resolveFileName)(a))),Editor.Utils.Path.contains(i.target,this.oldFilePath)&&(this._oldFileDBInfo=i,a=Editor.Utils.Path.relative(i.target,this.oldFilePath),this._oldFileDBURL=i.dbURL+(0,path_2.removeTSExt)((0,path_2.resolveFileName)(a)))}var s=new Set;if(!this._executed){var r=t.languageService.getEditsForFileRename(this.oldFilePath,this.newFilePath,{},void 0);for(let e=0;e<r.length;e++){var h,l=r[e],o=t.host.readFile(l.fileName);o&&(o=this.applyImportChanges(t.dbURLInfos,l.fileName,o,l.textChanges),s.add(l.fileName),h=t.host.readCache(l.fileName),(0,asserts_1.asserts)(h),t.host.writeCache({uuid:h.uuid,filePath:l.fileName,content:o}))}this._executed=!0}return s}}exports.RenameCommand=RenameCommand;