"use strict";var __importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.LanguageServiceAdapter=exports.LanguageServiceHostAdapter=exports.ParseConfigFileHostAdapter=exports.VirtualIOAdapter=void 0;const fs_extra_1=require("fs-extra"),path_1=require("path"),typescript_1=__importDefault(require("typescript")),cache_1=require("../shared/cache"),command_1=require("./command");class VirtualIOAdapter{constructor(){this._fileCache=cache_1.assetInfoCache}readFile(t){if(t!==LanguageServiceHostAdapter.defaultLibFileName){var i=this.readCache(t);let e;if(null!=i&&i.content)e=i.content;else try{e=(0,fs_extra_1.readFileSync)(t,"utf8");var a=this._fileCache.get(t),r=(0,fs_extra_1.statSync)(t).mtimeMs;this.writeCache({filePath:t,uuid:null==a?void 0:a.uuid,content:e,version:r.toString()})}catch(e){console.debug(e)}return e}}readCache(e){return this._fileCache.get(e)}removeCache(e){return this._fileCache.delete(e)}writeCache({uuid:e,content:t,version:i,filePath:a}){this._fileCache.set(a,{filePath:a,uuid:e,content:t,version:i})}fileExists(e){return(0,fs_extra_1.existsSync)(e)}getFileNames(){return Array.from(cache_1.assetInfoCache.keys())}}class ParseConfigFileHostAdapter extends(exports.VirtualIOAdapter=VirtualIOAdapter){constructor(e){super(),this._currentDirectory=e,this.useCaseSensitiveFileNames=!0}getCurrentDirectory(){return this._currentDirectory}readDirectory(e,t,i,a,r){return this.getFileNames()}onUnRecoverableConfigFileDiagnostic(...e){console.error(...e)}}exports.ParseConfigFileHostAdapter=ParseConfigFileHostAdapter;class LanguageServiceHostAdapter extends VirtualIOAdapter{constructor(e,t,i,a){super(),this._parseConfigFileHost=e,this._tsconfigPath=t,this._currentDirectory=i,this._compilerOptions=a}getCompilationSettings(){return this._compilerOptions}getScriptFileNames(){return this.getFileNames().slice()}getScriptVersion(e){return null!=(e=null==(e=this.readCache(e))?void 0:e.version)?e:""}getScriptSnapshot(e){e=this.readFile(e);return e&&typescript_1.default.ScriptSnapshot.fromString(e)||void 0}getCurrentDirectory(){return this._currentDirectory}getDefaultLibFileName(e){return LanguageServiceHostAdapter.defaultLibFileName}useCaseSensitiveFileNames(){return this._parseConfigFileHost.useCaseSensitiveFileNames}}(exports.LanguageServiceHostAdapter=LanguageServiceHostAdapter).defaultLibFileName="__DEFAULT_LIB_FILE_NAME_IS_NEVER_EXIST.d.ts";class LanguageServiceAdapter{constructor(e,t,i,a,r){this._tsconfigPath=e,this._currentDirectory=t,this._beforeBuildDelegate=i,this._compilerOptions=a,this.dbURLInfos=r,this._awaitCommandQueue=[],this._executingCommandID="",this._changedFileSet=new Set,this._afterOutputTasks=[],this._parseConfigFileHost=new ParseConfigFileHostAdapter(t),this.host=new LanguageServiceHostAdapter(this._parseConfigFileHost,this._tsconfigPath,this._currentDirectory,this._compilerOptions),this.languageService=typescript_1.default.createLanguageService(this.host,void 0,typescript_1.default.LanguageServiceMode.Semantic),this._beforeBuildDelegate.add(async e=>{e.forEach(e=>e.oldFilePath&&e.newFilePath&&this.requestRenameFile(e.oldFilePath,e.newFilePath)),await this.finishCommand(e)})}isExecuting(t){return!(this._executingCommandID!==t&&!this._awaitCommandQueue.some(e=>e.command.id===t))}get isBusy(){return Boolean(this._executingCommandID)}async executeCommand(i){if(!this.isExecuting(i.id)){this._executingCommandID&&await new Promise((e,t)=>{this._awaitCommandQueue.push({command:i,resolveAwait:e})}),this._executingCommandID=i.id;for(const t of(await i.execute(this)).values())this._changedFileSet.add(t);const e=this._awaitCommandQueue.shift();if(e)e.resolveAwait(void 0);else{await this.outPutFiles(this._changedFileSet),this._executingCommandID="",this._changedFileSet.clear();const e=this._awaitCommandQueue.shift();e&&e.resolveAwait(void 0)}}}async requestRenameFile(e,t){(e&&t&&e.endsWith(".ts")&&t.endsWith(".ts")||!(0,path_1.extname)(e))&&e!==t&&(void 0===this.autoUpdateFileImport&&(this.autoUpdateFileImport=await Editor.Profile.getConfig("programming","updateAutoUpdateImportConfig","global")),this.autoUpdateFileImport)&&(console.debug("Starting rename..."),Editor.Metrics.trackTimeStart("programming:worker-rename"),await this.executeCommand(new command_1.RenameCommand(e,t)),Editor.Metrics.trackTimeEnd("programming:worker-rename",{output:!0}),console.debug("Finish rename."))}applyChanges(t,i){for(let e=i.length-1;0<=e;e--){var{span:a,newText:r}=i[e];t=""+t.substring(0,a.start)+r+t.substring(this.textSpanEnd(a))}return t}async outPutFiles(e){e=Array.from(e.values());for(await Promise.all(e.map(async t=>{try{var e=this.host.readCache(t);null!=e&&e.content?(await(0,fs_extra_1.writeFile)(t,null==e?void 0:e.content,{encoding:"utf8"}),await Editor.Message.send("asset-db","refresh-asset",t)):console.debug("There's nothing in the cache")}catch(e){console.debug("Failed to update script "+t,e)}}));this._afterOutputTasks.length;){var t=this._afterOutputTasks.shift();t&&t()}this.clearCache()}clearCache(){cache_1.assetInfoCache.forEach(e=>e.content=void 0)}textSpanEnd(e){return e.start+e.length}async finishCommand(e){return new Promise((e,t)=>{this.isBusy?this._afterOutputTasks.push(e):e()})}}exports.LanguageServiceAdapter=LanguageServiceAdapter;