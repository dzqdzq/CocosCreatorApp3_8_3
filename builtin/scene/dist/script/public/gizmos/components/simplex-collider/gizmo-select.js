"use strict";var __importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0});const cc_1=require("cc"),external_1=__importDefault(require("../../utils/external")),base_1=require("../base"),point_1=__importDefault(require("../../controller/point")),line_1=__importDefault(require("../../controller/line")),triangle_1=__importDefault(require("../../controller/triangle")),tetrahedron_1=__importDefault(require("../../controller/tetrahedron")),NodeUtils=external_1.default.NodeUtils,tempVec3_a=new cc_1.Vec3,tempVec3_b=new cc_1.Vec3,tempVec3_c=new cc_1.Vec3,tempVec3_d=new cc_1.Vec3,tempQuat_a=new cc_1.Quat;class SimplexColliderGizmo extends base_1.SelectGizmo{constructor(){super(...arguments),this._shapeControllers={},this._activeController=null}init(){}createControllerByShape(e){var t=this.getGizmoRoot();let l=null;switch(e){case cc_1.SimplexCollider.ESimplexType.VERTEX:l=new point_1.default(t);break;case cc_1.SimplexCollider.ESimplexType.LINE:l=new line_1.default(t);break;case cc_1.SimplexCollider.ESimplexType.TRIANGLE:l=new triangle_1.default(t);break;case cc_1.SimplexCollider.ESimplexType.TETRAHEDRON:l=new tetrahedron_1.default(t);break;default:console.error("Invalid Type:",e)}return l&&l.setColor(cc_1.Color.GREEN),l}getControllerByShape(e){let t=this._shapeControllers[e];return t||(t=this.createControllerByShape(e),this._shapeControllers[e]=t),t}onShow(){this.updateControllerData()}onHide(){this._activeController&&this._activeController.hide()}updateControllerData(){if(this._isInitialized&&null!==this.target&&this.target instanceof cc_1.SimplexCollider){var e=this.target.node,t=this.target,l=(null!=(l=this._activeController)&&l.hide(),this._activeController=this.getControllerByShape(t.shapeType),NodeUtils.getWorldScale3D(e)),r=NodeUtils.getWorldPosition3D(e),c=tempQuat_a;switch(NodeUtils.getWorldRotation3D(e,c),null!=(e=this._activeController)&&e.setScale(l),null!=(e=this._activeController)&&e.setPosition(r),null!=(l=this._activeController)&&l.setRotation(c),t.shapeType){case cc_1.SimplexCollider.ESimplexType.VERTEX:cc_1.Vec3.add(tempVec3_a,t.center,t.vertex0),this._activeController.updateData(tempVec3_a);break;case cc_1.SimplexCollider.ESimplexType.LINE:cc_1.Vec3.add(tempVec3_a,t.center,t.vertex0),cc_1.Vec3.add(tempVec3_b,t.center,t.vertex1),this._activeController.updateData(tempVec3_a,tempVec3_b);break;case cc_1.SimplexCollider.ESimplexType.TRIANGLE:cc_1.Vec3.add(tempVec3_a,t.center,t.vertex0),cc_1.Vec3.add(tempVec3_b,t.center,t.vertex1),cc_1.Vec3.add(tempVec3_c,t.center,t.vertex2),this._activeController.updateData(tempVec3_a,tempVec3_b,tempVec3_c);break;case cc_1.SimplexCollider.ESimplexType.TETRAHEDRON:cc_1.Vec3.add(tempVec3_a,t.center,t.vertex0),cc_1.Vec3.add(tempVec3_b,t.center,t.vertex1),cc_1.Vec3.add(tempVec3_c,t.center,t.vertex2),cc_1.Vec3.add(tempVec3_d,t.center,t.vertex3),this._activeController.updateData(tempVec3_a,tempVec3_b,tempVec3_c,tempVec3_d)}null!=(e=this._activeController)&&e.show()}}onTargetUpdate(){this.updateControllerData()}onNodeChanged(){this.updateControllerData()}}exports.default=SimplexColliderGizmo;