"use strict";var __importDefault=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(exports,"__esModule",{value:!0});const cc_1=require("cc"),external_1=__importDefault(require("../../utils/external")),base_1=require("../base"),sphere_1=__importDefault(require("../../controller/sphere")),NodeUtils=external_1.default.NodeUtils,EditorMath=external_1.default.EditorMath,tempQuat_a=new cc_1.Quat;class SphereColliderComponentGizmo extends base_1.SelectGizmo{constructor(){super(...arguments),this._radius=0,this._maxScale=1,this._propPath=null}init(){this.createController(),this._isInitialized=!0}onShow(){this._controller.show(),this.updateControllerData()}onHide(){this._controller.hide()}createController(){var t=this.getGizmoRoot();this._controller=new sphere_1.default(t),this._controller.setColor(cc.Color.GREEN),this._controller.editable=!0,this._controller.hoverColor=cc.Color.YELLOW,this._controller.onControllerMouseDown=this.onControllerMouseDown.bind(this),this._controller.onControllerMouseMove=this.onControllerMouseMove.bind(this),this._controller.onControllerMouseUp=this.onControllerMouseUp.bind(this)}onControllerMouseDown(){var t;this._isInitialized&&null!=this.target&&(t=NodeUtils.getWorldScale3D(this.target.node),this._maxScale=this.getMaxScale(t),this._radius=this.target.radius,this._propPath=this.getCompPropPath("radius"))}onControllerMouseMove(){this.updateDataFromController()}onControllerMouseUp(){this.onControlEnd(this._propPath)}getMaxScale(t){return Math.max(t.x,t.y,t.z)}updateDataFromController(){var t;this._controller.updated&&this.target&&(this.onControlUpdate(this._propPath),t=this._controller.getDeltaRadius(),t=this._radius+t/this._maxScale,t=Math.abs(t),t=EditorMath.toPrecision(t,3),this.target.radius=t,t=this.target.node,this.onComponentChanged(t))}updateControllerData(){var t,e,o,r;this._isInitialized&&null!=this.target&&(this.target instanceof cc_1.SphereCollider?(t=this.target.node,this._controller.show(),this._controller.checkEdit(),e=NodeUtils.getWorldScale3D(t),e=this.getMaxScale(e),o=NodeUtils.getWorldPosition3D(t),r=tempQuat_a,NodeUtils.getWorldRotation3D(t,r),this._controller.setScale(cc.v3(e,e,e)),this._controller.setPosition(o),this._controller.setRotation(r),this._controller.updateSize(this.target.center,this.target.radius)):(this._controller.hide(),console.error("target is not a cc.SphereCollider")))}updateControllerTransform(){this.updateControllerData()}onTargetUpdate(){this.updateControllerData()}onNodeChanged(){this.updateControllerData()}}exports.default=SphereColliderComponentGizmo;