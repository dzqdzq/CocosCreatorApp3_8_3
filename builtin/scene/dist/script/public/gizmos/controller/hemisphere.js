"use strict";var __importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0});const cc_1=require("cc"),editable_1=__importDefault(require("./editable")),controller_shape_1=__importDefault(require("../utils/controller-shape")),controller_utils_1=__importDefault(require("../utils/controller-utils")),engine_1=__importDefault(require("../utils/engine")),external_1=__importDefault(require("../utils/external")),{AttributeName,getModel,updatePositions,setMeshColor}=engine_1.default,EditorMath=external_1.default.EditorMath,axisDirMap=controller_utils_1.default.axisDirectionMap,AxisName=controller_utils_1.default.AxisName;class SphereController extends editable_1.default{constructor(e){super(e),this._center=new cc_1.Vec3,this._radius=100,this._deltaRadius=0,this._circleDataMap={},this._mouseDeltaPos=new cc_1.Vec2,this._curDistScalar=0,this._controlDir=new cc_1.Vec3,this._editHandleKeys=[AxisName.x,AxisName.y,AxisName.neg_x,AxisName.neg_y,AxisName.neg_z],this.initShape()}get radius(){return this._radius}set radius(e){this.updateSize(this._center,e)}setColor(t){Object.keys(this._circleDataMap).forEach(e=>{e=this._circleDataMap[e];setMeshColor(e.arcMR.node,t)}),this.setEditHandlesColor(t),this._color=t}createCircleByAxis(e,t,i){var s=axisDirMap[e],t=axisDirMap[t];let r=Math.PI;"neg_z"===e&&(r=EditorMath.TWO_PI);var i=controller_utils_1.default.arc(this._center,s,t,r,this._radius,i),a=(i.parent=this.shape,{});a.arcMR=getModel(i),a.normalDir=s,a.fromDir=t,this._circleDataMap[e]=a}_updateEditHandle(e){var t=this._handleDataMap[e].topNode,e=axisDirMap[e],i=new cc_1.Vec3,e=(cc_1.Vec3.multiplyScalar(i,e,this._radius),new cc_1.Vec3(i));e.add(this._center),cc_1.Vec3.multiply(e,e,this.getScale()),t.setPosition(e.x,e.y,e.z)}initShape(){this.createShapeNode("SphereController"),this._circleDataMap={},this.createCircleByAxis("x","neg_y",this._color),this.createCircleByAxis("y","x",this._color),this.createCircleByAxis("neg_z","x",this._color),this.hide()}updateSize(e,t){this._center=e,this._radius=t,Object.keys(this._circleDataMap).forEach(e=>{var t=this._circleDataMap[e].normalDir,i=this._circleDataMap[e].fromDir,s=this._circleDataMap[e].arcMR;let r=Math.PI;"neg_z"===e&&(r=EditorMath.TWO_PI),this.updateArcMesh(s,this._center,t,i,r,this._radius)}),this._edit&&this.updateEditHandles(),this.adjustEditHandlesSize()}updateArcMesh(e,t,i,s,r,a){t=controller_shape_1.default.calcArcPoints(t,i,s,r,a);updatePositions(e,t)}onMouseDown(e){this._mouseDeltaPos=cc.v2(0,0),this._curDistScalar=super.getDistScalar(),this._controlDir=new cc_1.Vec3(0,0,0),this.onControllerMouseDown&&this.onControllerMouseDown(e)}onMouseMove(e){var t;this._isMouseDown&&(this._mouseDeltaPos.x+=e.moveDeltaX,this._mouseDeltaPos.y+=e.moveDeltaY,t=axisDirMap[e.handleName],this._controlDir=t,this._deltaRadius=this.getAlignAxisMoveDistance(this.localToWorldDir(t),this._mouseDeltaPos)*this._curDistScalar,this.onControllerMouseMove)&&this.onControllerMouseMove(e)}onMouseUp(e){this.onControllerMouseUp&&this.onControllerMouseUp(e)}onMouseLeave(e){this.onMouseUp(e)}getDeltaRadius(){return this._deltaRadius}getControlDir(){return this._controlDir}}exports.default=SphereController;