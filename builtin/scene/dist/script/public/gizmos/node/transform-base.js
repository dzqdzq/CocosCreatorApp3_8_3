"use strict";var __importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0});const gizmo_select_1=__importDefault(require("../components/base/gizmo-select")),utils_1=__importDefault(require("../utils"));class TransformGizmo extends gizmo_select_1.default{isNodeLocked(e){return!1}get nodes(){const r=cce.Selection.query().map(e=>cce.Node.query(e));return r.filter(e=>{if(null===e||this.isNodeLocked(e))return!1;let t=e.parent;for(;t;){if(r.includes(t)&&!this.isNodeLocked(t))return!1;t=t.parent}return!0})}onShow(){this._controller&&0!==this.nodes.length&&(this._controller.show(),this.updateControllerTransform)&&this.updateControllerTransform()}onHide(){this._controller&&this._controller.hide()}onTargetUpdate(){this._controller&&this.updateControllerTransform&&this.updateControllerTransform()}onNodeChanged(){this._controller&&this.updateControllerTransform&&this.updateControllerTransform()}broadcastNodeChangeMessage(e){utils_1.default.broadcastMessage("scene:change-node",e.uuid)}getSnappedValue(e,t){return Math.round(e/t)*t}isControlKeyPressed(e){return e.ctrlKey||e.metaKey}onKeyDown(e){var t;if(this.target)return!(null!=(t=this._controller)&&t.isMouseDown)}onKeyUp(e){var t;return!this.target||!(null!=(t=this._controller)&&t.isMouseDown)}}exports.default=TransformGizmo;