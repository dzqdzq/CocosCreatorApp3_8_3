"use strict";var __importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.rectTransformSnapping=exports.RectTransformSnapping=exports.SnapGuidelineGroup=exports.SnapGuideline=void 0;const cc_1=require("cc"),node_1=__importDefault(require("../../../utils/node"));class SnapGuideline{constructor(e,i,n){this.lineVertices=[],this.value=e,this.axis=i,this.lineVertices=n}}exports.SnapGuideline=SnapGuideline;class SnapGuidelineGroup{constructor(){this.currentGuidelines=[],this.guidelines=new Map}clear(){this.guidelines.clear()}addGuideline(e){let i=[];this.guidelines.has(e.value)?i=this.guidelines.get(e.value):this.guidelines.set(e.value,i),i.push(e)}snapToGuidelines(n,t){var s=this.guidelines.keys();if(!(this.guidelines.size<=0)){let e=Number.MAX_VALUE,i;for(const o of s){var a=Math.abs(n-o);a<e&&(i=o,e=a)}void 0!==i&&e<=t&&(n=i,this.currentGuidelines=this.currentGuidelines.concat(this.guidelines.get(i)))}return n}}exports.SnapGuidelineGroup=SnapGuidelineGroup;class RectTransformSnapping{constructor(){this.enableSnapping=!0,this.enableGridSnapping=!0,this.snapThreshold=4,this.nodeSnapGuidelineGroups=[new SnapGuidelineGroup,new SnapGuidelineGroup],this.sidesAndMiddle=[0,.5,1],this.guidelineColor=new cc.Color(255,71,0),this.canvasSnapColor=new cc.Color(255,190,75),this.canvasSnapGuidelineGroups=[new SnapGuidelineGroup,new SnapGuidelineGroup],this.shapeInfos=[],this.currentMatchMinDistInfos=[],this.gridSpacingX=100,this.gridSpacingY=100,this.gridColor=cc.Color.GRAY,this.gridSnapGuidelineGroups=[new SnapGuidelineGroup,new SnapGuidelineGroup]}getPureDataObject(){return{enableSnapping:this.enableSnapping,snapThreshold:this.snapThreshold}}initFromData(e){this.enableSnapping=e.enableSnapping,this.snapThreshold=e.snapThreshold}lerp(e,i,n){return e+(i-e)*n}getWorldRectEx(e){e=node_1.default.getWorldBounds(e);return{minPos:new cc.Vec3(e.x,e.y,0),maxPos:new cc.Vec3(e.x+e.width,e.y+e.height,0),center:new cc.Vec3(e.x+e.width/2,e.y+e.height/2,0),width:e.width,height:e.height}}snapToGuidelinesOnAxis(e,i,n,t){return("x"===t?e[0]:e[1]).snapToGuidelines(i,n)}getNodeGuidelinePos(e,i,n){var t=[cc.v3(),cc.v3()];let s="x";"x"===i?s="y":"y"===i&&(s="x");var e=this.getWorldRectEx(e),a=e.minPos,e=e.maxPos;return t[0][s]=a[s],t[1][s]=e[s],t[0][i]=this.lerp(a[i],e[i],n),t[1][i]=t[0][i],t}getNodeSnapGuidelines(e,n,t,s){const a=[];return e&&e.children.forEach(e=>{var i;e===n||!(i=null==(i=e.getComponent(cc_1.UITransform))?void 0:i.contentSize)||i.width<=0||i.height<=0||(0===s?(a.push(new SnapGuideline(this.getWorldRectEx(e).minPos[t],t,this.getNodeGuidelinePos(e,t,0))),a.push(new SnapGuideline(this.getWorldRectEx(e).maxPos[t],t,this.getNodeGuidelinePos(e,t,1)))):1===s?a.push(new SnapGuideline(this.getWorldRectEx(e).center[t],t,this.getNodeGuidelinePos(e,t,.5))):2===s&&(a.push(new SnapGuideline(this.getWorldRectEx(e).maxPos[t],t,this.getNodeGuidelinePos(e,t,1))),a.push(new SnapGuideline(this.getWorldRectEx(e).minPos[t],t,this.getNodeGuidelinePos(e,t,0)))))}),a}clearCurrentNodeGuidelines(){this.nodeSnapGuidelineGroups[0].currentGuidelines=[],this.nodeSnapGuidelineGroups[1].currentGuidelines=[]}snapToNodeGuidelinesOnAxis(e,i,n){return this.snapToGuidelinesOnAxis(this.nodeSnapGuidelineGroups,e,i,n)}snapPosToNodeGuidelines(e,i,n){this.clearCurrentNodeGuidelines();var t=i.width/2,i=i.height/2,e=e.clone();return e.x=this.snapToNodeGuidelinesOnAxis(e.x-t,n.x,"x")+t,e.x=this.snapToNodeGuidelinesOnAxis(e.x+t,n.x,"x")-t,e.y=this.snapToNodeGuidelinesOnAxis(e.y-i,n.y,"y")+i,e.y=this.snapToNodeGuidelinesOnAxis(e.y+i,n.y,"y")-i,e.x=this.snapToNodeGuidelinesOnAxis(e.x,n.x,"x"),e.y=this.snapToNodeGuidelinesOnAxis(e.y,n.y,"y"),e}snapSizeToNodeGuidelines(e,i,n){return this.clearCurrentNodeGuidelines(),0!==i.x&&(i.x=this.snapToNodeGuidelinesOnAxis(e.x+i.x,n.x,"x")-e.x),0!==i.y&&(i.y=this.snapToNodeGuidelinesOnAxis(e.y+i.y,n.y,"y")-e.y),i}calculateNodeSnapGuidelines(n,t){for(let e=0;e<2;e++)this.nodeSnapGuidelineGroups[e].clear();if(n){var s=["x","y"];for(let i=0;i<2;i++)for(let e=0;e<this.sidesAndMiddle.length;e++)this.getNodeSnapGuidelines(n,t,s[i],e).forEach(e=>{e.checkNode=t,this.nodeSnapGuidelineGroups[i].addGuideline(e)})}}generateWorldRect(e,i){var n=i.width/2,t=i.height/2;return{minPos:new cc.Vec3(e.x-n,e.y-t,e.z),maxPos:new cc.Vec3(e.x+n,e.y+t,e.z),center:e,width:i.width,height:i.height}}checkEqualSpacingOnSide(e,i,n){e=e[i];if(!e||e.length<=0)return null;const t=[];e=e[0];const s=e.minDist;var e=e.targetShapeInfo,a=null==e?void 0:e.distInfo[i];let o=-1,r,h=0;return a&&0<a.length&&a.forEach(e=>{r=e.minDist-s,Math.abs(r)<=n&&(h=r,o=e.minDist,t.push(e))}),0<o?("right"!==i&&"top"!==i||(h=-h),{matchDist:o,matchDeltaDist:h,sideMinDistShapeInfo:e,matchSideDistInfos:t}):void 0}checkEqualSpacingOnAxis(i,n,e,t){let s=[],a=[],o=[],r=("x"===e?o=["left","right"]:"y"===e&&(o=["top","bottom"]),!1),h=0;var d,l;return o.forEach(e=>{e=this.checkEqualSpacingOnSide(i,e,t);e&&(r=!0,h=n+e.matchDeltaDist,s=e.matchSideDistInfos,a=[e.sideMinDistShapeInfo])}),r||(d=i[o[0]],l=i[o[1]],d=d[0],l=l[0],d&&l&&(e=(d.minDistPosA[e]+l.minDistPosB[e])/2,Math.abs(n-e)<=t)&&(h=e,r=!0,a.push(d.targetShapeInfo,l.targetShapeInfo))),r?{newValue:h,matchDistInfos:s,matchShapeInfos:a}:null}snapPosToEqualSpacing(e,i,n){this.currentMatchMinDistInfos=[];var t=this.generateWorldRect(e,i),s=this.generateShapeInfo(t);for(let e=0;e<this.shapeInfos.length;e++){var a=this.shapeInfos[e],a=this.gatherDistInfo(s,a)["distInfoA"];this.concatDistInfo(s.distInfo,a)}t=e.clone(),e=s.distInfo;function o(e,i){return e.minDist-i.minDist}var r=[],h=e.left,d=e.right,l=e.top,u=e.bottom;(0<h.length||0<d.length)&&(h.sort(o),d.sort(o),h=this.checkEqualSpacingOnAxis(e,t.x,"x",n.x))&&(t.x=h.newValue,this.currentMatchMinDistInfos.push(...h.matchDistInfos),r.push(...h.matchShapeInfos)),0<l.length&&0<l.length&&(l.sort(o),u.sort(o),d=this.checkEqualSpacingOnAxis(e,t.y,"y",n.y))&&(t.y=d.newValue,this.currentMatchMinDistInfos.push(...d.matchDistInfos),r.push(...d.matchShapeInfos));const c=this.generateWorldRect(t,i);return r.forEach(e=>{e&&(e=this.getDistInfoOfRect(c,e.worldRect))&&this.currentMatchMinDistInfos.push(e)}),t}calculateSpacingSnapGuidelines(e,i){var n=this.gatherShapeInfos(e,i);if(n){for(let i=0;i<n.length-1;i++){var t=n[i];for(let e=i;e<n.length;e++){var s=n[e],{distInfoA:a,distInfoB:o}=this.gatherDistInfo(t,s);this.concatDistInfo(t.distInfo,a),this.concatDistInfo(s.distInfo,o)}}this.shapeInfos=n}}gatherDistInfo(e,i){var n=e.worldRect,t=i.worldRect,s={left:[],right:[],top:[],bottom:[]},a={left:[],right:[],top:[],bottom:[]},o=this.getDistInfoOfRect(n,t);return o&&(i=Object.assign({targetShapeInfo:i},o),e=Object.assign({targetShapeInfo:e},o),"x"===o.axis?(n.center.x>t.center.x?(s.left.push(i),a.right):(s.right.push(i),a.left)).push(e):"y"===o.axis&&(n.center.y>t.center.y?(s.bottom.push(i),a.top):(s.top.push(i),a.bottom)).push(e)),{distInfoA:s,distInfoB:a}}concatDistInfo(e,i){e.left=e.left.concat(i.left),e.right=e.right.concat(i.right),e.top=e.top.concat(i.top),e.bottom=e.bottom.concat(i.bottom)}gatherShapeInfos(e,t){const s=[];return e?(e.children.forEach((e,i)=>{var n;e===t||!(n=null==(n=e.getComponent(cc_1.UITransform))?void 0:n.contentSize)||n.width<=0||n.height<=0||(n=this.getWorldRectEx(e),s.push(this.generateShapeInfo(n)))}),s):null}generateShapeInfo(e){return{worldRect:e,distInfo:{left:[],right:[],top:[],bottom:[]}}}getDistInfoOfRect(n,t){let s=-1,a,o,r="x";var h=n.center,d=t.center,l=Math.abs(h.x-d.x),u=Math.abs(h.y-d.y);function c(e,i){return e-i}if(l<(n.width+t.width)/2&&u>=(n.height+t.height)/2){s=u-(n.height+t.height)/2;let e=n,i=t;h.y<d.y&&(e=t,i=n);var p=[e.minPos.x,e.minPos.x+e.width,i.maxPos.x,i.maxPos.x-i.width],p=(p.sort(c),(p[1]+p[2])/2);a=new cc.Vec3(p,e.minPos.y,0),o=new cc.Vec3(p,i.maxPos.y,0),r="y"}else if(l>=(n.width+t.width)/2&&u<(n.height+t.height)/2){s=l-(n.width+t.width)/2;let e=n,i=t;h.x>d.x&&(e=t,i=n);p=[e.maxPos.y,e.maxPos.y-e.height,i.minPos.y,i.minPos.y+i.height],u=(p.sort(c),(p[1]+p[2])/2);a=new cc.Vec3(e.maxPos.x,u,0),o=new cc.Vec3(i.minPos.x,u,0),r="x"}return 0<s?{minDist:s,minDistPosA:a,minDistPosB:o,axis:r}:null}calculateGridSnapGuidelines(){var i=cc.engine.getDesignResolutionSize();for(let e=0;e<i.width;e+=this.gridSpacingX){var n=new cc.Vec2(e,0),t=new cc.Vec2(e,i.height),n=new SnapGuideline(e,"x",[n,t]);this.gridSnapGuidelineGroups[0].addGuideline(n)}for(let e=0;e<i.height;e+=this.gridSpacingY){var s=new cc.Vec2(0,e),a=new cc.Vec2(i.width,e),s=new SnapGuideline(e,"y",[s,a]);this.gridSnapGuidelineGroups[1].addGuideline(s)}}clearCurrentGridGuidelines(){this.gridSnapGuidelineGroups[0].currentGuidelines=[],this.gridSnapGuidelineGroups[1].currentGuidelines=[]}snapToGridGuidelinesOnAxis(e,i,n){return this.snapToGuidelinesOnAxis(this.gridSnapGuidelineGroups,e,i,n)}snapPosToGridSnapGuidelines(e,i,n){this.clearCurrentGridGuidelines();var t=i.width/2,i=i.height/2,e=e.clone();return e.x=this.snapToGridGuidelinesOnAxis(e.x-t,n.x,"x")+t,e.x=this.snapToGridGuidelinesOnAxis(e.x+t,n.x,"x")-t,e.y=this.snapToGridGuidelinesOnAxis(e.y-i,n.y,"y")+i,e.y=this.snapToGridGuidelinesOnAxis(e.y+i,n.y,"y")-i,e}snapSizeToGridGuidelines(e,i,n){return this.clearCurrentGridGuidelines(),0!==i.x&&(i.x=this.snapToGridGuidelinesOnAxis(e.x+i.x,n.x,"x")-e.x),0!==i.y&&(i.y=this.snapToGridGuidelinesOnAxis(e.y+i.y,n.y,"y")-e.y),i}calculateCanvasSnapGuidelines(){const i=cc.view.getDesignResolutionSize();var e=i.width/2,n=i.width,t=i.height/2,s=i.height;[0,e,n].forEach(e=>{this.canvasSnapGuidelineGroups[0].addGuideline(new SnapGuideline(e,"x",[new cc_1.Vec3(e,0),new cc_1.Vec3(e,i.height)]))}),[0,t,s].forEach(e=>{this.canvasSnapGuidelineGroups[1].addGuideline(new SnapGuideline(e,"x",[new cc_1.Vec3(0,e),new cc_1.Vec3(i.width,e)]))})}clearCurrentCanvasGuidelines(){this.canvasSnapGuidelineGroups[0].currentGuidelines=[],this.canvasSnapGuidelineGroups[1].currentGuidelines=[]}snapToCanvasSnapGuidelinesOnAxis(e,i,n){return this.snapToGuidelinesOnAxis(this.canvasSnapGuidelineGroups,e,i,n)}snapPosToCanvasSnapGuidelines(e,i,n){this.clearCurrentCanvasGuidelines();var t=i.width/2,i=i.height/2,e=e.clone();return e.x=this.snapToCanvasSnapGuidelinesOnAxis(e.x-t,n.x,"x")+t,e.x=this.snapToCanvasSnapGuidelinesOnAxis(e.x+t,n.x,"x")-t,e.y=this.snapToCanvasSnapGuidelinesOnAxis(e.y-i,n.y,"y")+i,e.y=this.snapToCanvasSnapGuidelinesOnAxis(e.y+i,n.y,"y")-i,e.x=this.snapToCanvasSnapGuidelinesOnAxis(e.x,n.x,"x"),e.y=this.snapToCanvasSnapGuidelinesOnAxis(e.y,n.y,"y"),e}}const rectTransformSnapping=new(exports.RectTransformSnapping=RectTransformSnapping);exports.rectTransformSnapping=rectTransformSnapping;