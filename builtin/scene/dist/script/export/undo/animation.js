"use strict";var __importDefault=this&&this.__importDefault||function(a){return a&&a.__esModule?a:{default:a}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.AnimationUndoManager=void 0;const animation_1=__importDefault(require("../../3d/manager/animation")),base_1=require("./base");class AnimationUndoManager extends base_1.UndoManagerBase{constructor(){super(...arguments),this.name="animation",this.id=0,this._manualCommands=[],this.nodeUuid="",this.clipUuid="",this.clipDump=null}init(){}getUndoData(){return{nodeUuid:this.nodeUuid,clipUuid:this.clipUuid,clipDump:this.clipDump}}getRedoData(){return this.updateCache(),this.getUndoData()}updateCache(){this.clipDump=animation_1.default.dumpClip(this.nodeUuid,this.clipUuid)}_createCommand(a){var t=new AnimationUndoCommand;return void 0!==a.tag&&(t.tag=a.tag),this.id++,t.id=this.name+this.id,this._manualCommands.push(t),t}beginRecording(a,t){return a===this.nodeUuid&&null!=t&&t.external&&Object.prototype.hasOwnProperty.call(t.external,"animation")?((a=this._createCommand({tag:"animation edit"})).undoData=this.getUndoData(),a.id):""}endRecording(t){var a,i=this._manualCommands.find(a=>a.id===t);return i&&(-1!==(a=this._manualCommands.indexOf(i))&&this._manualCommands.splice(a,1),i.redoData=this.getRedoData(),JSON.stringify(i.undoData)!==JSON.stringify(i.redoData))&&this.push(i),!1}cancelRecording(t){var a=this._manualCommands.find(a=>a.id===t);return!!a&&(-1!==(a=this._manualCommands.indexOf(a))&&this._manualCommands.splice(a,1),!0)}reset(a,t){"string"==typeof a&&"string"==typeof t&&(super.reset(),this.nodeUuid=a,this.clipUuid=t,this.updateCache())}snapshot(a){}record(a){}abort(){}updateDump(a){}async undo(){var a=await super.undo();return a&&this.updateCache(),a}async redo(){var a=await super.redo();return a&&this.updateCache(),a}}exports.AnimationUndoManager=AnimationUndoManager;class AnimationUndoCommand extends base_1.UndoCommand{constructor(){super(...arguments),this.id="",this.tag=""}async undo(){await this.applyData(this.undoData)}async redo(){await this.applyData(this.redoData)}async applyData(a){var{nodeUuid:a,clipUuid:t,clipDump:i}=a;try{await animation_1.default.restoreFromDump(a,t,i)}catch(a){console.error(a)}}}