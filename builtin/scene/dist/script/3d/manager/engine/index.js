"use strict";var NeedAnimState,__importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.NeedAnimState=exports.engineManager=exports.EngineManager=void 0;const time_1=__importDefault(require("./time")),cc_1=require("cc"),selection_1=__importDefault(require("../../../public/selection")),event_enum_1=require("../../../public/event-enum"),scene_view_1=require("../scene-view"),geometry_renderer_1=require("./geometry_renderer"),event_emitter_1=require("../../../utils/event-emitter"),isWin32=(!function(e){e[e.CAMERA_ORBIT=0]="CAMERA_ORBIT",e[e.CAMERA_PAN=1]="CAMERA_PAN",e[e.CAMERA_WANDER=2]="CAMERA_WANDER",e[e.ANIMATION_MODE=3]="ANIMATION_MODE",e[e.PARTICLE_SYSTEM_MODE=4]="PARTICLE_SYSTEM_MODE",e[e.TERRAIN_SYSTEM_MODE=5]="TERRAIN_SYSTEM_MODE",e[e.GAME_VIEW_MODE=6]="GAME_VIEW_MODE"}(NeedAnimState=NeedAnimState||{}),exports.NeedAnimState=NeedAnimState,"win32"===process.platform),tickTime=isSceneNative&&isWin32?1e3/120:1e3/60;class EngineManager extends event_emitter_1.EventEmitter{constructor(){super(...arguments),this._setTimeoutId=null,this._rafId=null,this._maxDeltaTimeInEM=1/30,this._stateRecord=0,this._shouldRepaintInEM=!1,this._tickInEM=!1,this._tickedFrameInEM=-1,this._paused=!1,this._capture=!1,this._bindTick=this._tick.bind(this),this._sceneTick=!1}async init(){cc.game.pause(),this.geometryRenderer=new geometry_renderer_1.GeometryRenderer,this.startTick(),scene_view_1.sceneViewManager.on("isVisible",this.onSceneViewVisible.bind(this)),this._sceneTick=await Editor.Profile.getConfig("scene","scene.tick")}setTimeout(e,t){this._capture&&scene_view_1.sceneViewManager.isVisible?this._rafId=requestAnimationFrame(e):this._setTimeoutId=setTimeout(e,t)}clearTimeout(){this._setTimeoutId&&(clearTimeout(this._setTimeoutId),this._setTimeoutId=null),this._rafId&&(cancelAnimationFrame(this._rafId),this._rafId=null)}onSceneViewVisible(e){this.stopTick(),this.startTick()}onSceneOpened(e){this.repaintInEditMode()}onComponentAdded(e){var t=selection_1.default.query();e.node&&t.includes(e.node.uuid)&&engineManager.checkToSetAnimState([e.node])}onComponentRemoved(e){var t=selection_1.default.query();e.node&&t.includes(e.node.uuid)&&engineManager.checkToSetAnimState([e.node])}onNodeChanged(e,t){t=null==t?void 0:t.type;t!==event_enum_1.NodeEventType.TRANSFORM_CHANGED&&t!==event_enum_1.NodeEventType.SIZE_CHANGED&&t!==event_enum_1.NodeEventType.ANCHOR_CHANGED&&t!==event_enum_1.NodeEventType.COMPONENT_CHANGED&&t!==event_enum_1.NodeEventType.PARENT_CHANGED&&t!==event_enum_1.NodeEventType.CHILD_CHANGED&&this.checkToSetAnimState([e])}repaintInEditMode(){CC_EDITOR&&this._tickedFrameInEM!==cc_1.director.getTotalFrames()&&(this._shouldRepaintInEM=!0)}setFrameRate(e){this._maxDeltaTimeInEM=1/e}startTick(){null===this._setTimeoutId&&this._tick()}stopTick(){this.clearTimeout()}tickInEditMode(e){CC_EDITOR&&(this._tickedFrameInEM=cc_1.director.getTotalFrames()),this.geometryRenderer&&this.geometryRenderer.flush(),cc_1.director.tick(e)}getGeometryRenderer(){return this.geometryRenderer}enterState(e){void 0===e?console.error("undefined need animation state"):(this._stateRecord|=1<<e,this._updateTickState())}exitState(e){void 0===e?console.error("undefined need animation state"):(this._stateRecord&=~(1<<e),this._updateTickState())}resume(){this._paused=!1,this.startTick()}pause(){this.stopTick(),this._paused=!0}checkToSetAnimState(e){let t=!1,i=!1;e.forEach(e=>{e&&e.components&&e.components.forEach(e=>{e instanceof cc_1.ParticleSystem||e instanceof cc_1.ParticleSystem2D?t=!0:e instanceof cc_1.Terrain&&(i=!0)})}),t?cce.Engine.enterState(cce.NeedAnimState.PARTICLE_SYSTEM_MODE):cce.Engine.exitState(cce.NeedAnimState.PARTICLE_SYSTEM_MODE),i?cce.Engine.enterState(cce.NeedAnimState.TERRAIN_SYSTEM_MODE):cce.Engine.exitState(cce.NeedAnimState.TERRAIN_SYSTEM_MODE)}_tick(){var e;this._paused||(this.setTimeout(this._bindTick,tickTime),e=performance.now()/1e3,time_1.default.update(e,!1,this._maxDeltaTimeInEM),this._isTickAllowed()&&(this._shouldRepaintInEM=!1,this.tickInEditMode(time_1.default.deltaTime),this.emit("onUpdate")),this.emit("onEditorTick"))}_updateTickState(){this._tickInEM=0<this._stateRecord}_isTickAllowed(){return this._sceneTick||this._shouldRepaintInEM||this._tickInEM}emitUpdate(){this._paused&&this.emit("onUpdate")}get capture(){return this._capture}set capture(e){this._capture=e}}const engineManager=new(exports.EngineManager=EngineManager);exports.engineManager=engineManager;