"use strict";var __createBinding=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var n=Object.getOwnPropertyDescriptor(t,i);n&&("get"in n?t.__esModule:!n.writable&&!n.configurable)||(n={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,n)}:function(e,t,i,r){e[r=void 0===r?i:r]=t[i]}),__setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),__importStar=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&__createBinding(t,e,i);return __setModuleDefault(t,e),t};Object.defineProperty(exports,"__esModule",{value:!0}),exports.EngineStartup=void 0;const fs_extra_1=require("fs-extra"),path_1=require("path"),adapter_util_1=require("./adapter-util"),requiredModules=["cc","cc/editor/populate-internal-constants","cc/editor/serialization","cc/editor/new-gen-anim","cc/editor/embedded-player","cc/editor/reflection-probe","cc/editor/lod-group-utils","cc/editor/material","cc/editor/2d-misc","cc/editor/offline-mappings","cc/editor/custom-pipeline"],Backends={"physics-cannon":"cannon.js","physics-ammo":"bullet","physics-builtin":"builtin","physics-physx":"physx"},Backends2D={"physics-2d-box2d":"box2d","physics-2d-builtin":"builtin"};async function queryInternalAssetList(){var e=(await Editor.Message.request("engine","query-engine-info")).typescript.path,t=await(0,fs_extra_1.readJSON)((0,path_1.join)(e,"cc.config.json")),i=[];for(const r in t.features)t.features[r].dependentAssets&&i.push(...t.features[r].dependentAssets);return Array.from(new Set(i))}let cc;class EngineStartup{constructor(){this.nativeEngine=null}async loadNativeEngine(){var e=(await Editor.Message.request("engine","query-engine-info")).typescript.path,t=(await Editor.Profile.getConfig("scene","scene.debug-native")&&await Editor.Dialog.warn(Editor.I18n.t("scene.messages.debug_native"),{detail:`process id: ${process.pid},isPreview:`+isPreviewProcess,buttons:[Editor.I18n.t("scene.messages.confirm")]}),this.nativeEngine=await(0,adapter_util_1.importNativeEngine)((0,path_1.join)(e,"bin/.editor/EngineAddon")),(0,adapter_util_1.importWebAdapter)((0,path_1.join)(e,"bin/.editor/web-adapter")),await Promise.resolve().then(()=>__importStar(require("cc/preload"))))["default"];await t({dist:(0,path_1.join)(e,"bin/.editor"),requiredModules:requiredModules}),(cc=require("cc")).assetManager.downloader.appendTimeStamp=!1,require((0,path_1.join)(e,"bin/.editor/engine-adapter")),EditorExtends.start(),setInterval(()=>{var e;null!=(e=this.nativeEngine)&&e.tick()},3)}async requireEngine(){try{var e;isSceneNative?await this.loadNativeEngine():(e=(await Promise.resolve().then(()=>__importStar(require("cc/preload"))))["default"],await e({requiredModules:requiredModules}),cc=require("cc"),EditorExtends.start())}catch(e){throw console.log("Load engine failed: "+e.message),e}}async openEngine(e={}){var t=await queryInternalAssetList(),i=await Editor.Profile.getProject("engine","modules.includeModules"),r=await Editor.Profile.getProject("project","physics"),n=await Editor.Profile.getProject("engine","macroConfig"),a=(0,path_1.join)(Editor.Project.tmpDir,"asset-db/effect/effect.bin"),t={debugMode:cc.DebugMode.WARN,overrideSettings:{engine:{builtinAssets:t,macros:n},profiling:{showFPS:!1},screen:{frameRate:30},rendering:{renderMode:2,effectSettingsPath:isSceneNative?a:"file://"+a.replace(/\\/g,"/")},physics:r,assets:{importBase:isSceneNative?(0,path_1.join)(Editor.Project.path,"library"):"import://",nativeBase:isSceneNative?(0,path_1.join)(Editor.Project.path,"library"):"import://"}},exactFitScreen:!0};t.overrideSettings.engine&&null!=(n=null==e?void 0:e.overrideSettings)&&n.engine&&Object.assign(t.overrideSettings.engine,e.overrideSettings.engine),cc.physics.selector.runInEditor=!0,await cc.game.init(t),isPreviewProcess&&(cc.cclegacy.GAME_VIEW=!0);try{var s=(await Promise.resolve().then(()=>__importStar(require("../../scripts"))))["default"];await(cce.Script=s).init()}catch(e){console.error(e)}await cc.game.run();let c="builtin",o="builtin";i.forEach(e=>{e in Backends?c=Backends[e]:e in Backends2D&&(o=Backends2D[e])}),cc.physics.selector.switchTo(c),cc.physics.PhysicsSystem.instance.enable=!1,window.cc.internal.physics2d.selector.switchTo(o),null!=(a=cce.NativeScene)&&a.sendToBrowser("onEngineReady",isPreviewProcess)}async configureStartup(){}configureEngine(){}async loadEffect(){const t=(await Promise.resolve().then(()=>__importStar(require("../../effects"))))["default"];var e=await cce.Ipc.send("query-effects");await Promise.all(e.map(e=>t.registerEffect(e)))}}const engineStartup=new(exports.EngineStartup=EngineStartup);exports.default=engineStartup;