"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const cc_1=require("cc");class SceneUtil{async loadSceneByUuid(s){return new Promise((n,a)=>{let i=!1;clearTimeout(this.timer),cc_1.assetManager.loadAny(s,null,(e,t)=>{if(clearTimeout(this.timer),i=!0,e)a(e);else if(t instanceof cc_1.SceneAsset){var r=t.scene;r._id=t._uuid,r._name=t._name;try{cc.director.runSceneImmediate(r),n()}catch(e){a(e)}}else a(new Error("The asset "+s+" is not a scene"))});const t=()=>setTimeout(async()=>{var e;if(!i)return 0!==(e=await Editor.Dialog.warn("Open scene timeout. Do you want to wait?",{buttons:["waiting","interrupt"],default:1,cancel:1})).response&&i||(this.timer=t()),1===e.response?a(new Error("Open scene timeout")):void 0},2e4);this.timer=t()})}async loadSceneByNode(n){return new Promise((e,t)=>{clearTimeout(this.timer);const r=()=>setTimeout(async()=>{if(1===(await Editor.Dialog.warn("Open scene timeout. Do you want to wait?",{buttons:["waiting","interrupt"],default:1,cancel:1})).response)return t(new Error("Open scene timeout"));this.timer=r()},2e4);this.timer=r();try{cc.director.runSceneImmediate(n),clearTimeout(this.timer),e()}catch(e){t(e)}})}async loadSceneByJson(e){return new Promise((r,n)=>{let a=!1;clearTimeout(this.timer),cc_1.assetManager.loadWithJson(e,null,(e,t)=>{if(clearTimeout(this.timer),a=!0,e)return n(e);try{cc.director.runSceneImmediate(t),r()}catch(e){n(e)}});const t=()=>setTimeout(async()=>{var e;if(!a)return 0!==(e=await Editor.Dialog.warn("Open scene timeout. Do you want to wait?",{buttons:["waiting","interrupt"],default:1,cancel:1})).response&&a||(this.timer=t()),1===e.response?n(new Error("Open scene timeout")):void 0},2e4);this.timer=t()})}async loadPrefab(a){return new Promise((r,n)=>{cc_1.assetManager.loadAny(a,(e,t)=>e?n(e):t instanceof cc.Prefab?void r(t):n("Open resources are not prefabricated! - "+a))})}async loadPrefabByJson(e){return new Promise((r,n)=>{cc_1.assetManager.loadWithJson(e,(e,t)=>e?n(e):t instanceof cc.Prefab?void r(t):n("Open json are not prefabricated! - "))})}unloadPrefab(e){e=cc_1.assetManager.assets.get(e);e&&cc_1.assetManager.releaseAsset(e)}recursiveNode(e,t){t(e),e.children&&e.children.forEach(e=>this.recursiveNode(e,t))}}exports.default=new SceneUtil;