"use strict";var __importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.AssetManager=void 0;const cc_1=require("cc"),events_1=require("events"),material_1=__importDefault(require("./material")),physics_material_1=__importDefault(require("./physics-material")),animation_graph_variant_1=__importDefault(require("./animation-graph-variant")),animation_mask_1=__importDefault(require("./animation-mask")),render_pipeline_1=__importDefault(require("./render-pipeline")),node_1=__importDefault(require("../node")),gizmos_1=__importDefault(require("./../gizmos")),selection_1=__importDefault(require("../selection")),node_2=__importDefault(require("../../../utils/node")),dump_1=__importDefault(require("../../../export/dump")),camera_1=__importDefault(require("../camera")),asset_watcher_1=require("./asset-watcher"),plugin_1=__importDefault(require("../plugin")),operation_1=__importDefault(require("../../../public/operation")),asset_1=require("../../../utils/asset"),window_1=require("../../../utils/window"),droppableAssetTypes=["cc.Material",...node_1.default.creatableAssetTypes];let lastHighlightNode;const ray=cc_1.geometry.Ray.create();let lastHighlightMC=null;class AssetManager extends events_1.EventEmitter{init(){cce.Script.on(cce.Script.EXECUTION_FINISHED,this.onScriptExecutedEnd),operation_1.default.on("onDragOver",this.onDragOver.bind(this)),operation_1.default.on("onDrop",this.onDrop.bind(this))}onScriptExecutedEnd(){cc_1.assetManager.assets.forEach((e,a)=>{e instanceof cc_1.Prefab&&cc_1.assetManager.releaseAsset(e)})}removeAllAssetListeners(){cc_1.assetManager.assetListener.removeAllListeners()}onSceneOpened(){this.removeAllAssetListeners(),node_1.default.queryUuids().forEach(e=>{e=node_1.default.query(e);e instanceof cc_1.Scene?asset_watcher_1.assetWatcherManager.startWatch(e.globals):e&&!node_2.default.isEditorNode(e)&&e.components.forEach(e=>{asset_watcher_1.assetWatcherManager.startWatch(e)})})}onNodeChanged(e){e.components.forEach(e=>{asset_watcher_1.assetWatcherManager.stopWatch(e),asset_watcher_1.assetWatcherManager.startWatch(e)})}onComponentAdded(e){asset_watcher_1.assetWatcherManager.startWatch(e)}onComponentRemoved(e){asset_watcher_1.assetWatcherManager.stopWatch(e)}queryAllEffects(){return material_1.default.queryAllEffects()}queryEffect(e){return material_1.default.queryEffect(e)}async queryMaterial(e){return material_1.default.queryMaterial(e)}async applyMaterial(e,a){a=await material_1.default.decodeMaterial(a);await cce.Ipc.send("save-asset",e,a)}async previewMaterial(e,a,t){return material_1.default.previewMaterial(e,a,t)}async queryPhysicsMaterial(e){let a;try{a=await(0,asset_1.loadAssetUncached)(e)}catch(e){console.error(e)}return a?(physics_material_1.default.cacheComponent(a),physics_material_1.default.encodeComponent(a)):null}async queryAnimationGraphVariant(e){let a;try{a=await(0,asset_1.loadAssetUncached)(e)}catch(e){console.error(e)}return a?(animation_graph_variant_1.default.cacheComponent(a),animation_graph_variant_1.default.encodeComponent()):null}async queryAnimationMask(e){let a;try{a=await(0,asset_1.loadAssetUncached)(e)}catch(e){console.error(e)}return a?(animation_mask_1.default.cacheComponent(a),animation_mask_1.default.encodeComponent(a)):null}async changePhysicsMaterial(e){return physics_material_1.default.updateComponent(e)}async applyPhysicsMaterial(e){var a=physics_material_1.default.getComponent(),a=cce.Utils.serialize(a);await cce.Ipc.send("save-asset",e,a)}async changeAnimationGraphVariant(e){return animation_graph_variant_1.default.updateComponent(e)}async applyAnimationGraphVariant(e){var a=await animation_graph_variant_1.default.applyComponent();a&&(a=cce.Utils.serialize(a),await cce.Ipc.send("save-asset",e,a))}async changeAnimationMask(e){return"import-skeleton"===e.method?animation_mask_1.default.importSkeleton(e.uuid):"change-dump"===e.method?animation_mask_1.default.updateComponent(e.dump):"clear-nodes"===e.method?animation_mask_1.default.clearNodes():void 0}async applyAnimationMask(e){var a=animation_mask_1.default.getComponent(),a=cce.Utils.serialize(a);await cce.Ipc.send("save-asset",e,a)}async applyRenderTexture(e,a){let t;try{t=await(0,asset_1.loadAssetUncached)(e)}catch(e){console.error(e)}t&&a&&(t.resize(a.width||1,a.height||1),a=cce.Utils.serialize(t),cce.Ipc.send("save-asset",e,a))}onAssetChanged(e,a,t){asset_watcher_1.assetWatcherManager.onAssetChanged(e),this.emit("asset-change",e,a,t)}onAssetDeleted(e,a){asset_watcher_1.assetWatcherManager.onAssetDeleted(e,a.url),this.emit("asset-delete",e)}getAllReferenceAssets(e,t=[]){var a;let s=[];var r=null==(a=cc_1.assetManager.references)?void 0:a.get(e);if(r)for(let e=0,a=r.length;e<a;e++){var n=r[e][0].deref();!n||t.includes(n)||(0,cc_1.isValid)(n,!0)&&(t.push(n),s.push(n),s=s.concat(this.getAllReferenceAssets(n._uuid,t)))}return s}releaseAsset(e){const t=cc_1.assetManager.assets.get(e);if(t){if(t instanceof cc_1.Prefab){const s=[];cc_1.assetManager.assets.forEach((e,a)=>{a=cc_1.assetManager.dependUtil.getDepsRecursively(a);t&&a.includes(t.uuid)&&s.push(e)}),s.forEach(e=>{cc_1.assetManager.releaseAsset(e)})}cc_1.assetManager.releaseAsset(t)}}canDrop(e){return droppableAssetTypes.includes(e)}onDragOver(e){var a;e&&((a=0<(a=node_2.default.getRaycastResultNodes(camera_1.default.getCamera(),e.x,e.y,cc_1.Layers.makeMaskExclude([cc_1.Layers.BitMask.GIZMOS,cc_1.Layers.Enum.SCENE_GIZMO]))).length?a[0]:null)?lastHighlightNode!==a&&e.values.some(e=>"cc.Material"===e.type)&&(e=a.components.find(e=>e instanceof cc_1.MeshRenderer))&&(lastHighlightNode=a,lastHighlightMC&&!selection_1.default.isSelect(lastHighlightMC.node.uuid)&&lastHighlightMC.gizmo&&gizmos_1.default.hideGizmo(lastHighlightMC.gizmo),lastHighlightMC=e,gizmos_1.default.showGizmo("component",lastHighlightMC)):(lastHighlightMC&&!selection_1.default.isSelect(lastHighlightMC.node.uuid)&&lastHighlightMC.gizmo&&gizmos_1.default.hideGizmo(lastHighlightMC.gizmo),lastHighlightNode=null))}async onDrop(t){if(t){var s=(0,window_1.getMainWindowSize)(),r=node_2.default.getRaycastResultNodes(camera_1.default.getCamera(),t.x,t.y,cc_1.Layers.makeMaskExclude([cc_1.Layers.BitMask.GIZMOS,cc_1.Layers.Enum.SCENE_GIZMO])),n=0<r.length?r[0]:null;let e=cc.geometry.plane.create(0,1,0,0);var i=t.x,s=s.height-t.y;camera_1.default.is2D&&(e=cc.geometry.plane.create(0,0,1,0));camera_1.default.getCamera().screenPointToRay(ray,i,s);var i=cc.geometry.intersect.rayPlane(ray,e),c=new cc.Vec3;cc.Vec3.scaleAndAdd(c,ray.o,ray.d,i),c=node_2.default.makeVec3InPrecision(c,0);let a=0;var l,o,d,u={};const p=[],h=["cc.Prefab","cc.LabelAtlas"],m=new Map;t.values.filter(e=>this.canDrop(e.type)).forEach(e=>{var[a]=e.value.split("@"),t=m.get(a)||[];t.push(e),m.set(a,t)}),m.forEach((e,a)=>{e=e.some(e=>h.includes(e.type))?e.filter(e=>h.includes(e.type)):e;0<e.length&&p.push(...e)});for(const g of p)"cc.Material"===g.type?n&&(l={type:g.type,value:""},o=`__comps__.${n.components.findIndex(e=>e instanceof cc_1.MeshRenderer)}.sharedMaterials.`+a,l.value={uuid:g.value},await node_1.default.setProperty(n.uuid,o,l),a++):plugin_1.default.getDropHandle(g.type)?(u[g.type]=u[g.type]||[],u[g.type].push(g)):(d=null!=(o=null==n?void 0:n.uuid)?o:null==(l=cc_1.director.getScene())?void 0:l.uuid,cce.SceneFacadeManager.snapshot(),await cce.SceneFacadeManager.createNode({parent:d,assetUuid:g.value,name:g.name,type:g.type,canvasRequired:g.canvasRequired,unlinkPrefab:g.unlinkPrefab,position:c}),cce.SceneFacadeManager.snapshot());for(const f in u){var _=plugin_1.default.getDropHandle(f);_&&Editor.Message.send(_.name,_.item.message,r.map(dump_1.default.dumpNode),{x:c.x,y:c.y,z:c.z},u[f])}lastHighlightMC&&!selection_1.default.isSelect(lastHighlightMC.node.uuid)&&(lastHighlightMC.gizmo&&gizmos_1.default.hideGizmo(lastHighlightMC.gizmo),lastHighlightMC=null),lastHighlightNode=null}}async queryRenderPipeline(e){let a;try{a=await(0,asset_1.loadAssetUncached)(e)}catch(e){console.error(e)}return a?(render_pipeline_1.default.cacheComponent(a),render_pipeline_1.default.encodeComponent(a)):null}async changeRenderPipeline(e){return render_pipeline_1.default.updateComponent(e)}async applyRenderPipeline(e){var a=render_pipeline_1.default.getComponent(),a=cce.Utils.serialize(a),a=(await cce.Ipc.send("save-asset",e,a),await Editor.Profile.getProject("project","general.renderPipeline"));e===a&&render_pipeline_1.default.preview()}}exports.AssetManager=AssetManager,exports.default=new AssetManager;