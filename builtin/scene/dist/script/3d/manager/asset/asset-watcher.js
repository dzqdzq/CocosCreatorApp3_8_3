"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.assetWatcherManager=void 0;const cc_1=require("cc"),callbacks_invoker_1=require("../../../utils/callbacks-invoker"),ASSET_PROPS="A$$ETprops",DELIMETER=cc_1.CCClass.Attr.DELIMETER,ASSET_PROPS_KEY=ASSET_PROPS+DELIMETER+ASSET_PROPS,assetListener=cc_1.assetManager.assetListener=new callbacks_invoker_1.CallbacksInvoker;function removeCaches(e){cc_1.assetManager.assets.has(e)&&cc_1.assetManager.releaseAsset(cc_1.assetManager.assets.get(e))}function getPropertyDescriptorAndOwner(e,t){for(;e;){var s=Object.getOwnPropertyDescriptor(e,t);if(s)return{owner:e,pd:s};e=Object.getPrototypeOf(e)}return null}function forceSetterNotify(e,s){var t=getPropertyDescriptorAndOwner(e.prototype,s);if(t){if(!t.owner._modifiedSetters||!t.owner._modifiedSetters.includes(s)){var r=t.pd;if(!1===r.configurable)console.warn("Failed to register notifier for %s.%s",cc_1.js.getClassName(e),s);else if("value"in r)console.warn("Cannot watch instance variable of %s.%s",cc_1.js.getClassName(e),s);else{const a=r.set;r.set=function(e,t){a.call(this,e,t),this._watcherHandle&&(e=getUuidsOfPropValue(this[s]),this._watcherHandle.changeWatchAsset(s,e))},Object.defineProperty(t.owner,s,r),t.owner._modifiedSetters?t.owner._modifiedSetters.push(s):t.owner._modifiedSetters=[s]}}}else console.warn("Failed to get property descriptor of %s.%s",cc_1.js.getClassName(e),s)}function invokeAssetSetter(t,s,r){if(t=t.deref()){var a=cc_1.js.getPropertyDescriptor(t,s);let e=r;if(a&&a.get){var n=a.get.call(t);if(Array.isArray(n)){for(let e=0;e<n.length;e++)n[e]&&r&&n[e]._uuid===r._uuid&&(n[e]=r);e=n}if(a.set){try{Array.isArray(n)&&a.set.call(t,new Array(e.length).fill(null),!0)}catch(e){console.error(e)}a.set.call(t,e,!0),r._uuid&&cce.Asset.emit("asset-refresh",r._uuid)}}else t&&t.constructor&&"AnimationController"===t.constructor.name&&"graph"===s&&(t[s]=e)}}function getUuidsOfPropValue(e){var t=[];if(Array.isArray(e))for(const s of e)s instanceof cc_1.Asset&&s._uuid&&t.push(s._uuid);else e instanceof cc_1.Asset&&e._uuid&&t.push(e._uuid);return t}class AssetWatcher{constructor(e){this.owner=null,this.watchingInfos=Object.create(null),this.owner=e}start(){var e=this.owner,t=e.constructor;for(const a of cc_1.CCClass.Attr.getClassAttrs(t)[ASSET_PROPS_KEY].assetProps){var s=a[0],r=(forceSetterNotify(t,s),e[s]),r=getUuidsOfPropValue(r);this.registerListener(r,e,s)}}stop(){for(const t in this.watchingInfos)if(t in this.watchingInfos){var e=this.watchingInfos[t];if(e)for(const s of e.uuids)assetListener.off(s,e.callback)}this.watchingInfos=Object.create(null)}changeWatchAsset(e,t){this.unRegisterListener(e),0<t.length&&this.registerListener(t,this.owner,e)}registerListener(e,t,s){this.unRegisterListener(s);var r=invokeAssetSetter.bind(null,new WeakRef(t),s);for(const a of e)assetListener.on(a,r);this.watchingInfos[s]={uuids:e,callback:r}}unRegisterListener(e){var t=this.watchingInfos[e];if(t){for(const s of t.uuids)assetListener.off(s,t.callback);this.watchingInfos[e]=void 0}}}function parseAssetProps(s,r,a){let n=null;var e=cc_1.js.getClassName(s);if(a.includes(e))return null;if(!s.__props__)return null;var c=cc_1.CCClass.Attr.getClassAttrs(s);a=a.concat(e);for(let e=0,t=s.__props__;e<t.length;e++){var i,o=t[e],l=o+DELIMETER;(c[l+"hasSetter"]&&c[l+"hasGetter"]||"AnimationController"===s.name&&"graph"===o)&&(l=c[l+"ctor"],i=cc_1.js.isChildClassOf(l,cc_1.Asset),o=r.concat(o),i?n?n.push(o):n=[o]:cc_1.CCClass._isCCClass(l)&&(i=parseAssetProps(l,o,a))&&(n=n?n.concat(i):i))}return n}function getAssetPropsData(e){let t=cc_1.CCClass.Attr.getClassAttrs(e.constructor)[ASSET_PROPS_KEY];if(void 0===t){var s=parseAssetProps(e.constructor,[],[]);if(t={},s)for(const r of s)1<r.length?t.nestedAssetProps?t.nestedAssetProps.push(r):t.nestedAssetProps=[r]:1===r.length&&(t.assetProps?t.assetProps.push(r):t.assetProps=[r]);cc_1.CCClass.Attr.setClassAttr(e.constructor,ASSET_PROPS,ASSET_PROPS,t)}return t}function getPropObj(e,t){let s=e;for(let e=0;e<t.length;e++){var r=t[e];if(!(s=s&&s[r]))return null}return s}function walkNestedAssetProp(e,t){var s=getAssetPropsData(e);if(s&&s.nestedAssetProps)for(const a of s.nestedAssetProps){var r=a.concat();r.pop();0<r.length&&(r=getPropObj(e,r))&&t(r)}}function updateAsset(e,s,r=[]){if(cc_1.assetManager.references.has(e)){var a=cc_1.assetManager.references.get(e);for(let e=0,t=a.length;e<t;e++){var n=a[e],c=n[0].deref(),i=n[1].deref(),n=n[2];i&&c&&(r.includes(c)||(0,cc_1.isValid)(c,!0)&&(c instanceof cc_1.Material&&(s instanceof cc_1.Texture2D||s instanceof cc_1.TextureCube)?c.setProperty(n,s):(i[n]=s,c.onLoaded&&c.onLoaded()),assetListener.emit(c._uuid,c,null==s?void 0:s.uuid),r.push(c),updateAsset(c._uuid,c,r)))}}}class AssetUpdater{constructor(){this.lockNum=0,this.timer=null,this.queue=new Map}lock(){this.lockNum++,clearTimeout(this.timer)}unlock(){this.lockNum--,0===this.lockNum&&(this.timer=setTimeout(()=>{this.update()},400))}update(){this.queue.forEach((e,t)=>{e?assetListener.emit(t,e):(assetListener.emit(t,null),assetListener.off(t)),updateAsset(t,e)}),this.queue.clear()}add(e,t){this.queue.set(e,t)}remove(e){this.queue.delete(e)}}class AssetWatcherManager{constructor(){this.updater=new AssetUpdater}initHandle(e){var t=getAssetPropsData(e);e._watcherHandle=t&&t.assetProps?new AssetWatcher(e):void 0,walkNestedAssetProp(e,e=>{this.initHandle(e)})}startWatch(e){e._watcherHandle||this.initHandle(e),e._watcherHandle&&e._watcherHandle.start(),walkNestedAssetProp(e,e=>{this.startWatch(e)})}stopWatch(e){e._watcherHandle&&e._watcherHandle.stop(),walkNestedAssetProp(e,e=>{this.stopWatch(e)})}isTextureCubeSubImageAsset(e){return e.endsWith("@74afd")||e.endsWith("@8fd34")||e.endsWith("@bb97f")||e.endsWith("@7d38f")||e.endsWith("@e9a6d")||e.endsWith("@40c10")}async onAssetChanged(s){var e=await Editor.Message.request("asset-db","query-asset-info",s);if(e&&(s.endsWith("@6c48a")&&(e=s.indexOf("@"),removeCaches(s.substring(0,e))),assetListener.hasEventListener(s)||cc_1.assetManager.references.has(s)||this.isTextureCubeSubImageAsset(s))){const r=cc_1.assetManager.assets.get(s);removeCaches(s),this.updater.lock(),cc_1.assetManager.loadAny(s,(e,t)=>{e?(this.updater.unlock(),console.error(e)):(r&&t&&r.constructor.name!==t.constructor.name?(this.updater.add(s,null),console.warn("The asset type has been modified, and emptied the original reference in the scene.")):this.updater.add(s,t),this.updater.unlock())})}}onAssetDeleted(e,t){var s=cc_1.assetManager.assets.get(e);s&&((s=new s.constructor).initDefault(e),assetListener.emit(e,s)),removeCaches(e)}}const assetWatcherManager=new AssetWatcherManager;exports.assetWatcherManager=assetWatcherManager;