"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const events_1=require("events"),utils_1=require("./utils");class CameraControllerBase extends events_1.EventEmitter{constructor(){super(...arguments),this.camera_move_mode=utils_1.CameraMoveMode.IDLE,this._isGridVisible=!0,this._near=.1,this._far=1e4,this._wheelSpeed=6,this._wheelBaseScale=1/12}get near(){return this._near}set near(e){this._near=e}get far(){return this._far}set far(e){this._far=e}get wheelSpeed(){return this._wheelSpeed}set wheelSpeed(e){this._wheelSpeed=e}init(e){this._camera=e,this.node=this._camera.node}focus(e,i,s=0){}alignNodeToSceneView(e){}alignSceneViewToNode(e){}onMouseDown(e){}onMouseMove(e){}onMouseUp(e){}onMouseWheel(e){}onKeyDown(e){}onKeyUp(e){}onResize(e){}onUpdate(e){}onDesignResolutionChange(){}refresh(){}updateGrid(){}showGrid(e){e?this._isGridVisible&&(this._gridNode.active=!0,this.updateGrid()):this._gridNode.active=!1}set isGridVisible(e){this._isGridVisible=e,this.showGrid(this._isGridVisible)}get isGridVisible(){return this._isGridVisible}rotateCameraToDir(e,i){}changeProjection(){}zoomUp(){}zoomDown(){}zoomReset(){}}exports.default=CameraControllerBase;