"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const events_1=require("events"),ipcRenderer=require("electron")["ipcRenderer"],utils_1=require("../../../../public/ipc/utils"),v_stacks_1=require("v-stacks"),utils_2=require("../../../../utils/ipc/utils"),sendChannel=isPreviewProcess?utils_2.IPCChannel.PreviewSend:utils_2.IPCChannel.SceneWebSend,replyChannel=isPreviewProcess?utils_2.IPCChannel.PreviewReply:utils_2.IPCChannel.SceneWebReply;class WebviewIpc extends events_1.EventEmitter{constructor(){super(...arguments),this._storage=new utils_1.DataStorage}get storage(){return this._storage}send(t,...c){return new Promise((n,r)=>{var e={message:t,arguments:c.map(utils_1.encodeArgs),callback:function(e,s){e?r(e):n(s)},stack:""},s=this._storage.add(e);ipcRenderer.sendToHost(sendChannel,s,e.message,e.arguments)})}request(e,...s){return this.send(e,...s)}}const ipc=new WebviewIpc;exports.default=ipc,ipcRenderer.on(sendChannel,async(e,s,n,r)=>{n=ipc._events[n];try{var t=await n(...r.map(utils_1.decodeArgs));ipcRenderer.sendToHost(replyChannel,s,null,(0,utils_1.encodeArgs)(t))}catch(e){console.log(e),ipcRenderer.sendToHost(replyChannel,s,(0,v_stacks_1.encode)(e))}}),ipcRenderer.on(replyChannel,(e,s,n,r)=>{var t=ipc.storage.get(s);if(t){if(t.callback){n&&("string"==typeof n.stack&&(n.stack=n.stack.replace(/^[^\n]+/,e=>e+"\n    at <process:scene>")),n=(0,v_stacks_1.decode)(n));try{t.callback(n,(0,utils_1.decodeArgs)(r))}catch(e){console.error(e)}}}else console.warn("IPC message has been lost.");ipc.storage.remove(s)});