"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const events_1=require("events"),ipcRenderer=require("electron")["ipcRenderer"],utils_1=require("../../../../public/ipc/utils"),v_stacks_1=require("v-stacks"),utils_2=require("../../../../utils/ipc/utils"),sendChannel=isPreviewProcess?utils_2.IPCChannel.PreviewSend:utils_2.IPCChannel.NativeSend,replyChannel=isPreviewProcess?utils_2.IPCChannel.PreviewReply:utils_2.IPCChannel.NativeReply;class WebviewIpc extends events_1.EventEmitter{constructor(){super(...arguments),this._storage=new utils_1.DataStorage}get storage(){return this._storage}send(n,...a){return new Promise((r,t)=>{var e={message:n,arguments:a.map(utils_1.encodeArgs),callback:function(e,s){e?t(e):r(s)},stack:""},s=this._storage.add(e);ipcRenderer.sendToHost(sendChannel,s,e.message,e.arguments)})}request(e,...s){return this.send(e,...s)}}const ipc=new WebviewIpc;exports.default=ipc,ipcRenderer.on(sendChannel,async(e,s,r,t)=>{r=ipc._events[r];try{var n=await r(...t.map(utils_1.decodeArgs));ipcRenderer.sendToHost(replyChannel,s,null,(0,utils_1.encodeArgs)(n))}catch(e){console.log(e),ipcRenderer.sendToHost(replyChannel,s,(0,v_stacks_1.encode)(e))}}),ipcRenderer.on(replyChannel,(e,s,r,t)=>{var n=ipc.storage.get(s);if(n){if(n.callback){r&&("string"==typeof r.stack&&(r.stack=r.stack.replace(/^[^\n]+/,e=>e+"\n    at <process:scene>")),r=(0,v_stacks_1.decode)(r));try{n.callback(r,(0,utils_1.decodeArgs)(t))}catch(e){console.error(e)}}}else console.warn("IPC message has been lost.");ipc.storage.remove(s)});