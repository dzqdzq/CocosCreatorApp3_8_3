"use strict";var __importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.lightManager=void 0;const cc_1=require("cc"),component_1=__importDefault(require("../component")),node_1=__importDefault(require("../../../utils/node")),scene_view_data_1=require("./scene-view-data");class LightManager{constructor(){this._lights=[]}onSceneOpened(e,n){this._lights=[];const t=component_1.default.queryAll();Object.keys(t).forEach(e=>{e=t[e];e instanceof cc_1.LightComponent&&(node_1.default.isEditorNode(e.node)||(this.overrideLightCompFunc(e),this._lights.push(e),e[n?"onEnable":"onDisable"]()))})}onComponentAdded(e){e instanceof cc_1.LightComponent&&(node_1.default.isEditorNode(e.node)||(this.overrideLightCompFunc(e),this._lights.push(e)))}onComponentRemoved(e){e instanceof cc_1.LightComponent&&(e=this._lights.indexOf(e),this._lights.splice(e,1))}disableSceneLights(){this._lights.forEach(e=>{e.onDisable()}),cce.Engine.repaintInEditMode()}enableSceneLights(){this._lights.forEach(e=>{e.enabled&&e.node&&e.node.active&&e.onEnable()}),cce.Engine.repaintInEditMode()}overrideLightCompFunc(e){if(!e._hasOverrideOnEnable){const n=e.onEnable;e.onEnable=()=>{scene_view_data_1.sceneViewData.isSceneLightOn&&n.apply(e)},e._hasOverrideOnEnable=!0}}}const lightManager=new LightManager;exports.lightManager=lightManager;