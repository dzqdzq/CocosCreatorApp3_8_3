"use strict";var __importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0});const mesh_thumbnail_generator_1=__importDefault(require("./mesh-thumbnail-generator")),fs_1=__importDefault(require("fs")),path_1=__importDefault(require("path"));class ThumbnailManager{constructor(){this._generator=new Map,this._projectCacheMap=new Map}register(e,t){this._generator.has(e)?console.error("Thumbnail registed $type already"):this._generator.set(e,t)}unRegister(e){this._generator.has(e)&&this._generator.delete(e)}async uuidToPath(e,t=null){return this._projectCacheMap.has(e)?this._projectCacheMap.get(e):(t=(t=t||await Editor.Message.request("asset-db","query-asset-info",e)).url.match(/db:\/\/([^\/]*)/)[1],path_1.default.join(Editor.Project.tmpDir,"asset-db",t,e.substr(0,2),e,e+".png"))}async queryThumbnailSingle(e,t=""){var s;return""===t&&(t=null==(s=await Editor.Message.request("asset-db","query-asset-info",e))?void 0:s.type),this._generator.has(t)?(s=await this.uuidToPath(e),fs_1.default.existsSync(s)?s:this._generator.get(t).getThumbnail(e,s)):""}async queryThumbnail(h,u=[]){return new Promise((n,e)=>{(async()=>{const t=[];var e=u.length===h.length;let s=0,a=h.length;for(const r in h){const i=h[r];this.queryThumbnailSingle(i,e?u[r]:"").then(e=>{t[r]=e,++s===a&&n(t)}).catch(e=>{--a,t[r]="",console.debug("queryThumbnail fail",i,e),s===a&&n(t)})}})()})}async delete(e,t){this._generator.get(t.type)&&(t=await this.uuidToPath(e,t),fs_1.default.existsSync(t)&&fs_1.default.rmSync(t),this._projectCacheMap.delete(e))}init(){isPreviewProcess||(this.register("cc.Mesh",new mesh_thumbnail_generator_1.default),this.generateAll())}assetChange(t,e,s){this.queryThumbnailSingle(t,null==e?void 0:e.type).then(e=>{this._projectCacheMap.set(t,e)})}async assetDelete(e,t){t=t||await Editor.Message.request("asset-db","query-asset-info",e),this.delete(e,t)}async generateAll(){var e=await Editor.Message.request("asset-db","query-assets",{importer:"gltf-mesh"});const a=[],s=[],r=this,i=function(t){r._generator.has(t.type)&&(a.push(t.uuid),s.push(t.type)),t.subAssets&&Object.keys(t.subAssets).forEach(async e=>{i(t.subAssets[e])})};e.forEach(e=>{i(e)}),console.time("Thumbnail Generate Cost Time"),this.queryThumbnail(a,s).then(t=>{for(let e=0;e<a.length;e++){var s=a[e];this._projectCacheMap.set(s,t[e])}console.timeEnd("Thumbnail Generate Cost Time")})}}exports.default=new ThumbnailManager;