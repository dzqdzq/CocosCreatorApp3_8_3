"use strict";var __importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.PanelIpc=void 0;const events_1=__importDefault(require("events"));class PanelIpc extends events_1.default{constructor(){super(...arguments),this._engineView=null}setEngineView(e){this._engineView=e}sendToScene(e,...n){var t=this._engineView;null!=t&&t.callNativeSceneMethod&&t.callNativeSceneMethod(t.isPreviewEnabled,e,...n)}async requestToScene(e,...n){var t=this._engineView;if(null!=t&&t.callNativeSceneMethod)return t.callNativeSceneMethod(t.isPreviewEnabled,e,...n)}onSceneToPanel(e,...n){this.emit("onSceneToPanel",e,...n)}sendToBrowser(e,...n){Editor.Message.send("scene","panel-browser",e,...n)}async requestToBrowser(t,...s){return new Promise(e=>{let n=setTimeout(()=>{n=null,console.debug(`nativeWindowPanel requestToBrowser:${t} timeout`),e(!1)},1e3);Editor.Message.request("scene","panel-browser",t,...s).then(()=>{n&&(n=null,clearTimeout(n)),e(!0)})})}async onBrowserToPanel(n,t,...s){return new Promise(e=>{this.emit("onBrowserToPanel",{panel:n,method:t,args:s,callback:e})})}}const panelIpc=new PanelIpc;exports.PanelIpc=panelIpc;