"use strict";var __createBinding=this&&this.__createBinding||(Object.create?function(e,i,n,t){void 0===t&&(t=n);var s=Object.getOwnPropertyDescriptor(i,n);s&&("get"in s?i.__esModule:!s.writable&&!s.configurable)||(s={enumerable:!0,get:function(){return i[n]}}),Object.defineProperty(e,t,s)}:function(e,i,n,t){e[t=void 0===t?n:t]=i[n]}),__setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(e,i){Object.defineProperty(e,"default",{enumerable:!0,value:i})}:function(e,i){e.default=i}),__importStar=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var i={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&__createBinding(i,e,n);return __setModuleDefault(i,e),i};Object.defineProperty(exports,"__esModule",{value:!0}),exports.NativeWindowBrowser=void 0;const path=__importStar(require("path"));let SceneWindowClass;const addonRoot=path.join(Editor.App.path,"../tools/native-scene"),isWin32="win32"===process.platform,NativeManager=require(path.join(addonRoot,"addon")).NativeEngineManager,electron_1=(SceneWindowClass=isWin32?require("./win32/scene-window").Win32SceneWindow:require("./mac/scene-window").MacSceneWindow,require("electron")),panel_constant_1=require("../../../panel/panel-constant"),ipc_1=require("../ipc");class NativeWindowBrowser{constructor(e){this._previewWindows={},this._sceneWindows={},this._isPreview=!1,this._panelMap={},this._window=e,this._windowHandle=e.getNativeWindowHandle(),this._initEvents(),this._nativeManager=new NativeManager,this._nativeManager.init(this._windowHandle,800,600)}_initEvents(){isWin32&&electron_1.powerMonitor.on("unlock-screen",()=>{console.log("unlock"),this.redraw(this._isPreview)}),this._window.on("restore",()=>{this.redraw(this._isPreview)}),this._window.on("focus",()=>{this.redraw(this._isPreview)}),this._window.on("move",()=>{this.redraw(this._isPreview)}),this._window.on("resized",()=>{this.redraw(this._isPreview)})}async initWindows(s=!1){[panel_constant_1.PanelName.Scene,panel_constant_1.PanelName.Preview].forEach(async e=>{var i,n,t;!this._panelMap[e]||(i=s?this._previewWindows:this._sceneWindows)[e]||(n=this._panelMap[e],this.redraw(!1),await(t=new SceneWindowClass(this._nativeManager,this._windowHandle,e,s)).init(n),s&&(t.previewProcess=!0,t.setVisible(!1)),e!==panel_constant_1.PanelName.Preview||s||await this.showCameraOnPreviewPanel(),i[e]=t)})}releaseWindows(e=!1){e?this._previewWindows={}:this._sceneWindows={}}onPanelReady(e,i){this._panelMap[e]=i}onPanelClose(e){this._previewWindows[e]&&(this._previewWindows[e].close(),delete this._previewWindows[e]),this._sceneWindows[e]&&(this._sceneWindows[e].close(),delete this._sceneWindows[e]),delete this._panelMap[e]}async onPanelResize(e,i){this._panelMap[e]&&(this._panelMap[e]=i);e=this.getSceneWindow(e);if(e)return e.resize(i)}async onPanelShow(e){e=this.getSceneWindow(e);await(null==e?void 0:e.setVisible(!0))}async onPanelHide(e){var i=this.getSceneWindow(e,!1),i=(await(null==i?void 0:i.setVisible(!1)),this.getSceneWindow(e,!0));await(null==i?void 0:i.setVisible(!1))}async switchWindows(e){var i,n;this._isPreview!==e&&(i=(this._isPreview=e)?this._previewWindows:this._sceneWindows,n=e?this._sceneWindows:this._previewWindows,e||await this.showCameraOnPreviewPanel(),await this.setWindowsVisible(i,!0),await this.setWindowsVisible(n,!1),await this.redraw(e))}async setWindowsVisible(i,n){var t=Object.keys(i);for(let e=0;e<t.length;e++){var s=t[e],a=this._panelMap[s],s=i[s];n?(await s.setVisible(!0),await s.resize(a)):await s.setVisible(!1)}}async redraw(e){return e?ipc_1.b2sIpc.requestToPreview("redraw"):ipc_1.b2sIpc.requestToScene("redraw")}getSceneWindow(e,i){let n=this._isPreview;return((n=void 0!==i?i:n)?this._previewWindows:this._sceneWindows)[e]}async showCameraOnPreviewPanel(){var e=this.getSceneWindow(panel_constant_1.PanelName.Preview);e&&(e=await e.redirectTargetWindow(),await ipc_1.b2pIpc.request(panel_constant_1.PanelName.Preview,"setCameraInvalid",0===e))}async setPanelBackgroundVisible(i){await this.redraw(this._isPreview),Object.keys(this._panelMap).forEach(e=>{ipc_1.b2pIpc.send(e,"setBackgroundVisible",i)})}}exports.NativeWindowBrowser=NativeWindowBrowser;