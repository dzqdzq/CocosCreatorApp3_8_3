"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const EventEmitter=require("events")["EventEmitter"],utils_1=require("../../script/utils/ipc/utils"),v_stacks_1=require("v-stacks");class SceneNativeIpc extends EventEmitter{constructor(e,s,t){super(),this._storage=new utils_1.DataStorage,this.isReady=!1,this.$webview=null,this.messageBuffer=[],this.$webview=e,this._sendChannel=s,this._replyChannel=t,this.listen()}listen(){this.$webview.addEventListener("ipc-message",e=>{e.channel===this._sendChannel?this._onWebviewSend(e):e.channel===this._replyChannel&&this._onWebviewSendReply(e)})}setReady(e){this.isReady=e,this.isReady&&this.messageBuffer.forEach(e=>{this.$webview.send(this._sendChannel,e.id,e.data.message,e.data.arguments)}),this.messageBuffer.length=0}clearBuffer(){this.messageBuffer.length=0}send(i,...a){return new Promise((t,n)=>{var e={message:i,arguments:a.map(utils_1.encodeArgs),callback:function(e,s){e?n(e):t(s)},stack:""},s=this._storage.add(e);if(!this.isReady)return this.messageBuffer.push({id:s,data:e});this.$webview.send(this._sendChannel,s,e.message,e.arguments)})}async _onWebviewSend(s){var[s,e,t]=s.args,t=t.map(utils_1.decodeArgs),n=this._events[e];if(!n)return e=new Error("Could not find the message: "+e),console.warn(e),this.$webview.contentWindow?void this.$webview.send(this._replyChannel,s,e):void 0;try{var i=await n(...t);this.$webview.contentWindow&&this.$webview.send(this._replyChannel,s,null,(0,utils_1.encodeArgs)(i))}catch(e){console.error(e),this.$webview.contentWindow&&this.$webview.send(this._replyChannel,s,(0,v_stacks_1.encode)(e))}}_onWebviewSendReply(e){var s=e.args[0];let t=e.args[1];var e=(0,utils_1.decodeArgs)(e.args[2]),n=this._storage.get(s);n?n.callback&&(t&&(t.stack?t.stack=t.stack.replace(/^[^\n]+/,e=>e+"\n    at <process:scene>"):t.stack=t.message+`
    at <process:scene>`,t=(0,v_stacks_1.decode)(t)),n.callback(t,e)):console.warn("IPC message has been lost."),this._storage.remove(s)}}exports.default=SceneNativeIpc;