"use strict";module.exports={title:"Scene",description:"Cocos Creator Scene Editor",preview_title:"Preview",dock:"DOCK",project_2d_name:"2D Project",project_2d_tooltip:'Current Project is type of 2D Project.<br>If you want to switch the current project to a 3D project, <br>check "Basic 3D Features" module checkbox from the menu: <br>Project / Project Settings / Feature Cropping',new:"New Scene",save:"Save Scene",save_as:"Save As",align_with_view:"Align Node with Scene View",align_view_with_node:"Align Scene View with Node",is3DValueWarn:"The value is invalid because 3d mode is not enabled, but it has taken effect. Please check it",distribution:"Distribute:",alignment:"Align:",menu:{undo:"Undo",redo:"Redo",newNodeEmpty:"Empty Node",new3dObject:"3D Object",new3dCube:"Cube",new3dCylinder:"Cylinder",new3dSphere:"Sphere",new3dCapsule:"Capsule",new3dCone:"Cone",new3dTorus:"Torus",new3dPlane:"Plane",new3dQuad:"Quad",newLightObject:"Light",newLightDirectional:"Directional Light",newLightSphere:"Sphere Light",newLightSpot:"Spot Light",newLightProbe:"Light Probe Group",newReflectionProbe:"Reflection Probe",newCameraObject:"Camera",newTerrain:"Terrain",newEffects:"Effects",newEffectsParticle:"Particle System",newUI:"UI Component",newRenderUI:"2D Object",newUICanvas:"Canvas",newUISprite:"Sprite",newUILabel:"Label",newUIButton:"Button",newUIToggle:"Toggle",newUIToggleGroup:"ToggleGroup",newUISlider:"Slider",newUIProgressBar:"ProgressBar",newUIWidget:"Widget",newUIEditBox:"EditBox",newUILayout:"Layout",newUIScrollView:"ScrollView",newUIMask:"Mask",newUIParticle2D:"ParticleSystem2D",newUISpriteSplash:"SpriteSplash",newUIRichText:"RichText",newUITiledMap:"TiledMap",newUIVideoPlayer:"VideoPlayer",newUIWebView:"WebView",newUIPageView:"PageView",newUIGraphics:"Graphics",newSpriteRenderer:"SpriteRenderer",experimental:"Experimental",help_url:"Help Document"},develop:"Open Scene DevTools",preview_develop:"Open Preview DevTools",graphical_tools:"Toggle Graphics Tool",terrain:{is_create_message:"You need terrain assets, when you visit terrain editor, do you want to create it?",is_create:"Do you need to create terrain asset?",path_unlegal:"Please limit the saved path to the current project assets path",cancel:"Cancel",edit:"Edit",save:"Save",delete:"Delete",abort:"Abort",manage:"Manage",bulge:"Paint Bulge",sunken:"Paint Sunken",smooth:"Paint Smooth",paint:"Paint",sculpt:"Sculpt",select:"Select",noImageData:"No Data",tileSize:"Tile Size",weightMapSize:"Weight Map Size",lightMapSize:"Light Map Size",blockCount:"Block Count",brushSize:"Brush Size",brushStrength:"Brush Strength",brushHeight:"Brush Height",brushMode:"Brush Mode",brushRotation:"Brush Rotation",brushFalloff:"Brush Falloff",brush:"Brush",layer:"Terrain Layer",normalMap:"Normal Map",metallic:"Metallic",roughness:"Roughness",paintTileSize:"Tile Size",index:"Index",layers:"Layers",weight:"Weight"},messages:{cannot_cut_to_self:"Can not cut node and paste to isself",warning:"Warning",scenario_modified:" data has been modified.",want_to_save:"Do you want to save data to the file.?",save:"Save",dont_save:"Don't save",cancel:"Cancel",save_fail:"Failed to save scene: please limit the saved path to the current project assets path and suffix it with '.scene'",save_fail_prefab:"Failed to save prefab: please limit the saved path to the current project assets path and suffix it with '.prefab'",save_type_fail:"New scene save type mismatch",confirm:"Confirm",particle_system_2d:{export_error:"This resource does not support exports outside of the project，please limit the saved path to the current project assets path and suffix it with.plist"},scene_cache:{use_latest_scene:"It is found that the scene {url} to be opened has unsaved scene data generated by {time}. Do you want to apply this data?",use_last_scene:"Failed to open the scene ({url}). The scene data may be damaged. We found the scene has data of the historical cached version ({time}), do you apply it?",apply:"Apply",no:"No"},not_response:"Scene Not Response",debug_native:"Open C++ debug tool,debug with attaching process id",graphical_tools_not_support:"Editor preview and native scene does not support graphical tools yet",webGLContextLost:{message:"WebGL context of the scene view has been lost. Do you want to reload it to restore the context?",title:"WebGL Context Lost",buttons:{reload:"Reload",cancel:"Cancel"}}},save_prefab:"Save",close_prefab:"Close",save_clip:"Save",close_clip:"Close",gizmos:{tools_visibility_3d:"3D Tools Visibility",icon3d:"3D Icons",showGrid:"Show Grid"},ui_tools:{zoom_up:"Zoom up",zoom_down:"Zoom down",zoom_reset:"Actual Size",align_top:"Align Top",align_v_center:"Align Vertical Center",align_bottom:"Align Bottom",align_left:"Align Left",align_h_center:"Align Horizontal Center",align_right:"Align Right",distribute_top:"Distribute Top",distribute_v_center:"Distribute Vertical Center",distribute_bottom:"Distribute Bottom",distribute_left:"Distribute Left",distribute_h_center:"Distribute Horizontal Center",distribute_right:"Distribute Right"},tooltips:{translate_gizmo:"Move Gizmo, drag gizmo handle to change Node's position. (W)",rotate_gizmo:"Rotate Gizmo, drag gizmo handle to change Node's rotation. (E)",scale_gizmo:"Scale Gizmo, drag gizmo handle to change Node's scale. (R)",rect_gizmo:"Rect Gizmo, drag edges or corner points to change Node's size and position. (T)",local:"Local",local_gizmo:"Gizmo's rotation is relative to the Node's.",global:"Global",global_gizmo:"Gizmo's rotation stay the same as world space orientation.",pivot:"Pivot",pivotTip:"Position the Gizmo at the actual anchor point of a Node",center:"Center",centerTip:"Position the Gizmo at the center of the object’s rendered bounds.",edit_mode:"Switch 2D/3D Edit Mode. (2)",rotationTip3D:"The degree of rotation in local space.<br>The corresponding scripting API is Node.eulerAngles.",rotationTip2D:"The degree of rotation in counter clockwise.<br>The corresponding scripting API is Node.angle.",scaleTip:"The scaling of this node in local space",positionTip:"Position coordinates in local space"},increment_snap:{title:"Increment Snap Configuration",enable_translate:"Enable snap when moving",enable_rotate:"Enable snap when rotating",enable_scale:"Enable snap when scaling",xyz_together:"X, Y, and Z all use X value"},rect_tool_snap:{title:"Rect Tool Snap Configuration",enable_snap:"Enable auto snap",threshold:"Snap threshold"},scripting:{crReport:"Possible circular-reference in {importer}: when import {imported} from {source}."},camera_size:{render_target_resolution:"Render target resolution"},scene_view:{is_scene_light_on:"If toggle on, all the light in the scene is used, otherwise use a directional light align with editor camera"},animation:{delete_edit_clip_limit:"Can not remove the animation clip being edited in the animation editing mode"},debug_view:{base_shading:"Basic Shading",shaded:"Shaded",wireframe:"Wireframe",wireframe_on_shaded:"Wireframe on Shaded",performance_info:"Performance Info",overdraw:"Overdraw",mipMap_density:"MipMap Density",UV_density:"UV Density",lightMap_density:"LightMap Density",light_map_uv:"Light Map UV",normalMap:"Normal Map",physics_info:"Physics Info",collision:"Collision",rendering_debug_options:"Rendering Debug (surface shader only)",rendering_single_option:"Rendering Single Option",CSM_layer_coloration:"CSM Layer Coloration",lighting_with_base_color:"Lighting with Base Color",disable_all_single_options:"Disable All Single Options",model_info:"Model Info",vertex_colors:"Vertex Colors",world_normal:"World Normal",world_tangent:"World Tangent",world_position:"World Position",mirrored_normal:"Mirrored Normal",UV0:"UV0",UV1:"UV1",projection_depth_z:"Projection Depth Z",liner_depth_w:"Liner Depth W",front_face_coloration:"Front Face Coloration",material_info:"Material Info",world_space_pixel_normals:"World Space Pixel Normals",world_space_pixel_tangents:"World Space Pixel Tangents",world_space_pixel_binormals:"World Space Pixel Binormals",base_color:"Base Color",diffuse_color:"Diffuse Color",specular_color:"Specular Color",opacity:"Opacity",metallic:"Metallic",roughness:"Roughness",specular_intensity:"Specular Intensity",ior:"Index of Refractivity",lighting_info:"Lighting Info",direct_diffuse:"Direct Diffuse",direct_specular:"Direct Specular",direct_lighting:"Direct Lighting",ambient_diffuse:"Ambient Diffuse",ambient_specular:"Ambient Specular",ambient_lighting:"Ambient Lighting",emissive:"Emissive",light_map:"Light Map",shadows:"Shadows",ambient_occlusion:"Ambient Occlusion",adv_lighting_info:"Advanced Lighting Info",fresnel:"Fresnel",direct_transmit_diffuse:"Direct Transmittance",direct_transmit_specular:"Direct Refract",ambient_transmit_diffuse:"Ambient Transmittance",ambient_transmit_specular:"Ambient Refract",transmit_lighting:"Transmittance Lighting",direct_trt:"Direct Internal Reflection",ambient_trt:"Ambient Internal Reflection",trt_lighting:"Internal Reflection Lighting",tt_lighting:"Internal Transmit Lighting",misc_info:"Misc Info",fog_factor:"Fog",rendering_composite_options:"Rendering Composite Options",enable_all_composite_options:"Enable All Composite Options",lighting:"Lighting",tone_mapping:"Tone Mapping",cammacorrection:"GammaCorrection",transmit_diffuse:"Transmittance Lighting",transmit_specular:"Refract"},game_view:{edit:"Edit...",design_resolution:"Design Resolution",free_aspect:"Free Aspect",full_screen_tips:"Fit to current view",devtool_invalid:"preview devtool is available only in editor preview mode",ready:"preview process is ready",failed:"preview process inited failed"},editor_camera:{fov:"Fov",fovTip:"Field of view of the camera.",far:"Far",farTip:"Far clipping distance of the camera, should be as small as possible within acceptable range.",near:"Near",nearTip:"Near clipping distance of the camera, should be as large as possible within acceptable range.",color:"Color",colorTip:"Clearing color of the camera.",wheel:"Wheel",wheelTip:"Wheel Speed",wander:"Wander",wanderTip:"Wander Speed",enableAcceleration:"Acceleration",enableAccelerationTip:"Wander Acceleration. If enable, editor camera will accelerate over time when moving, otherwise camera will move in a constant speed",aperture:"Aperture",apertureTip:"Camera aperture, controls the exposure parameter",shutter:"Shutter",shutterTip:"Camera shutter, controls the exposure parameter",iso:"Iso",isoTip:"Camera ISO, controls the exposure parameter",settings:{reset:"Reset Settings"}},contributions:{messages:{description:{gameview_stop:"Stop GameView",gameview_play_of_switch_scene:"The GameView is currently in the playing state. To switch scenes, please stop GameView.",open_scene:"Open scene",close_scene:"Close scene",save_scene:"Save scene",save_as_scene:"Save scene to other place",query_is_ready:"Query the ready state of current scene",query_dirty:"Query dirty state of current scene",query_classes:"Query all classes",query_components:"Query all components",query_component_has_script:"Whether a script is in the components list",query_node_tree:"Query node tree information",query_node_by_asset_uuid:"Query node by asset uuid",set_property:"Set property of object",reset_property:"reset a property of object with default value",move_array_element:"Move the position of item in the property with Array type",remove_array_element:"Remove the item of property with Array type",cut_node:"Cut node",copy_node:"Copy node, prepare data for paste or create node",duplicate_node:"Duplicate node",paste_node:"Paste node",set_parent:"Set parent of node",create_node:"Create node",query_node:"Query dump data of node",reset_node:"Reset node properties: position, rotation, scale.",remove_node:"Remove node",create_component:"Create component",reset_component:"Reset component",execute_component_method:"Execute method of component",execute_scene_script:"Execute method of extension script",query_component:"Query dump data of component",snapshot:"Snapshot current scene state",snapshot_abort:"Abort snapshot",soft_reload:"Soft reload scene",change_gizmo_tool:"Change gizmo tool",change_gizmo_pivot:"Change gizmo pivot",change_gizmo_coordinate:"Change gizmo coordinate",change_is2D:"Change between 2D/3D view",set_grid_visible:"Show or hide grid",query_is_grid_visible:"Query visible state of grid",set_icon_gizmo_3d:"Set the IconGizmo to 3D or 2D",query_is_icon_gizmo_3d:"Query IconGizmo mode",set_icon_gizmo_size:"Set the size of IconGizmo",query_icon_gizmo_size:"Query size of IconGizmo",query_gizmo_tool_name:"Query current gizmo tool name",query_gizmo_pivot:"Query current gizmo pivot name",query_gizmo_coordinate:"Query current gizmo coordinate name",query_is2D:"Query current view mode(2D/3D)",focus_camera:"Focus editor camera to nodes",align_with_view:"Apply the scene camera position and Angle to the selected node",align_view_with_node:"Applies the selected node position and Angle to the current view",scene_ready:"Message when scene is opened",scene_close:"Message when scene is closed",UITransform_lack:"UI node is being added, but the cc.UITransform component is not found in any upper node",UITransform_add_to_root:"Add cc.UITransform component to the root node",UITransform_within_canvas:"Create the Canvas node as the parent node",UITransform_cancel:"Cancel",animationComponentCollision:"Animation controller component, animation component and skeleton animation component cannot coexist.",physicsDynamicBodyShape:"A dynamic rigid body can not have the following collider shapes: Terrain, Plane and Non-Convex Mesh.",light_probe_edit_mode_changed:"LightProbe edit mode changed notification",light_probe_bounding_box_edit_mode_changed:"LightProbe component bounding box edit mode changed notification",light_probe_delete_when_editing_probe:"Currently in probe editing mode The probe node being edited cannot be modified. Please exit probe editing mode and try again.",begin_recording:"Begin node recording for undo",end_recording:"End node recording for undo",cancel_recording:"Cancel node recording for undo",create_prefab:"Create prefab asset(record undo automatically)",apply_prefab:"Apply modification to prefab asset(record undo automatically)",restore_prefab:"Restore prefab node form asset(record undo automatically)",revert_removed_component:"Revert removed component(record undo automatically)",apply_removed_component:"Apply removed component to prefab asset(record undo automatically)"},doc:{open_scene:`
                - uuid {string} uuid of scene asset`,query_classes:`
                @returns {[Object]}
                - extends? {string} filter classes which extend from this class
                `,query_components:`
                @returns {[Object]}
                - name {string} name of component
                - path {string} path in menu
                `,query_component_has_script:`
                - name class name of script
                
                @returns {boolean} exist or not
                `,query_node_tree:`
                - uuid? {string} the uuid of root node, default is scene node
                
                @returns {Object}
                - name {string} name of node or 'scene'
                - active {boolean} active state of node
                - type {string} cc.Scene or cc.Node
                - uuid {string} uuid of node
                - children {[]} children of current node
                - prefab {number} state of prefab, 1: normal, 2: lost resource
                - isScene {boolean} whether it is a scene node
                - components {[Object]} array of component
                    - type {string} type of component
                    - value {string} uuid of component
                    - extends {[string]} array of component inheritance chain
                `,query_node_by_asset_uuid:`
                - Query node by asset uuid
                
                @returns {string[]}  uuid of node
                `,set_property:`
                - options {SetPropertyOptions}
                    - uuid {string} uuid of the object
                    - path {string} search path of the property
                    - dump {IProperty} the dump data of the property
                `,reset_property:`
                - options {SetPropertyOptions}
                    - uuid {string} uuid of the object
                    - path {string} search path of the property
                `,move_array_element:`
                - options {MoveArrayOptions}
                    - uuid {string} uuid of node
                    - path {string} search path of array
                    - target {number} original index of the target item
                    - offset {number} move offset
                
                @returns {boolean} whether it is successful
                `,remove_array_element:`
                - options {MoveArrayOptions}
                    - uuid {string} uuid of node
                    - path {string} search path of array
                    - index {number} index of item
                
                @returns {boolean} whether it is successful
                `,copy_node:`
                - uuids {string | string[]} uuid of node
                
                @returns {string | string[]} uuid of node
                `,cut_node:`
                - uuids {string | string[]} uuid of node
                
                @returns {string | string[]} uuid of node
                `,duplicate_node:`
                - uuids {string | string[]} uuid of node
                
                @returns {string | string[]} uuid of new node
                `,paste_node:`
                - options {PasteNodeOptions}
                    - target {string} uuid of target node
                    - uuids {string | string[]} uuid of node that is copied
                    - keepWorldTransform {boolean} whether to keep the world transform
                
                @returns {string | string[]} uuid of new node
                `,set_parent:`
                - options {CutNodeOptions}
                    - parent {string} uuid of parent
                    - uuids {string|string[]} uuid of the node that need to set
                    - keepWorldTransform {boolean} whether to keep the world transform
                
                @returns {string | string[]} uuid of node
                `,create_node:`
                - options {CreateNodeOptions}
                    - parent {string} uuid of parent
                    - components? {string[]} component names
                
                    - name? {string} name of node
                    - dump? {INode | IScene} dump data of node
                    - keepWorldTransform? {boolean} 是whether to keep the world transform
                    - type? {string} asset type
                    - canvasRequired? {boolean} need cc.Canvas or not
                    - unlinkPrefab? {boolean} to be a normal node
                    - assetUuid? {string} uuid of asset, if this value is set, create node from this asset
                
                @returns {string | string[]} uuid of node
                `,query_node:`
                - uuid {string} uuid of node

                @returns {Object} dump of node
                `,reset_node:`
                - uuid {string} uuid of node

                @returns {boolean} whether it is successful
                `,restore_prefab:`
                - uuid {string} uuid of node
                - assetUuid {string} uuid of asset

                @returns {boolean} whether it is successful
                `,remove_node:`
                - options {RemoveNodeOptions}
                    - uuid: {string | string[]} uuid of node
                `,create_component:`
                - options {CreateComponentOptions}
                    - uuid {string} uuid of node
                    - component {string} classId (cid) (is recommended) or className
                `,remove_component:`
                - options {CreateComponentOptions}
                    - uuid {string} uuid of node
                    - component {string} classId (cid) (is recommended) or className
                `,reset_component:`
                - options {ResetComponentOptions}
                    - uuid {string} uuid of component
                
                @returns {boolean} whether it is successful
                `,execute_component_method:`
                - options {ExecuteComponentMethodOptions}
                    - uuid {string} uuid of component
                    - name {string} name of method
                    - args {any[]} arguments
                `,execute_scene_script:`
                - options {ExecuteSceneScriptMethodsOptions}
                    - name {string} name of extension
                    - method {string} name of method
                    - args {any[]} arguments
                `,query_component:`
                - uuid {string} uuid of component

                @returns {Object} dump of component
                `,change_gizmo_tool:`
                - name {string} tool name 'position' | 'rotation' | 'scale' | 'rect'
                `,change_gizmo_pivot:`
                - name {string} pivot name 'pivot' | 'center'
                `,change_gizmo_coordinate:`
                - type {string} coordinate name 'local' | 'global'
                `,change_is2D:`
                - is2D {boolean} 2D/3D view
                `,set_grid_visible:`
                - visible {boolean} show/hide grid
                `,query_is_grid_visible:`
                @returns {boolean} true: visible, false: invisible
                `,set_icon_gizmo_3d:`
                - is3D {boolean} 3D/2D IconGizmo
                `,query_is_icon_gizmo_3d:`
                @returns {boolean} true: 3D, false: 2D
                `,set_icon_gizmo_size:`
                - size {number} size of IconGizmo
                `,query_icon_gizmo_size:`
                @returns {number} size of IconGizmo
                `,query_gizmo_tool_name:`
                @returns {string} 'position' | 'rotation' | 'scale' | 'rect'
                `,query_gizmo_pivot:`
                @returns {string} 'pivot' | 'center'
                `,query_gizmo_coordinate:`
                @returns {string} 'local' | 'global'
                `,query_is2D:`
                @returns {boolean} true:2D, false:3D
                `,focus_camera:`
                - uuids {string[] | null} uuid of node
                `,align_with_view:`
                @returns {null}
                `,align_view_with_node:`
                @returns {null}
                `,scene_ready:`
                - uuid {string} uuid of scene
                `,light_probe_edit_mode_changed:`
                - mode {boolean} light probe edit mode after changed
                `,light_probe_bounding_box_edit_mode_changed:`
                - mode {boolean} light probe component bounding box edit mode after changed
                `},example:{open_scene:`
await Editor.Message.request('scene', 'open-scene', sceneUuid);
                `,save_scene:`
await Editor.Message.request('scene', 'save-scene');
                `,save_as_scene:`
await Editor.Message.request('scene', 'save-as-scene');
                `,close_scene:`
await Editor.Message.request('scene', 'close-scene');
                `,query_is_ready:`
await Editor.Message.request('scene', 'query-is-ready');
                `,query_dirty:`
await Editor.Message.request('scene', 'query-dirty');
                `,query_classes:`
await Editor.Message.request('scene', 'query-classes');
                `,query_components:`
await Editor.Message.request('scene', 'query-components');
                `,query_component_has_script:`
await Editor.Message.request('scene', 'query-component-has-script', 'cc.Sprite');
                `,query_node_tree:`
await Editor.Message.request('scene', 'query-node-tree', nodeUuid);
                `,query_node_by_asset_uuid:`
await Editor.Message.request('scene', 'query-nodes-by-asset-uuid', assetUuid);
                `,set_property:`
await Editor.Message.request('scene', 'set-property', {
    uuid: nodeUuid,
    path: '__comps__.1.defaultClip',
    dump: {
        type: 'cc.AnimationClip',
        value: {
            uuid: animClipUuid,
        },
    },
});
                `,reset_property:`
await Editor.Message.request('scene', 'reset-property', {
    uuid: nodeUuid,
    path: 'position',
});
                `,move_array_element:`
await Editor.Message.request('scene', 'move-array-element', {
    uuid: nodeUuid,
    path: '__comps__',
    target: 1,
    offset: -1,
});
                `,remove_array_element:`
await Editor.Message.request('scene', 'remove-array-element', {
    uuid: nodeUuid,
    path: '__comps__',
    index: 0,
});
                `,copy_node:`
await Editor.Message.request('scene', 'copy-node', uuids);
                `,cut_node:`
await Editor.Message.request('scene', 'cut-node', uuids);
                `,duplicate_node:`
await Editor.Message.request('scene', 'duplicate-node', uuids);
                `,paste_node:`
await Editor.Message.request('scene', 'paste-node', {
    target: nodeUuid,
    uuids: nodeUuids,
});
                `,set_parent:`
await Editor.Message.request('scene','set-parent', {
    parent: nodeUuid,
    uuids: nodeUuids,
});
                `,create_node:`
await Editor.Message.request('scene', 'create-node', {
    name: 'New Node'
    parent: nodeUuid,
});
                `,query_node:`
await Editor.Message.request('scene', 'query-node', nodeUuid);
                `,reset_node:`
await Editor.Message.request('scene', 'reset-node', {
    uuid: nodeUuid,
});
                `,restore_prefab:`
await Editor.Message.request('scene', 'restore-prefab', nodeUuid, assetUuid);
                `,remove_node:`
await Editor.Message.request('scene', 'remove-node', { 
    uuid: nodeUuid
});
                `,create_component:`
Editor.Message.request('scene', 'create-component', { 
    uuid: nodeUuid,
    component: 'cc.Sprite'
});
                `,remove_component:`
await Editor.Message.request('scene', 'remove-component', { 
    uuid: componentUuid,
});
                `,reset_component:`
await Editor.Message.request('scene', 'reset-component', {
    uuid: componentUuid,
});
                `,execute_component_method:`
await Editor.Message.request('scene', 'execute-component-method', {
    uuid: componentUuid,
    name: 'getNoisePreview',
    args: [100, 100],
});
                `,execute_scene_script:`
await Editor.Message.request('scene', 'execute-scene-script', {
    name: 'animation-graph',
    method: 'query',
    args: [],
});
                `,snapshot:`
await Editor.Message.request('scene', 'snapshot');
                `,snapshot_abort:`
await Editor.Message.request('scene', 'snapshot-abort');
                `,begin_recording:`
const undoID = await Editor.Message.request('scene', 'begin-recording', nodeUuid);
                `,end_recording:`
await Editor.Message.request('scene', 'end-recording', undoID);
                `,cancel_recording:`
await Editor.Message.request('scene', 'cancel-recording', undoID);
                `,soft_reload:`
await Editor.Message.request('scene', 'soft-reload');
                `,query_component:`
await Editor.Message.request('scene', 'query-component', nodeUuid);
                `,change_gizmo_tool:`
await Editor.Message.request('scene', 'change-gizmo-tool', 'position');
                `,change_gizmo_pivot:`
await Editor.Message.request('scene', 'change-gizmo-pivot');
                `,change_gizmo_coordinate:`
await Editor.Message.request('scene', 'change-gizmo-coordinate', 'global');
                `,change_is2D:`
await Editor.Message.request('scene', 'change-is2D', true);
                `,set_grid_visible:`
await Editor.Message.request('scene', 'set-grid-visible', false);
                `,query_is_grid_visible:`
await Editor.Message.request('scene', 'query-is-grid-visible');
                `,set_icon_gizmo_3d:`
await Editor.Message.request('scene', 'set-icon-gizmo-3d', false);
                `,query_is_icon_gizmo_3d:`
await Editor.Message.request('scene', 'query-is-icon-gizmo-3d');
                `,set_icon_gizmo_size:`
await Editor.Message.request('scene', 'set-icon-gizmo-size', 60);
                `,query_icon_gizmo_size:`
await Editor.Message.request('scene', 'query-icon-gizmo-size');
                `,query_gizmo_tool_name:`
await Editor.Message.request('scene', 'query-gizmo-tool-name');
                `,query_gizmo_pivot:`
await Editor.Message.request('scene', 'query-gizmo-pivot');
                `,query_gizmo_coordinate:`
await Editor.Message.request('scene', 'query-gizmo-coordinate');
                `,query_is2D:`
await Editor.Message.request('scene', 'query-is2D');
                `,focus_camera:`
await Editor.Message.request('scene', 'focus-camera', nodeUuids);
                `,align_with_view:`
await Editor.Message.request('scene', 'align-with-view');
                `,align_view_with_node:`
await Editor.Message.request('scene', 'align-with-view-node');
                `,scene_ready:`
Editor.Message.broadcast('scene:ready', assetUuid);
                `,scene_close:`
Editor.Message.broadcast('scene:close');
                `,light_probe_edit_mode_changed:`
Editor.Message.broadcast('scene:light-probe-edit-mode-changed', true);
                `,light_probe_bounding_box_edit_mode_changed:`
Editor.Message.broadcast('scene:light-probe-bounding-box-edit-mode-changed', true);
                `}},preferences:{scene_cache:{use:"Scene real-time cache",interval:"Scene real-time cache interval time"},scene:{debug_native:"Debug native engine for scene editor",native:"Use native engine for scene editor",on_native_change:"The native engine for the scene editor configuration has been modified and requires a reboot of the editor to take effect",tick:"Keep scene is mainloop running"}},console:{clearOnPlay:"Clear on Play"}},lod:{culled:"Culled"},crash:{dialog:{native_crash:{message:"Native engine is used to improve editor's performance. However, we detect multiple scene crashes. Do you want to use Typescript engine for editor instead?",switch_to_ts:"Switch to Typescript engine and restart",continue:"Continue to use native engine"}}},disable_in_native_tooltip:"This function is temporarily unavailable when native engine mode is enabled for the editor",ui_prop:{array_not_support_multiple:"Arrays do not support multiple selections"}};