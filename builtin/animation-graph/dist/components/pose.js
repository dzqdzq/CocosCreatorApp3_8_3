"use strict";var __importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.mounted=exports.methods=exports.watch=exports.computed=exports.data=exports.props=exports.components=exports.template=void 0;const assert_1=__importDefault(require("assert"));function data(){return{addingLine:!1,shadowLineStyle:{display:"none"},nodes:{},lines:{},mouseDownPoint:null}}function mounted(){const e=this;e.refresh(),setTimeout(()=>{e.refresh()})}function populateMenus(e,o){var n=[];for(const[p,{menu:d}]of e){var s=d.split("/").filter(e=>e);if(s){let t=n;var r=s.length;for(let e=0;e<r;++e){const u=s[e];var i,a=t.find(e=>e.label===u);a?e!==r-1?t=null!=(i=a.submenu)?i:a.submenu=[]:console.warn("Duplicated menu item: "+d):(i={label:u},t.push(i),e===r-1?i.click=()=>o(p):t=i.submenu=[])}}else console.warn("Empty menu path.")}return n}exports.template=`
<section
    :adding-line="addingLine"
>
    <pose-node 
        v-for="(dump,id) in nodes" 
        :key="$root.queryData.assetInfo.uuid + '-pose-node-' + id"
        :ref="'node-'+id"
        :dump="dump"
        :active="dump.id===$root.queryData.view.poseExprNodeId"
    ></pose-node>
    <svg>
        <path ref="shadowLine"
            v-show="addingLine"
            :style="shadowLineStyle"
        ></path>
        <path class="line"
            v-for="(line,id) in lines" 
            :key="$root.queryData.assetInfo.uuid + '-pose-link-' + id"
            :ref="'link-'+id"
            :style="'--color-pose-link:'+getLineColor(line)"
            :d="getLinePath(line)"
            @mousedown.right.stop="lineContextMenu(line)"
        ></path>
    </svg>
</section>
`,exports.components={"pose-node":require("./pose-node")},exports.props=["graph"],exports.data=data,exports.computed={droppable(){return Object.keys(this.graph.assetDragHandlersMap)}},exports.watch={graph(){const e=this;e.refresh(),setTimeout(()=>{e.refresh()})}},exports.methods={refresh(){var e=this;if(e.nodes={},e.graph&&e.graph.nodes)for(const t of e.graph.nodes)this.mergeNode(t);if(e.lines={},e.graph&&e.graph.links)for(const o of e.graph.links)this.mergeLine(o)},resize(){var e=this;for(const t in e.$refs)Array.isArray(e.$refs[t])&&e.$refs[t].forEach(e=>{e.resize&&e.resize()})},select(t){const o=this;o.$children.forEach(e=>{e.dump.id===t.id&&o.$root.select({type:o.$root.queryData.envType.PoseExprNode,index:t.id})})},mergeNode(e){var t=this,o=t.$parent.graph,n=e.id;t.$set(t.nodes,n,Object.assign({id:n,top:o.centerY,left:o.centerX},e))},mergeLine(t){var e=this,o=`${t.sourceID}_${t.sourceOutputID}_to_${t.destinationID}_`+t.destinationInputID,n=e.nodes[t.sourceID].outputs.find(e=>e.id===t.sourceOutputID);n&&(n.destinationInputs||e.$set(n,"destinationInputs",[]),n.destinationInputs.push([t.destinationID,t.destinationInputID]));n=e.nodes[t.destinationID].inputs.find(e=>e.id===t.destinationInputID);n&&(n.sourceOutputs||e.$set(n,"sourceOutputs",[]),n.sourceOutputs.push([t.sourceID,t.sourceOutputID])),e.$set(e.lines,o,t)},getNode(e){e=this.$refs["node-"+e];if(e)return e[0]},addShadowLine(a,p){const d=this;d.addingLine=!0;var[e,t,o,n]=p;const i=a?t:n,u=a?e:o;t=d.getNode(u),n=(a?t.dump.outputs:t.dump.inputs).find(e=>e.id===i);function l(t){if(d.addingLine){t.stopPropagation(),t.preventDefault();var{clientX:t,clientY:o}=t,n=d.mouseDownPoint.$el.getPointCenter(a,i),s=d.$parent.graph.scale,t=(t-n.clientX)/s,o=(o-n.clientY)/s,s=n.left,r=n.top,t=n.left+t,n=n.top+o;let e=d.drawLinePath(s,r,t,n);a||(e=d.drawLinePath(t,n,s,r)),d.$refs.shadowLine.setAttribute("d",e)}}d.shadowLineStyle["--color-pose-link"]=d.$root.getPoseLinkColor(n.type),d.mouseDownPoint={$el:t},d.$parent.$el.addEventListener("mousemove",l),d.$parent.$el.addEventListener("mouseup",function t(o){if(0===o.button){d.$parent.$el.removeEventListener("mousemove",l),d.$parent.$el.removeEventListener("mouseup",t),setTimeout(()=>{d.addingLine=!1}),d.mouseDownPoint=null,d.$refs.shadowLine.setAttribute("d","");var n,s,r,{clientX:o,clientY:i}=o;let e=d.$el.getRootNode().elementFromPoint(o,i);for(;e;){if(e.classList.contains("point"))return a&&!e.classList.contains("input")||(r=e.getAttribute("point-id"),(n=e.getAttribute("node-id"))===u)?void 0:(r=1==(s=a?3:1)?Number(r):r,p[s-1]=Number(n),p[s]=r,void d.$root.addPoseLink(p));e=e.parentElement}}})},getLineColor(e){var{sourceID:e,sourceOutputID:t}=e,e=this.getNode(e);return e?(e=e.dump.outputs[t],this.$root.getPoseLinkColor(e.type)):""},getLinePath(e){var t=this;const{sourceID:o,sourceOutputID:n,destinationID:s,destinationInputID:r}=e;var i,a,e=t.getNode(o),p=t.getNode(s);return!e||!p||(i=e.dump.outputs.find(e=>e.id===n),t.$refs.shadowLine.style["--color-pose-link"]=t.$root.getPoseLinkColor(i.type),i=e.getPointCenter(!0,n),e=p.getPointCenter(!1,r),p=i.left,i=i.top,isNaN(p))||isNaN(i)||(a=e.left,e=e.top,isNaN(a))||isNaN(e)?"":t.drawLinePath(p,i,a,e)},drawLinePath(e,t,o,n){let s=e;var r=t;let i=(e+o)/2;var a=n,p=o<e?40:Math.abs(e-o)/2,p=Math.min(120,Math.max(p,Math.abs((e-o)/2))),p=(s<e+p&&(s=e+p),i>o-p&&(i=o-p),`M${e},${t} C${s},${r} ${i},${a} ${o},`+n);return p},contextMenu(t){const o=this;var e=[{label:Editor.I18n.t("animation-graph.pose.paste"),enabled:"pose-nodes"===o.$root.queryData.pasteInfo.type||"state-machine"===o.$root.queryData.pasteInfo.type,click(){var e=o.getCenterXY({width:1,height:1,left:t.offsetX,top:t.offsetY});o.$root.pasteIntoPoseGraph(e)}},{type:"separator"}],n=populateMenus(o.graph.addNodeInfos,e=>{o.$root.addPoseNode({key:e,editorData:o.getCenterXY({width:80,height:30,left:t.offsetX,top:t.offsetY})})}),s=[{type:"separator"},{label:Editor.I18n.t("animation-graph.layer.stashGraph"),click(){o.$root.stashCurrentPoseGraph(o.getCenterXY({width:80,height:30,left:t.offsetX,top:t.offsetY}))}}],r=[{type:"separator"},{label:Editor.I18n.t("animation-graph.layer.bestViewport"),click(){o.$parent.bestViewport()}}],e=e.concat(n,s,r);Editor.Menu.popup({menu:e})},drop(e,t){const o=this;e=null==(e=e.currentTarget)?void 0:e.droppable;if(e){(0,assert_1.default)(1===e.length);var e=e[0],n=o.graph.assetDragHandlersMap[e];if(n){const r=e=>{Editor.Message.send("scene","execute-scene-script",{name:"animation-graph",method:"handleDropAssetIntoPoseGraph",args:[t.uuid,o.getCenterXY({width:50,height:30,left:t.offsetX,top:t.offsetY}),e]})};var s=Object.keys(n.handlers);0===s.length?console.warn(`Asset type ${e} did not configure any handlers`):1===s.length?r(s[0]):Editor.Menu.popup({menu:Object.entries(n.handlers).map(([e,t])=>({label:t.displayName,click:()=>{r(e)}}))})}else console.warn("There's no handlers configured for asset type "+e)}},getCenterXY(e){return this.$parent.getCenterXY(e,!1)},getPosition(e){return this.$parent.getPosition(e,!1)},lineContextMenu(e){const t=this;var{sourceID:e,sourceOutputID:o,destinationID:n,destinationInputID:s}=e;const r=[e,o,n,s];e=[{label:Editor.I18n.t("animation-graph.pose.link.remove"),click(){t.$root.removePoseLink(r)}}];Editor.Menu.popup({menu:e})},crumbPoseNode(e){this.addingLine||this.$root.crumbPoseNode(e)}},exports.mounted=mounted;