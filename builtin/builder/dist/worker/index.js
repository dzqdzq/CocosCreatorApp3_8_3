"use strict";var __createBinding=this&&this.__createBinding||(Object.create?function(e,r,t,s){void 0===s&&(s=t);var a=Object.getOwnPropertyDescriptor(r,t);a&&("get"in a?r.__esModule:!a.writable&&!a.configurable)||(a={enumerable:!0,get:function(){return r[t]}}),Object.defineProperty(e,s,a)}:function(e,r,t,s){e[s=void 0===s?t:s]=r[t]}),__setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(e,r){Object.defineProperty(e,"default",{enumerable:!0,value:r})}:function(e,r){e.default=r}),__importStar=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var r={};if(null!=e)for(var t in e)"default"!==t&&Object.prototype.hasOwnProperty.call(e,t)&&__createBinding(r,e,t);return __setModuleDefault(r,e),r};Object.defineProperty(exports,"__esModule",{value:!0}),exports.buildBundleOnly=exports.updateLogLevel=exports.changeDebugMode=exports.updatePlugin=exports.executeBuildStageTask=exports.getPreviewSettings=exports.breakTask=exports.build=exports.initBuildEnv=exports.Build=void 0,console.time("builder:startup");const fixPath=require("fix-path"),Utils=(fixPath(),window.Editor=require("editor"),__importStar(require("./builder/utils/index"))),task_config_1=require("./builder/task-config"),console_1=require("./console"),index_1=require("./builder/utils/index"),plugin_1=require("./plugin"),stage_task_manager_1=require("./builder/stage-task-manager"),sub_process_manager_1=require("./worker-pools/sub-process-manager"),asset_library_1=require("./builder/manager/asset-library"),msg_util_1=require("./msg-util"),index_2=require("./builder/index"),global_1=require("../share/global"),metric_1=require("./builder/metric"),bundle_1=require("./builder/asset-handler/bundle"),path_1=require("path"),script_1=require("./builder/asset-handler/script"),utils_1=require("../share/utils"),console_2=require("./builder/utils/console"),buildTaskMap={};async function initBuildEnv(e,r,t){Editor.Metrics.trackTimeStart("builder:worker-init"),console_1.newConsole.trackMemoryStart("builder:worker-init"),window.__manager={__taskId:"",taskManager:task_config_1.taskManager,currentCompileTask:null,currentBuildTask:null,buildAssetLibrary:asset_library_1.buildAssetLibrary,pluginManager:plugin_1.pluginManager,workerManager:sub_process_manager_1.workerManager},window.Build.isCommand=t,index_2.BuildTask.isCommandBuild=t,window.addEventListener("unhandledrejection",e=>{console.error(e.reason),console.debug(e),buildTaskMap[__manager.__taskId]&&(buildTaskMap[__manager.__taskId].error=e.reason)}),console_1.newConsole.command=t,await plugin_1.pluginManager.init(e,r),console_1.newConsole.trackMemoryEnd("builder:worker-init"),window.Build.init=!0,Editor.Metrics.trackTimeEnd("builder:worker-init",{output:!0})}async function build(o,i){if(window.Build.init){__manager.__taskId=o;let r=!0,t="";var n=Date.now();let s="build";i.buildStageGroup&&i.buildStageGroup.build&&i.buildStageGroup.build.length&&(s=s+" -> "+i.buildStageGroup.build.join(" -> "));var l=new index_1.MemoryTrack;let a=null,e=null;try{var u=(await Promise.resolve().then(()=>__importStar(require("./builder/index"))))["BuildTask"];console_1.newConsole.record(o,i.logDest),e=(0,console_2.onDetailMessagePolling)(()=>{var e=(0,console_2.handleDetailMessage)(console_1.newConsole.messages);e&&msg_util_1.Message.send("build-worker:update-detail-message",o,e)}),console.debug(`=================================== ${s} Task (${i.taskName||i.outputName}) Start ================================`),console.debug("Start build task, options:",i),console.debug("Build with Cocos Creator "+Editor.App.version),Editor.Metrics.trackTimeStart("builder:build-project-total"),l.start(),console_1.newConsole.trackMemoryStart("builder:build-project-total"),a=buildTaskMap[o]=new u(o,i),(__manager.currentBuildTask=a).on("update",(e,r)=>{msg_util_1.Message.send("build-worker:update-progress",o,r,"processing",e)}),a.on("store-crash-info",e=>{msg_util_1.Message.send("builder-worker:store-crash-info",o,e)}),await a.run(),l.stop(),console_1.newConsole.trackMemoryEnd("builder:build-project-total"),r=!a.error,a.error&&(t="object"==typeof a.error?a.error.stack||a.error.message:a.error)}catch(e){l.stop(),console_1.newConsole.trackMemoryEnd("builder:build-project-total"),a&&(e&&a.error!==e&&(a.error=e),await a.runErrorHook()),r=!1,sub_process_manager_1.workerManager.killRunningChilds(),a&&a.breakResolve||(console.error(e),s=a&&a.stage||"build",t=e.message||e)}return a&&(a.error&&(t="object"==typeof a.error?a.error.stack||a.error.message:a.error,a.result.staticsInfo.err=t),"normal"===a.options.buildMode)&&(0,metric_1.sendBuildMetric)(a.result.staticsInfo),__manager.currentBuildTask=null,delete buildTaskMap[o],console.debug(`================================ ${s} Task (${i.taskName||i.outputName}) Finished in (${(0,utils_1.formatMSTime)(Date.now()-n)})ms ================================`),console_1.newConsole.stopRecord(),e&&e(),asset_library_1.buildAssetLibrary.reset(),Utils.getMemorySize(),r?msg_util_1.Message.send("build-worker:update-progress",o,1,"success",(0,utils_1.getCurrentTime)()+` ${s} success in ${(0,utils_1.formatMSTime)(Date.now()-n)}!`):(msg_util_1.Message.send("build-worker:update-progress",o,1,"failure",(0,utils_1.getCurrentTime)()+` ${s} task failed! `+t),(0,metric_1.sendSingleMetric)({sendToNewCocosAnalyticsOnly:!0,category:"buildSystem",value:{B100044:t}})),r}}async function breakTask(e){__manager.currentBuildTask?await __manager.currentBuildTask.break():__manager.currentCompileTask&&await __manager.currentCompileTask.break()}async function getPreviewSettings(e,r){r.preview=!0;var t=(await Promise.resolve().then(()=>__importStar(require("./builder/index"))))["BuildTask"],t=new t(e,r),e=(t.on("update",(e,r)=>{msg_util_1.Message.send("build-worker:update-progress","preview",e,"processing",r)}),console.time("Get settings.js in preview"),await t.getPreviewSettings()),s={};for(const o of t.cache.scriptUuids){var a=asset_library_1.buildAssetLibrary.getAsset(o);s[(0,index_1.removeDbHeader)(a.url).replace(/.ts$/,".js")]=a.library+".js"}return console.timeEnd("Get settings.js in preview"),{settings:e,script2library:s,bundleConfigs:t.bundleManager.bundles.map(e=>e.config)}}async function executeBuildStageTask(r,a){var e;if(__manager.currentCompileTask&&__manager.currentCompileTask.root===a.root||__manager.currentBuildTask&&__manager.currentBuildTask.result.paths.dir===a.root)return console.error("The current directory is busy, please try again later"),msg_util_1.Message.send("build-worker:update-build-stage-progress",a.taskId,1,"failed","The current directory is busy, please try again later"),!1;let o=!0,t=null;function i(e,r,t){msg_util_1.Message.send("build-worker:update-build-stage-progress",a.taskId,e,r,t)}try{var n=(null==(e=a.buildTaskOptions)?void 0:e.logDest)||(0,path_1.join)(Editor.Project.tmpDir,a.platform+`-${r}.log`),l=(console_1.newConsole.record(a.taskId,n),t=(0,console_2.onDetailMessagePolling)(()=>{var e=(0,console_2.handleDetailMessage)(console_1.newConsole.messages);e&&msg_util_1.Message.send("build-worker:update-detail-message",a.taskId,e)}),a.nextStages?[r,...a.nextStages]:[r]);let s=1/l.length;var u=l.map(e=>plugin_1.pluginManager.getBuildStageWithHookTasks(a.platform,e));for(let e=0;e<u.length;e++){var d=u[e];if(s*=e+1,!d)return console.error("No Build stage "+r),i(1,"failure",(0,utils_1.getCurrentTime)()+"No Build stage "+r),!1;if(d.message){var{name:g,target:c,params:_}=d.message;await Editor.Message.request(c,g,..._||[])}else{console_1.newConsole.trackMemoryStart("builder:build-stage-total "+r);var p=new stage_task_manager_1.BuildStageTask(Object.assign({hooksInfo:plugin_1.pluginManager.getHooksInfo(a.platform),root:a.root,taskId:a.taskId,buildTaskOptions:a.buildTaskOptions},d));__manager.currentCompileTask=p;let t=d.name;if(p.on("update",(e,r)=>{i(r*s,"processing",e),console.log(`[task:${t}]: ${e}, ${100*r}%`)}),await p.run(),console_1.newConsole.trackMemoryEnd("builder:build-stage-total "+r),p.error){console.error(`${t} package ${a.root} failed!`),i(+s,"failure",(0,utils_1.getCurrentTime)()+` ${t} package ${a.root} failed!`),console.log(`[task:${t}]: failed!`),o=!1;break}1===s&&(t=l.join(" -> ")),i(+s,"success",(0,utils_1.getCurrentTime)()+` ${t} package ${a.root} success!`),console.log(`[task:${t}]: success!`)}}}catch(e){console_1.newConsole.trackMemoryEnd("builder:build-stage-total "+r),__manager.currentCompileTask&&__manager.currentCompileTask.breakResolve||(console.error(`Run build stage[${r}] in package ${a.root} failed!`),i(1,"failure",(0,utils_1.getCurrentTime)()+` Run build stage[${r}] in package ${a.root} failed!`)),console.error(e),o=!1}return console_1.newConsole.stopRecord(),t&&t(),__manager.currentCompileTask=null,o}async function updatePlugin(e,r,t){await plugin_1.pluginManager[e](r),t&&(plugin_1.pluginManager.platformConfigs=t)}async function changeDebugMode(e){return global_1.BuildGlobalInfo.debugMode=e}async function buildBundleOnly(e){if(!window.Build.init)return!1;let r=!0;const s=e[0].id||"buildBundle",t=(0,console_2.onDetailMessagePolling)(()=>{var e=(0,console_2.handleDetailMessage)(console_1.newConsole.messages);e&&msg_util_1.Message.send("build-worker:update-detail-message",s,e)});function a(){delete buildTaskMap[s],console_1.newConsole.stopRecord(),t&&t(),__manager.currentBuildTask=null,Utils.getMemorySize()}const o=1/e.length,i=Date.now();for(let t=0;t<e.length;t++){var n=e[t],l=(__manager.__taskId=s,n.taskName||"bundle Build");const i=Date.now();var u=new index_1.MemoryTrack;try{console_1.newConsole.record(s,n.logDest),console.debug(`=================================== ${l} Task (${n.platform}) Start ================================`),console.debug("Start build task, options:",n),console.debug("Build with Cocos Creator "+Editor.App.version),u.start(),console_1.newConsole.trackMemoryStart("builder:build-bundle-total");var d,g=new bundle_1.BundleManager(n);__manager.currentBuildTask=g,(buildTaskMap[s]=g).on("update",(e,r)=>{msg_util_1.Message.send("build-worker:update-progress",s,(r+t)*o,"processing",e)}),await g.run(),console_1.newConsole.trackMemoryEnd("builder:build-bundle-total"),u.stop(),console.log(`${l} (${n.platform}) in {link(${g.destDir})} success!`),r=!g.error,g.error?(d="object"==typeof g.error?g.error.stack||g.error.message:g.error,msg_util_1.Message.send("build-worker:update-progress",s,1,"failure",(0,utils_1.getCurrentTime)()+` ${l} failed! `+d),r=!1):console.debug((0,utils_1.getCurrentTime)()+`Build Bundle success in ${(0,utils_1.formatMSTime)(Date.now()-i)}!`)}catch(e){u.stop(),buildTaskMap[s]&&buildTaskMap[s].error!==e&&await buildTaskMap[s].onError(e,!1),r=!1,buildTaskMap[s]&&buildTaskMap[s].breakResolve||(sub_process_manager_1.workerManager.killRunningChilds(),console.error(e),msg_util_1.Message.send("build-worker:update-progress",s,1,"failure",(0,utils_1.getCurrentTime)()+` ${l} task failed! `+(e.message||e)))}if(console.debug(`================================ ${l} Task (${n.taskName}) Finished in (${(0,utils_1.formatMSTime)(Date.now()-i)})ms ================================`),!r)return a(),r}return a(),msg_util_1.Message.send("build-worker:update-progress",s,1,"success",(0,utils_1.getCurrentTime)()+`Build Bundle success in ${(0,utils_1.formatMSTime)(Date.now()-i)}!`),r}exports.Build=Object.assign({Utils:Utils,ScriptBuilder:script_1.ScriptBuilder},global_1.BuildGlobalInfo),window.Build=exports.Build,exports.initBuildEnv=initBuildEnv,exports.build=build,exports.breakTask=breakTask,exports.getPreviewSettings=getPreviewSettings,exports.executeBuildStageTask=executeBuildStageTask,exports.updatePlugin=updatePlugin,exports.changeDebugMode=changeDebugMode,exports.updateLogLevel=console_1.NewConsole.updateLogLevel,exports.buildBundleOnly=buildBundleOnly;