"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.Bundle=void 0;const asset_db_1=require("@editor/asset-db"),fs_extra_1=require("fs-extra"),path_1=require("path"),bundle_utils_1=require("../../../../share/bundle-utils"),asset_library_1=require("../../manager/asset-library"),utils_1=require("../../utils"),bundle_1=require("../../utils/bundle"),zip_1=require("../../utils/zip"),cconb_1=require("../../utils/cconb"),asset_db_2=require("../../../../contributions/asset-db");class Bundle{get scenes(){return Array.from(Object.values(this._scenes)).sort()}get assets(){return Array.from(this._assets).sort()}get assetsWithoutRedirect(){return this.assets.filter(s=>!this.getRedirect(s))}get scripts(){return Array.from(this._scripts).sort()}get rootAssets(){return Array.from(this._rootAssets)}get isSubpackage(){return this.compressionType===bundle_utils_1.BundleCompressionTypes.SUBPACKAGE}constructor(s){this.root="",this.dest="",this.importBase=Build.IMPORT_HEADER,this.nativeBase=Build.NATIVE_HEADER,this.scriptDest="",this.name="",this.priority=0,this.compressionType=bundle_utils_1.BundleCompressionTypes.MERGE_DEP,this.assetVer={import:{},native:{}},this.zipVer="",this.version="",this.isRemote=!1,this.isZip=!1,this.redirect={},this.deps=new Set,this.groups=[],this.hasPreloadScript=!0,this.extensionMap={},this.packs={},this.paths={},this.md5Cache=!1,this.debug=!1,this.config={importBase:Build.IMPORT_HEADER,nativeBase:Build.NATIVE_HEADER,name:"",deps:[],uuids:[],paths:{},scenes:{},packs:{},versions:{import:[],native:[]},redirect:[],debug:!1,extensionMap:{},hasPreloadScript:!0,dependencyRelationships:{}},this.configOutPutName="",this.atlasRes={assetsToImage:{},imageToAtlas:{},atlasToImages:{}},this.compressRes={},this._rootAssets=new Set,this._scenes={},this._scripts=new Set,this._assets=new Set,this.compressTask={},this._jsonAsset=new Set,this._cconAsset=new Set,this._pacAssets=new Set,this.root=s.root,this.name=s.name,this.dest=s.dest,this.md5Cache=s.md5Cache,this.debug=s.debug,this.priority=s.priority,this.compressionType=s.compressionType,this.isRemote=s.isRemote,this.scriptDest=s.scriptDest,this.bundleFilterConfig=(0,asset_db_2.initBundleConfig)(s.bundleFilterConfig),this.output=null==(s=s.output)||s}addRootAsset(s){s&&(0,utils_1.recursively)(s,s=>{(s.meta.files.includes(".json")||s.meta.files.includes(".cconb"))&&"cc.Script"!==asset_library_1.buildAssetLibrary.getAssetProperty(s,"type")&&((0,bundle_1.checkAssetWithFilterConfig)(s,this.bundleFilterConfig)?(this._rootAssets.add(s.uuid),this.addAsset(s)):console.debug(`asset {asset(${s.url})} can not match the bundler filter config(${this.name})`))})}addAsset(s){if(s&&!this._assets.has(s.uuid))switch(s.meta.files.includes(".json")&&this._jsonAsset.add(s.uuid),(0,cconb_1.hasCCONFormatAssetInLibrary)(s)&&this._cconAsset.add(s.uuid),asset_library_1.buildAssetLibrary.getAssetProperty(s,"type")){case"cc.Script":return s.url.toLowerCase().endsWith(".d.ts")?void 0:void(s.meta.userData.isPlugin||this._scripts.add(s.uuid));case"cc.SceneAsset":return this._scenes[s.uuid]={uuid:s.uuid,url:s.url},void this._assets.add(s.uuid);default:this._assets.add(s.uuid)}}removeAsset(s){s&&(this._assets.delete(s),this._rootAssets.delete(s),delete this._scenes[s],this._jsonAsset.delete(s),this._scripts.delete(s),delete this.redirect[s],this.removeFromGroups(s),delete this.compressTask[s],delete this.compressRes[s])}addRedirect(s,t){s&&(this.redirect[s]=t,this.deps.add(t),this.addAssetWithUuid(s))}addScriptWithUuid(s){this._scripts.add(s)}addAssetWithUuid(s){this._assets.add(s)}getRedirect(s){return this.redirect[s]}addGroup(s,t){this.groups.push({type:s,uuids:t,name:""})}addToGroup(t,s){var e=this.groups.find(s=>s.type===t);e?e.uuids.push(s):this.addGroup(t,[s])}removeFromGroups(t){this.groups.forEach(s=>{cc.js.array.fastRemove(s.uuids,t)}),this.groups=this.groups.filter(s=>1<s.uuids.length)}initConfig(){this.config.importBase=this.importBase,this.config.nativeBase=this.nativeBase,this.config.name=this.name,this.config.debug=this.debug,this.config.hasPreloadScript=this.hasPreloadScript,this.config.deps=Array.from(this.deps).sort(),this.config.uuids=this.assets.sort();var s=this.config.redirect=[];for(const t of Object.keys(this.redirect).sort())s.push(t,String(this.config.deps.indexOf(this.redirect[t])));this.scenes.forEach(s=>{this.config.scenes[s.url]=s.uuid})}async initAssetPaths(){const o={};this.rootAssets.forEach(s=>{var t,e,s=asset_library_1.buildAssetLibrary.getAssetInfo(s),i=[s.path.replace(this.root+"/","").replace((0,path_1.extname)(s.url),""),s.type];{var r,a,n;this.name!==bundle_utils_1.BuiltinBundleName.INTERNAL&&(r=s.uuid,a=i[0],n=i[1],o[a]||(o[a]={}),o[a][n]||(o[a][n]=r),(n=o[a][n])!==r)&&(t=asset_library_1.buildAssetLibrary.getAsset(n),e=asset_library_1.buildAssetLibrary.getAsset(r),console.warn(Editor.I18n.t("builder.warn.same_load_url",{urlA:`{asset(${t.url})} uuid: `+n,urlB:`{asset(${e.url})} uuid: `+r,url:a})))}s instanceof asset_db_1.Asset||i.push(1),this.config.paths[s.uuid]=i})}async outputConfigs(){if(this.output){this.isZip&&(this.config.isZip=!0,this.config.zipVersion=this.zipVer),console.debug("output config of bundle "+this.name);let s=(0,path_1.join)(this.dest,(this.configOutPutName||(0,path_1.parse)(Build.CONFIG_NAME).name)+".json");this.version&&(s=(0,path_1.join)(this.dest,`${this.configOutPutName||(0,path_1.parse)(Build.CONFIG_NAME).name}.${this.version}.json`));var t=JSON.stringify(this.config,null,this.config.debug?4:0);(0,fs_extra_1.outputFileSync)(s,t,"utf8"),console.debug(`output config of bundle ${this.name} success`)}}async build(){await this.initConfig(),await this.genPackedAssetsConfig(),this.md5Cache?(await this.createAssetsMd5(),await this.compress(),await this.zipBundle(),await this.md5Bundle()):(await this.compress(),await this.zipBundle()),await this.outputConfigs()}async md5Bundle(){var s,t;this.md5Cache&&(this.isZip?(s=(0,path_1.join)(this.dest,Build.BUNDLE_ZIP_NAME),(0,fs_extra_1.existsSync)(s)&&(s=await Build.Utils.appendMd5ToPaths([s]))&&(this.zipVer=s.hash)):(s=(0,utils_1.calcMd5)([JSON.stringify(this.config),(0,fs_extra_1.readFileSync)(this.scriptDest)]),this.isSubpackage||(t=(0,path_1.join)((0,path_1.dirname)(this.scriptDest),(0,path_1.parse)(this.scriptDest).name+"."+s+(0,path_1.extname)(this.scriptDest)),(0,fs_extra_1.renameSync)(this.scriptDest,t),this.scriptDest=t),this.version=s))}async createAssetsMd5(){if(this.md5Cache&&!this.isZip){console.debug(`add md5 to bundle ${this.name}...`);var s=require("globby"),t={native:{},import:{}},e=[],i=s.sync((0,path_1.join)(this.dest,this.importBase,"**"),{nodir:!0});for(let s=0;s<i.length;s++){var r=i[s],a=(0,utils_1.getUuidFromPath)(r);t.import[a]||(t.import[a]=[]),t.import[a].push(r)}var n=s.sync((0,path_1.join)(this.dest,this.nativeBase,"**"),{nodir:!0});for(let s=0;s<n.length;s++){var o=n[s],h=(0,utils_1.getUuidFromPath)(o);t.native[h]||(t.native[h]=[]),(0,path_1.basename)((0,path_1.dirname)(o))===h?e.push(o):t.native[h].push(o)}this.assetVer.import={},this.assetVer.native={};for(const f in t.import){var u=await Build.Utils.appendMd5ToPaths(t.import[f]);u&&(this.assetVer.import[f]=u.hash)}for(const _ in t.native){var d=await(0,utils_1.appendMd5ToPaths)(t.native[_]);d&&(this.assetVer.native[_]=d.hash)}for(let s=0;s<e.length;s++){var c=e[s];try{var p=(0,utils_1.calcMd5)((0,fs_extra_1.readFileSync)(c)),l=(0,utils_1.getUuidFromPath)(c);(0,fs_extra_1.renameSync)((0,path_1.dirname)(c),(0,path_1.dirname)(c)+"."+p),this.assetVer.native[l]=p}catch(s){console.error(s)}}for(const g in this.assetVer.import)this.config.uuids.includes(g)||(console.error(`Can not find import asset(${g}) in bundle ${this.root}.`),this.config.uuids.push(g)),this.config.versions.import.push(g,this.assetVer.import[g]);for(const m in this.assetVer.native)this.config.uuids.includes(m)||(console.error(`Can not find native asset(${m}) in bundle ${this.root}.`),this.config.uuids.push(m)),this.config.versions.native.push(m,this.assetVer.native[m]);console.debug(`add md5 to bundle ${this.name} success`)}}async zipBundle(){var s,t;this.compressionType===bundle_utils_1.BundleCompressionTypes.ZIP&&this.output&&(console.debug(`zip bundle ${this.name}...`),s=this.dest,0<(t=[(0,path_1.join)(s,this.nativeBase),(0,path_1.join)(s,this.importBase)].filter(s=>(0,fs_extra_1.existsSync)(s))).length&&(this.isZip=!0,await(0,zip_1.compressDirs)(t,s,(0,path_1.join)(s,Build.BUNDLE_ZIP_NAME))),console.debug(`zip bundle ${this.name} success...`))}compress(){if(!this.debug){console.debug(`compress config of bundle ${this.name}...`);var s=this.config,t=function(s){const e={},i={};function t(s){var t=(e[s]||0)+1;e[s]=t,s in i||(i[s]=s)}for(const h in s.paths)t(h);var r=s.scenes;for(const u in r)t(r[u]);for(const d in s.extensionMap)s.extensionMap[d].forEach(t);var a={};for(const c of Object.keys(s.packs).sort())s.packs[c].forEach(t),a[c]=s.packs[c];s.packs=a;var n=s.versions;for(const p of Object.values(n))for(let s=0;s<p.length;s+=2)t(p[s]);var o=s.redirect;for(let s=0;s<o.length;s+=2)t(o[s]);return s.uuids.sort((s,t)=>e[t]-e[s]),s.uuids.forEach((s,t)=>i[s]=t),s.uuids=s.uuids.map(s=>Editor.Utils.UUID.compressUUID(s,!0)),i}(s),e=s.paths,i=s.paths={},r=s.types=[];for(const b in e){var a=e[b],n=t[b];let s=r.indexOf(a[1]);-1===s&&(s=r.length,r.push(a[1])),a[1]=s,i[n]=a}var o=s.scenes;for(const v in o){var h=t[o[v]];o[v]=Number(h)}for(const y in s.extensionMap){var u=s.extensionMap[y];for(let s=0;s<u.length;++s){var d=t[u[s]];u[s]=d}u.sort()}var c=s.packs;for(const A in c){var p=c[A];for(let s=0;s<p.length;++s){var l=t[p[s]];p[s]=l}}var f=s.redirect;for(let s=0;s<f.length;s+=2){var _=t[f[s]];f[s]=Number(_)}if(!this.debug){var g=this.config.versions;for(const B of Object.values(g))for(let s=0;s<B.length;s+=2){var m=t[B[s]];B[s]=Number(m)}}console.debug(`compress config of bundle ${this.name} success`)}}async genPackedAssetsConfig(){this.config.uuids=this.assets.sort();var s=this.config.redirect=[];for(const e of Object.keys(this.redirect).sort())s.push(e,String(this.config.deps.indexOf(this.redirect[e])));Object.keys(this.config.extensionMap).forEach(s=>{this.config.extensionMap[s].sort()});const t=[];for(const i of this.groups)i.name&&0!==i.uuids.length&&(this.config.packs[i.name]=JSON.parse(JSON.stringify(i.uuids)),i.uuids.forEach(s=>{t.push(s)}));await this.initAssetPaths()}containsAsset(s,t=!1){return this._scripts.has(s)||this._assets.has(s)||!!this._scenes[s]||!!t&&!(!this.atlasRes.atlasToImages[s]||!this.atlasRes.atlasToImages[s].length)}}exports.Bundle=Bundle;