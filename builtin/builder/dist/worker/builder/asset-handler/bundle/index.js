"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.BundleManager=void 0;const fs_extra_1=require("fs-extra"),path_1=require("path"),texture_compress_1=require("../texture-compress"),bundle_1=require("./bundle"),texture_compress_2=require("./texture-compress"),index_1=require("../texture-packer/index"),pac_info_1=require("../texture-packer/pac-info"),pac_1=require("./pac"),cconb_1=require("../../utils/cconb"),script_1=require("../script"),bundle_utils_1=require("../../../../share/bundle-utils"),asset_library_1=require("../../manager/asset-library"),asset_1=require("../../manager/asset"),utils_1=require("../../utils"),global_1=require("../../../../share/global"),json_group_1=require("./json-group"),utils_2=require("../../../../share/utils"),common_options_validator_1=require("../../../../share/common-options-validator"),plugin_1=require("../../../plugin"),task_base_1=require("../../manager/task-base"),load_script_1=require("../script/load-script"),utils_3=require("../../../../share/utils"),{MAIN,START_SCENE,INTERNAL,RESOURCES}=bundle_utils_1.BuiltinBundleName;class BundleManager extends task_base_1.BuildTaskBase{get bundleGroupInPriority(){if(this._bundleGroupInPriority)return this._bundleGroupInPriority;let s=new Array(21);return this.bundles.forEach(e=>{s[e.priority-1]||(s[e.priority-1]=[]),s[e.priority-1].push(e)}),s=s.filter(e=>e).reverse(),this._bundleGroupInPriority=s}constructor(e,s){super("Bundle Task"),this.bundleMap={},this.bundles=[],this._pacAssets=[],this.packResults=[],this.hookMap={onBeforeBundleInit:"onBeforeBundleInit",onAfterBundleInit:"onAfterBundleInit",onBeforeBundleDataTask:"onBeforeBundleDataTask",onAfterBundleDataTask:"onAfterBundleDataTask",onBeforeBundleBuildTask:"onBeforeBundleBuildTask",onAfterBundleBuildTask:"onAfterBundleBuildTask"},this.pipeline=[this.initOptions,this.hookMap.onBeforeBundleInit,this.initBundle,this.hookMap.onAfterBundleInit,this.hookMap.onBeforeBundleDataTask,this.initAsset,this.bundleDataTask,this.hookMap.onAfterBundleDataTask,this.hookMap.onBeforeBundleBuildTask,this.clearBundleDest,this.buildScript,this.buildAsset,this.hookMap.onAfterBundleBuildTask,this.outputBundle],(this.options=e).skipCompressTexture||(this.updateProcess("Skip compress image"),this.imageCompressManager=new texture_compress_1.TextureCompress(e.platform),this.imageCompressManager.on("update-progress",e=>{this.updateProcess(e)})),this._task=s,this.destDir=e.dest&&Editor.UI.__protected__.File.resolveToRaw(e.dest)||(0,path_1.join)(Editor.Project.path,"build","assetBundle"),this.scriptBuilder=new script_1.ScriptBuilder,this.cache=s?s.cache:new asset_1.BuilderAssetCache,this.hooksInfo=s?s.hooksInfo:plugin_1.pluginManager.getHooksInfo(e.platform)}async loadScript(e){this.options.preview||await(0,load_script_1.loadScript)(e)}async initStaticBundleConfig(){const e=await Editor.Profile.getProject("builder","bundleConfig.custom")||{},i=await Editor.Message.request("builder","query-bundle-config"),a=(e.default||(e.default=bundle_utils_1.DefaultBundleConfig),{});Object.keys(e).forEach(s=>{const t=e[s].configs;a[s]={},Object.keys(t).forEach(e=>{i[e]&&(e=(0,bundle_utils_1.transformPlatformSettings)(t[e],i[e].platformConfigs),Object.assign(a[s],e))})}),BundleManager.BundleConfigs=a}getUserConfig(e="default"){e=BundleManager.BundleConfigs[e];return e?e[this.options.platform]:null}async initOptions(){var e;await(0,common_options_validator_1.checkProjectSetting)(this.options),this.options.buildScriptParam={experimentalEraseModules:this.options.experimentalEraseModules,outputName:"project",flags:Object.assign({DEBUG:!!this.options.debug},this.options.flags),polyfills:this.options.polyfills,hotModuleReload:!1,platform:"HTML5",commonDir:"",bundleCommonChunk:null!=(e=this.options.bundleCommonChunk)&&e},this.options.assetSerializeOptions={"cc.EffectAsset":{glsl1:this.options.includeModules.includes("gfx-webgl"),glsl3:this.options.includeModules.includes("gfx-webgl2"),glsl4:!1},exportCCON:!1}}clearBundleDest(){this.bundles.forEach(e=>{e.output&&(0,fs_extra_1.emptyDirSync)(e.dest)})}async initAsset(){await this.initBundleRootAssets(),await this.loadScript(this.cache.scriptUuids),await this.initBundleShareAssets(),await this.initBundleConfig()}async initBundleConfig(){for(const e of this.bundles)e.initConfig(),this.options.preview&&await e.initAssetPaths()}async buildAsset(){await this.packImage(),await this.compressImage(),await this.outputAssets()}async run(){return this.options.bundleCommonChunk=!0,await this.runAllTask(),!0}async outputBundle(){this.updateProcess("Output asset in bundles start"),await Promise.all(this.bundles.map(async e=>{e.output&&await e.build()})),this.updateProcess("Output asset in bundles success")}addBundle(e){var s;this.bundleMap[e.name]&&(s=e.name+Date.now(),console.error(Editor.I18n.t("builder.asset_bundle.duplicate_name_messaged_auto_rename",{name:e.name,newName:s,url:this.bundleMap[e.name].root,newUrl:e.root})),e.name=s),this.bundleMap[e.name]=new bundle_1.Bundle(e)}getDefaultBundleConfig(e){var s=(0,path_1.join)(this.destDir,e),t=BundleManager.internalBundlePriority[e];return{name:e,dest:s,root:"",scriptDest:(0,path_1.join)(s,global_1.BuildGlobalInfo.SCRIPT_NAME),priority:t||1,compressionType:bundle_utils_1.BundleCompressionTypes.MERGE_DEP,isRemote:!1,md5Cache:this.options.md5Cache,debug:this.options.debug}}async initBundle(){await this.initStaticBundleConfig();var e=this.options;const t=[MAIN,START_SCENE,INTERNAL],i={};this.updateProcess("Init all bundles start...");var s=await asset_library_1.buildAssetLibrary.queryAssetsByOptions({isBundle:!0});e.bundleConfigs=e.bundleConfigs||[],e.bundleConfigs.length&&e.bundleConfigs.forEach(e=>{var s;t.includes(e.name)?i[e.name]=e:(s=this.patchProjectBundleConfig(e))?this.addBundle(s):console.warn("Invalid bundle config: ",e)});const a=!e.bundleConfigs.length&&!!this._task;if(e.buildBundleOnly||s.forEach(e=>{e=this.patchProjectBundleConfig({root:e.url,name:""});e&&!this.bundleMap[e.name]&&(e.output=a,this.addBundle(e))}),e.buildBundleOnly&&!Object.keys(i).length||this.initInternalBundleConfigs(i),this.bundles=Object.values(this.bundleMap).sort((e,s)=>s.priority-e.priority||(0,utils_3.compareUUID)(e.name,s.name)),!this.bundles.length)throw new Error("Invalid bundle config, please check your bundle config");this.updateProcess(`Num of bundles: ${this.bundles.length}...`)}initInternalBundleConfigs(i){var e=[MAIN,START_SCENE,INTERNAL];const a=!this.options.buildBundleOnly;e.forEach(e=>{var s,t;e===START_SCENE&&!this.options.startSceneAssetBundle&&!i[e]||this.options.buildBundleOnly&&!i[e]||(t=this.getDefaultBundleConfig(e),s=i[e]||{name:e},t=(0,utils_2.defaultsDeep)(Object.assign({},s),t),(i[e]=t).output=null!=(e=s.output)?e:a,s.name===MAIN?(e=this.options.mainBundleIsRemote,s.output&&e&&!this.options.server&&!this.options.preview&&console.warn(Editor.I18n.t("builder.warn.assetBundleIsRemoteInvalid",{directoryName:"main"})),t.isRemote=s.isRemote||e,t.compressionType=s.compressionType||this.options.mainBundleCompressionType):(t.isRemote=!!(null!=(e=s.isRemote)?e:!this.options.startSceneAssetBundle&&i[MAIN].isRemote),s.compressionType||(t.compressionType=this.options.startSceneAssetBundle||i[MAIN].compressionType===bundle_utils_1.BundleCompressionTypes.MERGE_DEP?bundle_utils_1.BundleCompressionTypes.MERGE_ALL_JSON:i[MAIN].compressionType)),s.dest||"subpackage"!==t.compressionType?s.dest||(t.dest=t.isRemote?(0,path_1.join)((0,path_1.dirname)(this.destDir),global_1.BuildGlobalInfo.REMOTE_HEADER,t.name):(0,path_1.join)(this.destDir,t.name),t.scriptDest=(0,path_1.join)(t.dest,global_1.BuildGlobalInfo.SCRIPT_NAME)):(t.dest=(0,path_1.join)((0,path_1.dirname)(this.destDir),global_1.BuildGlobalInfo.SUBPACKAGES_HEADER,t.name),t.scriptDest=(0,path_1.join)(t.dest,global_1.BuildGlobalInfo.SCRIPT_NAME)),this.options.moveRemoteBundleScript&&t.isRemote&&!s.scriptDest&&(t.scriptDest=this._task?(0,path_1.join)(this._task.result.paths.bundleScripts,t.name,Build.SCRIPT_NAME):(0,path_1.join)(t.dest,global_1.BuildGlobalInfo.SCRIPT_NAME)),this.addBundle(t))})}patchProjectBundleConfig(e){var s,t,i,a,n,r;return e.root?(a=asset_library_1.buildAssetLibrary.url2uuid(e.root))&&(a=asset_library_1.buildAssetLibrary.getAsset(a))?({bundleFilterConfig:s,priority:n,bundleConfigID:t,bundleName:i}=a.meta.userData,i=e.name||i||(0,bundle_utils_1.getBundleDefaultName)(a),a=this.getUserConfig(t),r=this.getDefaultBundleConfig(i),n=(0,utils_2.defaultsDeep)({compressionType:a&&a.compressionType,isRemote:a&&a.isRemote,priority:n,bundleFilterConfig:s,name:i},e),r=(0,utils_2.defaultsDeep)(n,r),a||console.warn(`Invalid Bundle config ID ${t} in bundle ${e.root}, the bundle config will use the default config `+JSON.stringify(r)),!r.isRemote||this.options.server||this.options.preview||console.warn(Editor.I18n.t("builder.warn.assetBundleIsRemoteInvalid",{directoryName:i})),e.dest||"subpackage"!==r.compressionType?!e.dest&&r.isRemote&&(r.dest=(0,path_1.join)((0,path_1.dirname)(this.destDir),global_1.BuildGlobalInfo.REMOTE_HEADER,r.name),r.scriptDest=(0,path_1.join)(r.dest,global_1.BuildGlobalInfo.SCRIPT_NAME)):(r.dest=(0,path_1.join)((0,path_1.dirname)(this.destDir),global_1.BuildGlobalInfo.SUBPACKAGES_HEADER,r.name),r.scriptDest=(0,path_1.join)(r.dest,global_1.BuildGlobalInfo.SCRIPT_NAME)),this.options.moveRemoteBundleScript&&r.isRemote&&!e.scriptDest&&(r.scriptDest=this._task?(0,path_1.join)(this._task.result.paths.bundleScripts,r.name,Build.SCRIPT_NAME):(0,path_1.join)(r.dest,global_1.BuildGlobalInfo.SCRIPT_NAME)),r):(console.debug("Invalid Bundle config with bundle "+e.root),null):(console.debug("Invalid Bundle config with bundle root:"+e.root),null)}async initBundleRootAssets(){this.updateProcess("Init bundle root assets start..."),this.bundleMap[INTERNAL]&&(e=await queryPreloadAssetList(this.options.includeModules),console.debug("Query preload assets from cc.config.json: "+e.toString()),e.forEach(e=>{this.bundleMap[INTERNAL].addRootAsset(asset_library_1.buildAssetLibrary.getAsset(e))}));var e,s=this.bundleMap[START_SCENE]||this.bundleMap[MAIN],t=asset_library_1.buildAssetLibrary.assets;for(let e=0;e<t.length;e++){const a=t[e];if(!a.isDirectory()){var i=asset_library_1.buildAssetLibrary.getAssetProperty(a,"type");this.cache.addAsset(a,i);let e=this.bundles.find(e=>a.url.startsWith(e.root+"/"));"cc.Script"===i?(e=e||s)&&e.addAsset(a):"cc.SceneAsset"!==i||this.options.scenes&&!this.options.scenes.find(e=>e.uuid===a.uuid)?(a.source.endsWith(".pac")&&this._pacAssets.push(a.uuid),e&&"cc.SceneAsset"!==i&&e.addRootAsset(a)):s&&this.options.startScene===a.uuid?s.addRootAsset(a):e?e.addRootAsset(a):this.bundleMap[MAIN]&&this.bundleMap[MAIN].addRootAsset(a)}}s&&(this.options.renderPipeline&&s.addRootAsset(asset_library_1.buildAssetLibrary.getAsset(this.options.renderPipeline)),this.options.physicsConfig.defaultMaterial)&&(e=asset_library_1.buildAssetLibrary.getAsset(this.options.physicsConfig.defaultMaterial),s.addRootAsset(e)),console.debug("  Number of all scenes: "+this.cache.scenes.length),console.debug("  Number of all scripts: "+this.cache.scriptUuids.length),console.debug("  Number of other assets: "+this.cache.assetUuids.length),this.updateProcess("Init bundle root assets success...")}async initBundleShareAssets(){if(1!==this.bundles.length&&!this.options.preview){this.updateProcess("Init bundle share assets start...");const l={},d=this;for(const e of this.bundleGroupInPriority)await Promise.all(e.map(async s=>{const t=new Set;return Promise.all(s.rootAssets.map(async e=>async function s(t,i,a,e){var n,r,o,u;a.has(t)||((r=asset_library_1.buildAssetLibrary.getAsset(t))?(a.add(t),i.addAsset(r),(0,cconb_1.hasCCONFormatAssetInLibrary)(r)&&(o=d.options.assetSerializeOptions.exportCCON?".ccon":".cconb",(null!=(u=(n=i.config.extensionMap)[o])?u:n[o]=[]).push(r.uuid)),l[t]?i.addRedirect(t,l[t]):(u=await asset_library_1.buildAssetLibrary.getDependUuids(t),await Promise.all(u.map(async e=>s(e,i,a,t))))):e||console.warn(Editor.I18n.t("builder.error.missing_asset",{uuid:`{asset(${t})}`})))}(e,s,t)))})),e.forEach(s=>{s.assetsWithoutRedirect.forEach(e=>{l[e]||(l[e]=s.name)})});this.updateProcess("Init bundle share assets success...")}}async bundleDataTask(){const s=this.imageCompressManager;s&&await s.init(),await Promise.all(this.bundles.map(async e=>{e.output&&(await(0,json_group_1.handleJsonGroup)(e),s)&&await(0,texture_compress_2.bundleDataTask)(e,s)}))}async compressImage(){this.imageCompressManager&&(this.updateProcess("Compress image start..."),await this.imageCompressManager.run(),this.updateProcess("Compress image success..."))}async packImage(){this.updateProcess("Pack Images start"),Editor.Metrics.trackTimeStart("builder:pack-auto-atlas-image");let e=[];this.options.buildBundleOnly?this._pacAssets.reduce((e,s)=>{const t=asset_library_1.buildAssetLibrary.getAsset(s);return this.bundles.some(e=>!!e.output&&(!(!Editor.Utils.Path.contains(t.url,e.root)&&!Editor.Utils.Path.contains(e.root,t.url))||void 0))&&e.push(t),e},e):e=this._pacAssets.map(e=>asset_library_1.buildAssetLibrary.getAsset(e));const s=new Set,a=(this.bundles.forEach(e=>e.assets.forEach(e=>s.add(e))),this.packResults=await(await(new index_1.TexturePacker).init(e,Array.from(s))).pack(),this.imageCompressManager),n=[],r=(this.bundles.map(e=>n.push(...e._assets)),{});await Promise.all(this.packResults.map(async s=>{var e=s.result.atlases,t=asset_library_1.buildAssetLibrary.getAsset(s.uuid);(0,pac_info_1.createAssetInstance)(e,t,s.spriteFrames).forEach(e=>{this.cache.addInstance(e)}),await collectDependAssets(s.uuid,n,r);for(const i of s.spriteFrameInfos)await collectDependAssets(i.uuid,n,r),await collectDependAssets(i.textureUuid,n,r),r[i.textureUuid]&&(r[i.textureUuid]=r[i.textureUuid].filter(e=>e!==i.uuid),r[i.textureUuid].length||delete r[i.textureUuid]),await collectDependAssets(i.imageUuid,n,r),r[i.imageUuid]&&(r[i.imageUuid]=r[i.imageUuid].filter(e=>e!==i.textureUuid),r[i.imageUuid].length||delete r[i.imageUuid],a)&&a.removeTask((0,utils_1.queryImageAssetFromSubAssetByUuid)(i.uuid));await Promise.all(e.map(async e=>{await(0,pac_1.sortBundleInPac)(this.bundles,e,s,r,a)}))})),await Editor.Metrics.trackTimeEnd("builder:pack-auto-atlas-image",{output:!0}),this.updateProcess("Pack Images success")}async buildScript(){this.updateProcess("Build script in bundle start"),this.options.buildScriptParam&&!this.options.buildScriptParam.commonDir&&(this.options.buildScriptParam.commonDir=(0,path_1.join)(this.destDir,"src","chunks")),await this.scriptBuilder.initProjectOptions(this.options);var e=await this.scriptBuilder.buildBundleScript(this.bundles);return this.updateProcess("Build script in bundle success"),e}async outputAssets(){this.updateProcess("Output asset in bundles start");const i=new Set;await Promise.all(this.bundles.map(async t=>{t.output&&(this.imageCompressManager&&await(0,texture_compress_2.bundleOutputTask)(t,this.cache),await(0,json_group_1.outputJsonGroup)(t,this),await Promise.all(t.assetsWithoutRedirect.map(async e=>{if(e.length<=15||t.compressTask[e])return Promise.resolve();var s=asset_library_1.buildAssetLibrary.getAsset(e);s?(i.has(e)||(i.add(e),await checkEffectTextureMipmap(s,e)),await copyAssetFile(s,t,this.options)):console.error(`Can not get asset info with uuid(${e})`)})))})),this.updateProcess("Output asset in bundles success")}async handleHook(e,s){s?await e.call(this,this.options,this.bundles,this.cache):await e()}async runAllTask(){var e=1/this.pipeline.length;for(const s of this.pipeline)"string"==typeof s?await this.runPluginTask(s,e):"function"==typeof s&&await this.runBuildTask(s,e)}async runBuildTask(e,s){if(this.breakResolve)this.breakResolve(),await this.onError(new Error(`Build task ${this.options.taskName||this.options.outputName} is break!`));else try{await e.bind(this)(),this.updateProcess(`run bundle task ${e.name} success!`,s)}catch(e){this.updateProcess("run bundle task failed!",s),await this.onError(e)}}}async function collectDependAssets(e,s,t){s.includes(e)&&(s=await asset_library_1.buildAssetLibrary.queryAssetUsers(e))&&s.length&&(t[e]=s)}(exports.BundleManager=BundleManager).BuiltinBundleName=bundle_utils_1.BuiltinBundleName,BundleManager.BundleConfigs={},BundleManager.internalBundlePriority={[MAIN]:7,[START_SCENE]:20,[INTERNAL]:21,[RESOURCES]:8};const featuresWithDependencies=[],preloadAssets=[],LIBRARY_NAME="library";function copyAssetFile(a,n,r){const o=[".json"];return Promise.all(a.meta.files.map(e=>{var s,t,i;return o.includes(e)||e.startsWith("__")?Promise.resolve():(t=s=(0,cconb_1.isCCONAssetInLibrary)(a,e),t=(0,path_1.join)(n.dest,t?n.importBase:n.nativeBase),e=e.startsWith(".")?a.library+e:(0,path_1.join)(a.library,e),i=(0,path_1.relative)((0,path_1.join)(Editor.Project.path,LIBRARY_NAME),e),(0,fs_extra_1.existsSync)(e)?(t=(0,path_1.join)((0,path_1.join)(t,i)),s?(i=!(r.assetSerializeOptions&&r.assetSerializeOptions.exportCCON),asset_library_1.buildAssetLibrary.outputCCONAsset(a.uuid,t,i,r)):(0,fs_extra_1.existsSync)(t)?Promise.resolve():(0,fs_extra_1.copy)(e,t)):(console.error(Editor.I18n.t("builder.error.missing_import_files",{path:`{link(${e})}`,url:`{asset(${a.url})}`})),Promise.resolve()))}))}function traversalDependencies(e,s){e.forEach(e=>{s[e]&&!featuresWithDependencies.includes(e)&&(featuresWithDependencies.push(e),s[e].dependentAssets&&preloadAssets.push(...s[e].dependentAssets),s[e].dependentModules)&&traversalDependencies(s[e].dependentModules,s)})}async function queryPreloadAssetList(e){var s=(await Editor.Message.request("engine","query-engine-info")).typescript.path,s=(await(0,fs_extra_1.readJSON)((0,path_1.join)(s,"cc.config.json"))).features;return featuresWithDependencies.length=0,preloadAssets.length=0,traversalDependencies(e,s),Array.from(new Set(preloadAssets))}async function checkEffectTextureMipmap(e,s){try{if("cc.Material"===asset_library_1.buildAssetLibrary.getAssetProperty(e,"type")){const t=await asset_library_1.buildAssetLibrary.getInstance(asset_library_1.buildAssetLibrary.getAsset(s));if(t.effectAsset&&t.effectAsset._uuid){const i=await asset_library_1.buildAssetLibrary.getInstance(asset_library_1.buildAssetLibrary.getAsset(t.effectAsset._uuid));i.techniques[t._techIdx].passes.forEach(async(e,s)=>{e.properties&&e.properties.mainTexture&&e.properties.mainTexture.requireMipmaps&&(e=t._props&&t._props[s]).mainTexture&&e.mainTexture._uuid&&(s=await asset_library_1.buildAssetLibrary.getMeta(e.mainTexture._uuid),["nearest","linear"].includes(s.userData.mipfilter)||console.warn(Editor.I18n.t("builder.warn.requireMipmaps",{effectUUID:i._uuid,textureUUID:e.mainTexture._uuid})))})}}}catch(e){console.debug(e)}}