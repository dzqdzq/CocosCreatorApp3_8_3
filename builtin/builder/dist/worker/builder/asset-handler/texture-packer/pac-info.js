"use strict";var __createBinding=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var s=Object.getOwnPropertyDescriptor(t,i);s&&("get"in s?t.__esModule:!s.writable&&!s.configurable)||(s={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,s)}:function(e,t,i,r){e[r=void 0===r?i:r]=t[i]}),__setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),__importStar=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&__createBinding(t,e,i);return __setModuleDefault(t,e),t};Object.defineProperty(exports,"__esModule",{value:!0}),exports.generateSpriteFrame=exports.applyTextureBaseAssetUserData=exports.createTextureFromAtlas=exports.createApriteAtlasFromAtlas=exports.createAssetInstance=exports.SpriteFrameInfo=exports.AtlasInfo=exports.PacInfo=exports.DefaultPackOption=void 0;const cc_1=require("cc"),path_1=require("path"),asset_library_1=require("../../manager/asset-library"),HashUuid=__importStar(require("../../utils/hash-uuid")),Lodash=require("lodash"),EditorExtends=require("@base/electron-module").require("EditorExtends");exports.DefaultPackOption={maxWidth:1024,maxHeight:1024,padding:2,allowRotation:!0,forceSquared:!1,powerOfTwo:!1,algorithm:"MaxRects",format:"png",quality:80,contourBleed:!0,paddingBleed:!0,filterUnused:!0,removeTextureInBundle:!0,removeImageInBundle:!0,removeSpriteAtlasInBundle:!0,compressSettings:{},bleed:0,mode:"build"};class PacInfo{constructor(e,t){this.spriteFrameInfos=[],this.spriteFrames=[],this.relativePath="",this.relativeDir="",this.path="",this.uuid="",this.imagePath="",this.imageUuid="",this.textureUuid="",this.name="autoatlas",this.width=1024,this.height=1024,this.dirty=!1,this.packOptions=JSON.parse(JSON.stringify(exports.DefaultPackOption)),this.uuid=e.uuid;var i=JSON.parse(JSON.stringify(e.meta.userData)),i=t?Object.assign(i,t):i,t=(this.packOptions=Object.assign(this.packOptions,i),this.packOptions.bleed=this.packOptions.paddingBleed?1:0,this.path=e.url,this.storeInfo={pac:{uuid:e.uuid,mtime:asset_library_1.buildAssetLibrary.getAssetProperty(e,"mtime")},sprites:[],options:this.packOptions},(0,path_1.join)(Editor.Project.path,"assets"));this.relativePath=(0,path_1.relative)(t,e.source),this.relativeDir=(0,path_1.relative)(t,(0,path_1.dirname)(e.source)),this.name=asset_library_1.buildAssetLibrary.getAssetProperty(e,"name")}async initSpriteFramesWithRange(e){e=await this.queryInvalidSpriteAssets(e);return 0===e.length&&"build"===this.packOptions.mode?console.warn(`No SpriteFrame found in folder [{link(${(0,path_1.dirname)(this.path)})}]. Please check the AutoAtlas [${this.path}].`):await this.initSpriteFrames(e),this}async initSpriteFrames(e){e=await Promise.all(e.map(async s=>new Promise((r,e)=>{cc.assetManager.loadAny(s.uuid,(e,t)=>{var i=new SpriteFrameInfo(t,s,this.packOptions);i._pacUuid=this.uuid,this.spriteFrames.push(t),r(i)})}))),e=Lodash.sortBy(e,"uuid");return this.spriteFrameInfos=e,this.storeInfo.sprites=this.spriteFrameInfos.map(e=>e.toJSON()),this}async queryInvalidSpriteAssets(e){let t=[];for(const s of await asset_library_1.buildAssetLibrary.queryAssetsByOptions({pattern:(0,path_1.dirname)(this.path)+"/**/*",importer:"sprite-frame"}))!s.meta.userData.packable||this.packOptions.filterUnused&&(!this.packOptions.filterUnused||e&&!e.includes(s.uuid))||t.push(s);if(!t||0===t.length)return[];var i=await asset_library_1.buildAssetLibrary.queryAssetsByOptions({pattern:(0,path_1.dirname)(this.path)+"/+(**)/*.pac"});const r=i.map(e=>(0,path_1.dirname)(e.source));return t=0!==i.length?t.filter(e=>{for(const t of r)if(Editor.Utils.Path.contains(t,e.source))return!1;return!0}):t}toJSON(){var e=Object.assign({},this);delete e.spriteFrames,delete e.storeInfo}}exports.PacInfo=PacInfo;class AtlasInfo{constructor(e,t,i,r,s){this.imageUuid="",this.textureUuid="",this.compressed={imagePathNoExt:"",suffixs:[]};var a=e.map(e=>e.uuid);this.imageUuid=HashUuid.calculate([a],HashUuid.BuiltinHashType.AutoAtlasImage)[0],this.textureUuid=this.imageUuid+"@"+require("@editor/asset-db/libs/utils").nameToId("texture"),this.spriteFrameInfos=e,this.width=t,this.height=i,this.name=r,this.imagePath=s.replace(r,this.imageUuid),this.compressed.suffixs.push((0,path_1.extname)(s))}toJSON(){return{spriteFrameInfos:this.spriteFrameInfos.map(e=>e.toJSON()),width:this.width,height:this.height,name:this.name,imagePath:this.imagePath,imageUuid:this.imageUuid,textureUuid:this.textureUuid,compressed:this.compressed}}}exports.AtlasInfo=AtlasInfo;class SpriteFrameInfo{constructor(e,t,i){this.name="",this.uuid="",this.imageUuid="",this.textureUuid="",this.trim={width:0,height:0,rotatedWidth:0,rotatedHeight:0,x:0,y:0},this.rawWidth=0,this.rawHeight=0,this.width=0,this.height=0,this.originalPath="",this.rotated=!1,this._file="",this._libraryPath="",this._pacUuid="",this._mtime=0;var r=e.rect,s=(this.spriteFrame=e).rotated?r.height:r.width,a=e.rotated?r.width:r.height;this.name=t.displayName||"",e.packable=!1,this.rotated=e.rotated,this.uuid=t.uuid,this.imageUuid=e.texture._mipmaps[0]._uuid,this.textureUuid=e.texture._uuid,this._file=t.parent.source,this._libraryPath=(0,path_1.normalize)(e.texture._mipmaps[0].url),this.trim={rotatedWidth:s,rotatedHeight:a,x:r.x,y:r.y,width:r.width,height:r.height},this.rawWidth=e.originalSize.width,this.rawHeight=e.originalSize.height,this.width=r.width+2*(i.padding+i.bleed),this.height=r.height+2*(i.padding+i.bleed),this._mtime=t._assetDB.infoManager.get(t.parent.source).time}toJSON(){var e=Object.assign({},this);return delete e._libraryPath,delete e._file,delete e._pacUuid,delete e.spriteFrame,e}}function createAssetInstance(e,t,i){e=createApriteAtlasFromAtlas(e,t,i);return[e.spriteAtlas,...e.images,...e.spriteFrames,...e.textures]}function createApriteAtlasFromAtlas(e,t,i){const r=new cc_1.SpriteAtlas;r._uuid=t.uuid,r.name=(0,path_1.basename)(t.source,(0,path_1.extname)(t.source));var s=[],a=[];const n=[];for(const o of e){const{image:u,texture:h}=createTextureFromAtlas(o,t);s.push(u),a.push(h),o.spriteFrameInfos&&o.spriteFrameInfos.forEach(t=>{var e=i.find(e=>e._uuid===t.uuid),e=generateSpriteFrame(t,e,h);n.push(e),r.spriteFrames[t.name]=EditorExtends.serialize.asAsset(t.uuid)})}return{spriteAtlas:r,textures:a,images:s,spriteFrames:n}}function createTextureFromAtlas(e,t){var i,r=e.imageUuid,s=e.textureUuid;if(e.compressd&&(e.compressed=e.compressd),e.compressed)return(i=new cc_1.ImageAsset)._setRawAsset(".png"),i._uuid=r,i._width=i._nativeAsset.width=e.width,i._height=i._nativeAsset.height=e.height,r=new cc_1.Texture2D,t.meta.userData.textureSetting||console.warn(`meta.userData.textureSetting in asset(${t.uuid}) is missing.`),applyTextureBaseAssetUserData(t.meta.userData.textureSetting,r),r._mipmaps=[i],r._uuid=s,{texture:r,image:i};throw new Error("Can't find atlas.compressed.")}function applyTextureBaseAssetUserData(e,t){var i=e=>{switch(e){case"clamp-to-edge":return cc.TextureBase.WrapMode.CLAMP_TO_EDGE;case"repeat":return cc.TextureBase.WrapMode.REPEAT;case"mirrored-repeat":return cc.TextureBase.WrapMode.MIRRORED_REPEAT}},r=e=>{switch(e){case"nearest":return cc.TextureBase.Filter.NEAREST;case"linear":return cc.TextureBase.Filter.LINEAR;case"none":return cc.TextureBase.Filter.NONE}};t.setWrapMode(i((e=e||{wrapModeS:"repeat",wrapModeT:"repeat",minfilter:"nearest",magfilter:"linear",mipfilter:"none",anisotropy:1}).wrapModeS),i(e.wrapModeT)),t.setFilters(r(e.minfilter),r(e.magfilter)),t.setMipFilter(r(e.mipfilter)),t.setAnisotropy(e.anisotropy)}function generateSpriteFrame(e,t,i){var r=new cc.SpriteFrame,i=(r._name=e.name,r._uuid=t._uuid,r.texture=i,e.trim);return r._rect=cc.rect(i.x,i.y,i.width,i.height),r._offset=t.getOffset(),r._originalSize=cc.size(e.rawWidth,e.rawHeight),r._rotated=e.rotated,r._capInsets=[t.insetLeft,t.insetTop,t.insetRight,t.insetBottom],r}exports.SpriteFrameInfo=SpriteFrameInfo,exports.createAssetInstance=createAssetInstance,exports.createApriteAtlasFromAtlas=createApriteAtlasFromAtlas,exports.createTextureFromAtlas=createTextureFromAtlas,exports.applyTextureBaseAssetUserData=applyTextureBaseAssetUserData,exports.generateSpriteFrame=generateSpriteFrame;