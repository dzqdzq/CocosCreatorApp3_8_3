"use strict";var __createBinding=this&&this.__createBinding||(Object.create?function(e,r,t,o){void 0===o&&(o=t);var i=Object.getOwnPropertyDescriptor(r,t);i&&("get"in i?r.__esModule:!i.writable&&!i.configurable)||(i={enumerable:!0,get:function(){return r[t]}}),Object.defineProperty(e,o,i)}:function(e,r,t,o){e[o=void 0===o?t:o]=r[t]}),__setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(e,r){Object.defineProperty(e,"default",{enumerable:!0,value:r})}:function(e,r){e.default=r}),__importStar=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var r={};if(null!=e)for(var t in e)"default"!==t&&Object.prototype.hasOwnProperty.call(e,t)&&__createBinding(r,e,t);return __setModuleDefault(r,e),r};Object.defineProperty(exports,"__esModule",{value:!0}),exports.loadScript=exports.title=void 0;const executor_1=require("@editor/lib-programming/dist/executor"),loader_1=require("@cocos/creator-programming-quick-pack/lib/loader");exports.title="i18n:builder.tasks.load_script";let executor=null;class GlobalEnv{constructor(){this._incrementalKeys=new Set}async record(e){var r=Object.keys(globalThis),e=(await e(),Object.keys(globalThis));for(const t of e)r.includes(t)||this._incrementalKeys.add(t);console.debug("Incremental keys: "+Array.from(this._incrementalKeys))}clear(){for(const e of this._incrementalKeys)delete globalThis[e]}}const globalEnv=new GlobalEnv;async function loadScript(e){if(e.length){if(console.debug("reload all scripts."),!executor){e=await Editor.Message.request("programming","packer-driver/get-loader-context","editor"),e=await loader_1.QuickPackLoaderContext.deserialize(e);const t=(await Promise.resolve().then(()=>__importStar(require("cc/preload"))))["loadDynamic"];var r=await Editor.Message.request("programming","packer-driver/query-cc-editor-module-map");(executor=await executor_1.Executor.create({importEngineMod:async e=>t(e),quickPackLoaderContext:e,cceModuleMap:r})).addPolyfillFile(require.resolve("@editor/build-polyfills/prebuilt/editor/bundle"))}globalEnv.clear(),await globalEnv.record(async()=>{var e;executor?(e=await Editor.Message.request("programming","query-sorted-plugins",{loadPluginInEditor:!0}),executor.setPluginScripts(e),await executor.reload()):console.error("Failed to init executor")})}else console.debug("No script need reload.")}exports.loadScript=loadScript;