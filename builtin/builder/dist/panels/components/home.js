"use strict";var __createBinding=this&&this.__createBinding||(Object.create?function(t,e,s,i){void 0===i&&(i=s);var a=Object.getOwnPropertyDescriptor(e,s);a&&("get"in a?e.__esModule:!a.writable&&!a.configurable)||(a={enumerable:!0,get:function(){return e[s]}}),Object.defineProperty(t,i,a)}:function(t,e,s,i){t[i=void 0===i?s:i]=e[s]}),__setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),__importStar=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var s in t)"default"!==s&&Object.prototype.hasOwnProperty.call(t,s)&&__createBinding(e,t,s);return __setModuleDefault(e,t),e};Object.defineProperty(exports,"__esModule",{value:!0}),exports.BuilderHomeVM=void 0;const fs_extra_1=require("fs-extra"),path_1=require("path"),Settings=__importStar(require("./settings/index")),Task=__importStar(require("./task")),Mask=__importStar(require("./mask")),buttonsComponent=__importStar(require("./buttons")),plugin_1=require("../plugin"),common_options_validator_1=require("../../share/common-options-validator"),utils_1=require("../../share/utils"),message_1=require("../../browser/message"),Vue=require("vue/dist/vue.js"),lodash=require("lodash"),template=(0,fs_extra_1.readFileSync)((0,path_1.join)(__dirname,"../../../static","/template/components/home.html"),"utf8");exports.BuilderHomeVM=Vue.extend({name:"BuilderHomeVM",components:{task:Task,settings:Settings,"build-mask":Mask,buttons:buttonsComponent},data(){return{settingsType:"",taskMap:{},taskList:[],scenes:[],bundles:[],task:{id:"",state:"waiting",progress:0,message:"waiting",options:{}},runningTaskIdId:"",internalMaskInfo:"i18n:builder.tips.waiting_for_data_ready",isDBReady:!1,isPluginManagerReady:!1,isBuildWorkerReady:!1,showSettings:!1,free:!1,checkRes:!0,activeTask:[],supportPlatformMap:{},scrollPosition:0,editingTaskName:!1,openPageSettings:{type:"",id:""}}},computed:{options(){return this.task.options},maskInfo(){return this.isPluginManagerReady?this.isDBReady?this.isBuildWorkerReady?this.scenes&&this.scenes.length?Object.keys(this.supportPlatformMap).length?this.internalMaskInfo:"i18n:builder.empty_platforms":"i18n:builder.empty_scene":"i18n:builder.tips.waiting_for_worker_ready":"i18n:builder.tips.waiting_for_db_ready":"i18n:builder.tips.waiting_for_plugin_ready"}},watch:{async showSettings(t,e){if(!0===t)this.scenes=await(0,common_options_validator_1.getCommonOptionDefaultByKey)("scenes"),this.editingTaskName=!1;else{const s=this.scrollPosition||0;this.$nextTick(()=>{var t=this.$refs.taskWrap;t&&(t.scrollTop=s)})}}},async created(){console.time("Home created"),this.isPluginManagerReady=plugin_1.pluginManager.ready,plugin_1.pluginManager.addListener("ready",async()=>{this.isPluginManagerReady=!0,await this.onPluginManagerReady()}),plugin_1.pluginManager.ready?await this.onPluginManagerReady():Editor.Startup.__protected__.ready.package?await plugin_1.pluginManager.init():Editor.Startup.__protected__.once("package-ready",async()=>{console.debug("package-ready init pluginManager"),await plugin_1.pluginManager.init()}),console.timeEnd("Home created")},methods:{t:Editor.I18n.t,updateTaskOptions(t){t.id&&Editor.Message.send("builder","update-task",t)},updateTaskOptionsByKey(t,e,s,i){this.taskMap[t]&&lodash.set(this.taskMap[t],e,s)},renameTask(){this.editingTaskName=!0,this.$nextTick(()=>{var t=this.$refs.renameTaskInput;t&&t.setAttribute("focused","")})},submitTaskName(t){t=t.target.value&&t.target.value.trim();this.editingTaskName=!1,t&&(this.$set(this.options,"taskName",t),this.task.id)&&Editor.Message.send("builder","update-task",Object.assign(Object.assign({},this.task),{options:this.options}))},async changeTask(t,e){if("boolean"==typeof e&&(this.free=e),!this.taskMap[t])return!1;const s=await plugin_1.pluginManager.checkCommonOptions(this.taskMap[t].options);Object.keys(s).forEach(t=>{s[t]=s[t].error});e=await(0,common_options_validator_1.getCommonOptions)(this.taskMap[t].options.platform);return(0,utils_1.defaultsDeep)(this.taskMap[t].options,e),this.task=Object.assign(Object.assign({},this.taskMap[t]),{errorMap:s}),this.checkRes=!(0,utils_1.checkHasError)(s),!0},toggleSelectTask(t,e){t.ctrlKey?this.activeTask.includes(e)?this.activeTask.splice(this.activeTask.findIndex(t=>t===e),1):this.activeTask.push(e):this.activeTask.includes(e)?this.activeTask=[]:this.activeTask=[e]},async resetTask(){var t=await Editor.Profile.getConfig("builder","common"),t=(plugin_1.pluginManager.platformMap[t.platform]||(t.platform=Object.keys(plugin_1.pluginManager.platformMap)[0]),await plugin_1.pluginManager.getOptionsByPlatform(t.platform));const e=await(0,common_options_validator_1.checkBuildCommonOptions)(t);Object.keys(e).forEach(t=>{e[t]=e[t].error}),t.buildMode="normal",this.task={id:"",progress:0,state:"waiting",message:"waiting",options:t,errorMap:e,time:Date.now().toString()}},calcOutputName(t,e){return t&&e?(t=(0,path_1.join)(Editor.UI.__protected__.File.resolveToRaw(t),e),t=Editor.Utils.File.getName(t),(0,path_1.basename)(t)):""},async updateTasks(t,e,s){"boolean"==typeof s&&(this.free=!!s),t&&e?(s=this.taskMap[t],{queue:e,list:t}=("processing"===e.state?this.runningTaskIdId=t:this.runningTaskIdId="",await Editor.Message.request("builder","query-tasks-info",{type:"build"})),this.taskMap=e,this.taskList=t,s||this.$nextTick(()=>{var t=this.$refs.taskWrap;t&&(t.scrollTop=t.scrollHeight-t.offsetHeight)})):this.initTasks()},async initTasks(){var{queue:t,free:e,list:s}=await Editor.Message.request("builder","query-tasks-info",{type:"build"}),t=(this.taskMap=t,this.taskList=s,this.free=e,this.taskMap[this.task.id]);if(t&&this.task.id){this.task.state=t.state,this.task.message=t.message,this.task.detailMessage=t.detailMessage,this.task.progress=t.progress,this.task.options=t.options;const i=await(0,common_options_validator_1.checkBuildCommonOptions)(this.task.options),a={};Object.keys(i).forEach(t=>{a[t]=i[t].error}),this.task.errorMap=a}},async editTaskOptions(t){await this.changeTask(t)?(this.settingsType="edit",this.showSettings=!0):console.debug(`change task to ${t} failed`)},runOpenPageTask(){var{type:t,id:e}=this.openPageSettings;if(t&&("new"===t||e))if(this.internalMaskInfo)console.debug("open page: wait for build panel ready");else switch(t){case"new":this.onNewBuildTask();break;case"edit":this.editTaskOptions(e);break;case"highlight":this.showSettings=!1,this.highLightTask()}},highLightTask(){const s=this.openPageSettings.id;s&&this.$refs["task_"+s]&&this.$nextTick(()=>{var t=this.$refs["task_"+s];if(Array.isArray(t)){t=t[0];if(t){const e=t.$el;e.scrollIntoView({behavior:"smooth",block:"start"}),e.classList.add("shrink"),setTimeout(()=>{e&&e.classList.remove("shrink")},1e3)}}})},async onNewBuildTask(){this.settingsType="new",await this.resetTask(),this.showSettings=!0},async clearCache(t){(0,utils_1.Metric)("B100022"),Editor.Menu.popup({menu:[{label:"i18n:builder.clear_cache.clear_assets_cache",click:message_1.clearProjectAssetsCache},{label:"i18n:builder.clear_cache.clear_engine_cache",click:message_1.clearEngineCache},{label:"i18n:builder.clear_cache.clear_all",click:message_1.clearAllCache}],x:t.x,y:t.y})},onOpenDevTools(){(0,utils_1.Metric)("B100021"),Editor.Message.send("builder","open-devtools")},async exportBuildConfig(){var t=JSON.parse(JSON.stringify(this.options)),e=await Editor.Dialog.save({title:this.t("export_build_config"),path:(0,path_1.join)(Editor.UI.__protected__.File.resolveToRaw(t.buildPath),`buildConfig_${t.platform}.json`),filters:[{name:"JSON",extensions:["json"]}]});if(e.filePath){if(t.packages)for(const s of Object.keys(t.packages))t.packages[s]||delete t.packages[s];t.nextStages=this.task.buildStageGroup&&this.task.buildStageGroup.build,(0,fs_extra_1.outputFileSync)(e.filePath,JSON.stringify(t,null,2)),console.log(`Build config has export in {link(${e.filePath})}`)}},async importBuildConfig(){var t=await Editor.Dialog.select({title:this.t("import_build_config"),path:Editor.UI.__protected__.File.resolveToRaw(this.options.buildPath),filters:[{name:"JSON",extensions:["json"]}]});if(t.filePaths&&t.filePaths[0]){let s;try{if((s=(0,fs_extra_1.readJSONSync)(t.filePaths[0])).platform&&s.platform!==this.options.platform)return void console.error(Editor.I18n.t("builder.import_config_limit"));s=await Editor.Message.request("builder","migrate-options",s),s=Object.assign(this.options,s);var e=await(0,common_options_validator_1.checkBuildCommonOptions)(s);for(const a of Object.keys(e)){var i=e[a].newValue;e[a].error?(null!=i&&(s[a]=i),null!==i?console.warn(e[a].error,"will use the new value "+e[a].newValue):console.error(e[a].error)):Editor.Profile.setConfig("builder","common."+a,s[a],"local"),lodash.set(this.task.errorMap,a,e[a].error)}s.outputName=await(0,common_options_validator_1.calcValidOutputName)(s.buildPath,s.outputName,s.platform),Editor.Profile.setConfig("builder","common.outputName",s.outputName,"local"),s.packages&&Object.keys(s.packages).forEach(t=>{var e=s.packages[t];Editor.Profile.setConfig(t,"builder.options."+s.platform,e,"local")}),this.checkRes=!(0,utils_1.checkHasError)(this.task.errorMap)}catch(t){return void console.error(t)}this.task=Object.assign(Object.assign({},this.task),{options:s});t=this.$refs.settings;t&&t.onPluginUpdate("importConfig","",s)}},updateErrorMap(t,e){t&&lodash.set(this.task.errorMap,t,e),"check"!==this.settingsType&&(this.checkRes=!(0,utils_1.checkHasError)(this.task.errorMap))},async initBundleInfo(){var t=await Editor.Message.request("asset-db","query-assets",{isBundle:!0},["meta"]);t&&(this.bundles=t.map(t=>({root:t.url,name:t.meta.userData.bundleName||(0,path_1.basename)(t.url),output:!0})))},async onPluginManagerReady(){this.isDBReady=await Editor.Message.request("asset-db","query-ready"),this.isBuildWorkerReady=await Editor.Message.request("builder","query-worker-ready"),await this.initTasks(),this.supportPlatformMap=plugin_1.pluginManager.getSupportPlatformMap(),this.isDBReady&&await this.initAssets(),this.internalMaskInfo="",console.debug("Home onPluginManagerReady"),this.runOpenPageTask()},async initAssets(){this.scenes=await(0,common_options_validator_1.getCommonOptionDefaultByKey)("scenes"),await this.initBundleInfo(),0<this.scenes.length&&0===Object.keys(this.taskMap).length&&Object.keys(this.supportPlatformMap).length&&this.onNewBuildTask()},handleScroll(){var t;this.showSettings||(t=this.$refs.taskWrap)&&(this.scrollPosition=t.scrollTop)}},template:template});