"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.checkBundleCompressionSetting=exports.pluginManager=void 0;const path_1=require("path"),bundle_utils_1=require("../share/bundle-utils"),platforms_options_1=require("../share/platforms-options"),plugin_manager_1=require("../share/plugin-manager"),texture_compress_1=require("../share/texture-compress"),validator_manager_1=require("../share/validator-manager"),utils_1=require("../share/utils"),common_options_validator_1=require("../share/common-options-validator"),fs_extra_1=require("fs-extra"),global_1=require("../share/global"),lodash=require("lodash");class PluginManager extends plugin_manager_1.PluginManagerBase{constructor(){super(),this.builderPathsMap={},this.buildTemplateMap={},this.customBuildStagesMap={},this.platformConfig={};const t={};platforms_options_1.PLATFORMS.forEach(e=>{t[e]={}}),this.configMap=t,this.platformConfig=JSON.parse(JSON.stringify(t))}async init(){Editor.Menu.__protected__.add("i18n:menu.project/i18n:builder.create_user_template",{label:"application.ejs",order:1,message:{target:"builder",name:"create-application-template"}}),await super.init()}async register(e){return!!await super.register(e)&&(this.emit("register",this.packageRegisterInfo.get(e.name),this.getWorkerPluginInfo(e.name)),!0)}async internalRegister(e,t){await super.internalRegister(e,t);const{platform:o,config:r}=e;var a,{name:e,buildPath:i}=t;r.internal&&"object"==typeof r.textureCompressConfig&&((a=texture_compress_1.configGroups[r.textureCompressConfig.platformType])?(a.support.rgb=lodash.union(a.support.rgb,r.textureCompressConfig.support.rgb),a.support.rgba=lodash.union(a.support.rgba,r.textureCompressConfig.support.rgba),a.defaultSupport&&(r.textureCompressConfig.support.rgb=lodash.union(r.textureCompressConfig.support.rgb,a.defaultSupport.rgb),r.textureCompressConfig.support.rgba=lodash.union(r.textureCompressConfig.support.rgba,a.defaultSupport.rgba))):console.error("Invalid platformType "+r.textureCompressConfig.platformType),this.platformConfig[o].texture=r.textureCompressConfig),r.icon&&(r.icon=(0,utils_1.resolveToRaw)(r.icon,(0,path_1.dirname)(i))),r.internal&&e===o&&r.platformName&&(this.platformConfig[o].name=r.platformName),r.internal&&this.bundleConfigs[o]&&(this.platformConfig[o].type=this.bundleConfigs[o].platformType),r.internal&&r.buildTemplateConfig&&(a=r.platformName?o:e,this.buildTemplateMap[a]=r.buildTemplateConfig,r.buildTemplateConfig.templates.length)&&Editor.Menu.__protected__.add("i18n:menu.project/i18n:builder.create_user_template",{label:r.displayName||r.platformName||t.displayName||t.name,order:1,message:{target:"builder",name:"create-build-template",params:[a]}}),r.customBuildStages&&lodash.set(this.customBuildStagesMap,e+"."+o,r.customBuildStages),"object"==typeof r.options&&Editor.Profile.setConfig(e,"builder.options."+o,(0,utils_1.getOptionsDefault)(r.options),"default"),r.commonOptions&&this.commonOptionConfig[o]&&Object.keys(this.commonOptionConfig[o]).forEach(e=>{var t=this.commonOptionConfig[o][e];Editor.Profile.setConfig(o,"builder.common."+e,t.default,"default")}),!Editor.App.dev&&"win32"===process.platform&&["mac","ios"].includes(e)||!Editor.App.dev&&"darwin"===process.platform&&"windows"===e||(this.pkgPriorities[e]=r.priority||0,"string"==typeof(this.configMap[o][e]=r).hooks&&(r.hooks=(0,utils_1.resolveToRaw)(r.hooks,(0,path_1.dirname)(i)),lodash.set(this.builderPathsMap,e+"."+o,r.hooks)),console.debug(`[Build] internalRegister pkg(${e}) in ${o} platform success!`))}async unregister(t){try{var e=this.packageRegisterInfo.get(t.name);if(e){var o=JSON.parse(JSON.stringify(this.getWorkerPluginInfo(t.name)));await super.unregister(t);const r=[];platforms_options_1.PLATFORMS.forEach(e=>{delete this.configMap[e][t.name],this.builderPathsMap[t.name]&&this.builderPathsMap[t.name][e]&&(r.push(this.builderPathsMap[t.name][e]),Editor.Module.__protected__.removeCache(this.builderPathsMap[t.name][e]),delete this.builderPathsMap[t.name][e])}),Editor.Module.__protected__.removeCache((0,path_1.join)(t.path,t.info.contributions.builder)),this.emit("unregister",e,o)}}catch(e){console.error(e)}}getAllWorkerPluginInfos(){return Object.keys(this.pkgPriorities).map(e=>this.getWorkerPluginInfo(e))}getWorkerPluginInfo(e){return{pkgName:e,priority:this.pkgPriorities[e],internal:platforms_options_1.builtinPlugins.includes(e),assetHandlers:this.assetHandlerPaths[e],hooks:this.builderPathsMap[e],buildTemplate:this.buildTemplateMap[e],customBuildStages:this.customBuildStagesMap[e]}}async checkOptions(e){let t=!0;this.bundleConfigs[e.platform]?(i=this.bundleConfigs[e.platform].supportOptions.compressionType,i=await checkBundleCompressionSetting(e.mainBundleCompressionType,i),(o=validator_manager_1.validator.checkWithInternalRule("valid",i.newValue))&&lodash.set(e,"mainBundleCompressionType",i.newValue),i.error&&o&&console.debug(i.error+" 将会使用新值 "+i.newValue)):console.debug("Can not find bundle config with platform "+e.platform);var o=await this.getOptionsByPlatform(e.platform),r=(0,utils_1.defaultsDeep)(JSON.parse(JSON.stringify(e)),o);"buildStageGroup"in e&&(r.buildStageGroup=e.buildStageGroup);for(const s of Object.keys(r))if("packages"!==s){var a=await this.checkCommonOptionByKey(s,r[s],r);if(a&&a.error&&"error"===a.level&&!validator_manager_1.validator.checkWithInternalRule("valid",a.newValue)){t=!1,console.error("check "+s+(Editor.I18n.t(a.error.replace("i18n:",""))||a.error));break}r[s]=a.newValue}var i=await this.checkPluginOptions(r);if(t=i?t:!1)return r}async checkPluginOptions(t){if("object"!=typeof t.packages)return!1;let o=!0;for(const l of Object.keys(t.packages)){var r=t.packages[l];if(r){var a=exports.pluginManager.configMap[t.platform][l];if(a&&a.options)for(const p of Object.keys(r))if(a.options[p]&&a.options[p].verifyRules){var i=r[p],i=await validator_manager_1.validatorManager.check(i,a.options[p].verifyRules,t,(null==(i=exports.pluginManager.commonOptionConfig[t.platform][p])?void 0:i.verifyKey)||t.platform+l);if(i){let e=validator_manager_1.validator.checkWithInternalRule("valid",a.options[p].default);e=e&&!await validator_manager_1.validatorManager.check(a.options[p].default,a.options[p].verifyRules,t,(null==(n=exports.pluginManager.commonOptionConfig[t.platform][p])?void 0:n.verifyKey)||t.platform+l);var s,n=a.options[p].verifyLevel||"error";e||"error"!==n?(s="error"!==n?n:"warn",console[s]&&console[s](`${i}，options.packages.${l}.${p} will use default value `+a.options[p].default),lodash.set(r,p,a.options[p].default)):(console.error(`[Build check failed] ( ${l} )`+i),o=!1)}}}}return o}async getDefaultOptionsByPlatform(e){var t=await(0,common_options_validator_1.getCommonOptions)(e),o=Object.assign({packages:{}},t);for(const r of Object.keys(this.configMap[e]))o.packages[r]=await Editor.Profile.getConfig(r,"builder.options."+e,"default");return o}async getOptionsByPlatform(e){var t=await(0,common_options_validator_1.getCommonOptions)(e),o=Object.assign({packages:{}},t);for(const r of Object.keys(this.configMap[e]))o.packages[r]=await Editor.Profile.getConfig(r,"builder.options."+e);return o}async createBuildTemplate(t){var o=this.buildTemplateMap[t];if(o){var r=global_1.BuildGlobalInfo.buildTemplateDir;const s=(0,path_1.join)(r,t);await Promise.all(o.templates.map(async e=>Editor.Utils.File.copy(e.path,(0,path_1.join)(s,e.destUrl))));let e={[t]:o.version};var a,i=(0,path_1.join)(r,"templates-version.json");(0,fs_extra_1.existsSync)(i)?(a=await(0,fs_extra_1.readJSON)(i))[t]!==o.version&&(e=Object.assign({},a,e),await(0,fs_extra_1.outputJSON)(i,e,{spaces:4})):await(0,fs_extra_1.outputJSON)(i,e,{spaces:4}),console.log(`${t} ${Editor.I18n.t("builder.tips.createTemplateSuccess")}({link(${(0,path_1.join)(r,t)})})`)}else console.debug("no build template for "+t)}getTexturePlatformConfigs(){const t={};return Object.keys(this.platformConfig).forEach(e=>{t[e]={name:this.platformConfig[e].name,textureCompressConfig:this.platformConfig[e].texture}}),t}}function checkBundleCompressionSetting(e,t){var o={error:"",newValue:e};return t&&-1===t.indexOf(e)&&(o.newValue=bundle_utils_1.BundleCompressionTypes.MERGE_DEP,o.error=` compression type(${e}) is invalid for this platform!`),o}exports.pluginManager=new PluginManager,exports.checkBundleCompressionSetting=checkBundleCompressionSetting;