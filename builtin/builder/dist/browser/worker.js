"use strict";var __importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.workerManager=void 0;const tasks_1=require("./tasks"),plugin_1=require("./plugin"),electron_worker_1=__importDefault(require("@base/electron-worker"));class WorkerManager{constructor(){this.worker=null,this.hasInit=!1,this._debug=!1,this.crashNum=0,this.listenerMap={}}async create(){return this.worker||(this.worker=electron_worker_1.default.query("Assets"),this.worker)||void console.error(new Error("Can not get [Assets] worker"))}async init(){var e;await this.create(),this.hasInit||(await Editor.Message.request("asset-db","execute-script",{name:"builder",method:"initWorkerMessage"}),tasks_1.manager.initWorker(this.worker),this.listenerMap.register=(e,r)=>{var s;null!=(s=this.worker)&&s.send("build-worker:build-plugin-changed","register",r,plugin_1.pluginManager.platformConfig)},this.listenerMap.unregister=(e,r)=>{var s;null!=(s=this.worker)&&s.send("build-worker:build-plugin-changed","unregister",r,plugin_1.pluginManager.platformConfig)},this.worker&&this.worker.on("render-process-gone",(e,r)=>{Editor.Message.broadcast("crash-reporter:report",{process:"AssetDB&Build",value:{"A100000_AssetDB_&_Build":1},details:r,time:new Date}),this.crashNum++,tasks_1.manager.onProcessGone(e,r),this.crashNum<=3&&setTimeout(()=>{this.worker.win&&this.worker.win.reload()},0)}),plugin_1.pluginManager.on("register",this.listenerMap.register),plugin_1.pluginManager.on("unregister",this.listenerMap.unregister),await(null==(e=this.worker)?void 0:e.send("build-worker:init",plugin_1.pluginManager.getAllWorkerPluginInfos(),plugin_1.pluginManager.platformConfig,!!Editor.App.args.build)),this.hasInit=!0,tasks_1.manager.workerReady=!0,Editor.Message.broadcast("build-worker:ready"))}async destroy(){this.hasInit&&(this.hasInit=!1,this.crashNum=0,plugin_1.pluginManager.removeListener("register",this.listenerMap.register),plugin_1.pluginManager.removeListener("unregister",this.listenerMap.unregister),delete this.listenerMap.register,delete this.listenerMap.unregister)}async send(e,...r){var s;return!this.hasInit||null==(s=this.worker)?void 0:s.send(e,...r)}debug(e){this._debug=e,this.worker&&this.worker.debug(e)}reset(){tasks_1.manager.dbReady=!1,tasks_1.manager.workerReady=!1,this.destroy()}}exports.workerManager=new WorkerManager;