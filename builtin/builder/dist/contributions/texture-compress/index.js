"use strict";var __createBinding=this&&this.__createBinding||(Object.create?function(e,t,r,s){void 0===s&&(s=r);var o=Object.getOwnPropertyDescriptor(t,r);o&&("get"in o?t.__esModule:!o.writable&&!o.configurable)||(o={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,s,o)}:function(e,t,r,s){e[s=void 0===s?r:s]=t[r]}),__setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),__importStar=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&__createBinding(t,e,r);return __setModuleDefault(t,e),t};Object.defineProperty(exports,"__esModule",{value:!0}),exports.close=exports.ready=exports.$=exports.template=exports.style=void 0;const fs_extra_1=require("fs-extra"),path_1=require("path"),compressPresets=__importStar(require("./page/compress-presets")),compressFormat=__importStar(require("./page/compress-format")),event_bus_1=require("./event-bus"),Vue=require("vue/dist/vue.js"),vueTemplate=(Vue.config.productionTip=!1,(Vue.config.devtools=!1,fs_extra_1.readFileSync)((0,path_1.join)(__dirname,"../../../static/contributions/texture-compress.html"),"utf8"));function ready(){var e,t=this;t.vm||((e=new Vue({components:{"compress-presets":compressPresets,"compress-format":compressFormat},data(){return{tab:"presets",tabList:{presets:{label:"i18n:builder.project.texture_compress.compress_preset",comp:"compress-presets"},format:{label:"i18n:builder.project.texture_compress.custom_format",comp:"compress-format"}},textureCompressConfig:null,configDirty:!1,customConfigs:null,overwriteFormats:{},genMipmaps:!0}},created(){document.addEventListener("click",onBlankClick)},destroyed(){document.removeEventListener("click",onBlankClick)},methods:{t(e){return Editor.I18n.t("builder.project.texture_compress."+e)},async refresh(){var e,t,r=await Editor.Message.request("builder","query-compress-config");r&&(e=null==(e=await Editor.Profile.getProject("builder","textureCompressConfig.genMipmaps"))||e,t=await Editor.Profile.getProject("builder","textureCompressConfig.customConfigs")||{},this.genMipmaps=e,this.customConfigs=t,this.textureCompressConfig=r,this.calcOverwriteFormats())},calcOverwriteFormats(){const r=this.customConfigs;if(r){var e=Object.values(r);if(Array.isArray(e)){const s={};e.forEach(e=>{var t;e.overwrite&&((t=s[e.format])&&(t=r[t])&&(t.overwrite=!1,console.debug(`conflic format config ${e.format}(${s[e.format]} is invalid.)`)),s[e.format]=e.id)}),this.overwriteFormats=s}}},async onChangeTab(t,r){this.tab=t,this.configDirty&&await this.refresh(),r&&process.nextTick(()=>{var e=this.tabList[t];e&&(e=e.comp,e=this.$refs[e])&&e.jumpToConfig(r)})},onConfigChange(){this.configDirty=!0},updateMipmapConfig(e){e=e.target;this.genMipmaps="on"===e.value,Editor.Profile.setProject("builder","textureCompressConfig.genMipmaps",this.genMipmaps)}},template:vueTemplate})).$mount(t.$.container),t.vm=e),t.vm.refresh()}function onBlankClick(e){event_bus_1.EventBus.$emit("blank-click",e)}function close(){var e;null!=(e=this.vm)&&e.$destroy(),this.vm=null}exports.style=(0,fs_extra_1.readFileSync)((0,path_1.join)(__dirname,"./texture-compress.css"),"utf8"),exports.template='<div class="container"></div>',exports.$={container:".container"},exports.ready=ready,exports.close=close;