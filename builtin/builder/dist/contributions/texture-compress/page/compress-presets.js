"use strict";var __createBinding=this&&this.__createBinding||(Object.create?function(e,t,o,r){void 0===r&&(r=o);var i=Object.getOwnPropertyDescriptor(t,o);i&&("get"in i?t.__esModule:!i.writable&&!i.configurable)||(i={enumerable:!0,get:function(){return t[o]}}),Object.defineProperty(e,r,i)}:function(e,t,o,r){e[r=void 0===r?o:r]=t[o]}),__setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),__importStar=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var o in e)"default"!==o&&Object.prototype.hasOwnProperty.call(e,o)&&__createBinding(t,e,o);return __setModuleDefault(t,e),t},__importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.mounted=exports.created=exports.methods=exports.computed=exports.props=exports.data=exports.components=exports.template=void 0;const fs_extra_1=require("fs-extra"),path_1=require("path"),lodash_1=__importDefault(require("lodash")),compressConfig=__importStar(require("../comp/texture-compress-config")),configToolbar=__importStar(require("../comp//config-toolbar")),utils_1=require("../../../share/utils"),data=(exports.template=(0,fs_extra_1.readFileSync)((0,path_1.join)(__dirname,"../../../../static/contributions/compress-presets.html"),"utf8"),exports.components={"compress-config":compressConfig,"config-toolbar":configToolbar},function(){return{configs:null,defaultConfig:null,initialized:!1,searchName:""}});function created(){this.throttledBroadcastUpdated=this.broadcastUpdated.bind(this)}async function mounted(){console.time("Init presets"),await this.init(),console.timeEnd("Init presets")}exports.data=data,exports.props=["compressConfig","overwriteFormats"],exports.computed={displayConfigs(){const t=this,o={};return Object.keys(t.configs).forEach(e=>{t.configs[e]&&t.configs[e].name.includes(t.searchName)&&(o[e]=t.configs[e])}),o}},exports.methods={t(e){return Editor.I18n.t("builder.project.texture_compress."+e)},async init(){var e=this,t=await Editor.Profile.getProject("builder","textureCompressConfig.userPreset");t&&(e.configs=t),e.defaultConfig=await Editor.Profile.getProject("builder","textureCompressConfig.defaultConfig"),e.mode=await Editor.Profile.getProject("builder","textureCompressConfig.userPresetMode"),e.initialized=!0},async onToolBarChange(e,t){var o=this;switch(e){case"add-config":o.addConfig(t);break;case"import-config":o.importConfig();break;case"export-config":o.exportConfig();break;case"search-name":o.searchName=t}},async addConfig(e){const t=this,o=Editor.Utils.UUID.generate();let r;e?(r=e&&JSON.parse(JSON.stringify(t.configs[e]))).name+="(copy)":r={name:"New Compress Config",options:{}},t.$set(t.configs,o,r),await Editor.Profile.setProject("builder","textureCompressConfig.userPreset."+o,r),t.throttledBroadcastUpdated(),process.nextTick(()=>{t.jumpToConfig(o)})},jumpToConfig(e){if(this.$refs.wrap){const t=this.$refs.wrap.querySelector(`ui-section[id="${e}"]`);t&&(t.scrollIntoView(),t.setAttribute("twinkle","shake"),setTimeout(()=>{t.setAttribute("twinkle","")},900))}},async onUpdateFormatQuality(e,t,o,r,i){var s=this;s.configs[e][t][o][r]=i,await Editor.Profile.setProject("builder","textureCompressConfig.userPreset."+e,s.configs[e]),s.throttledBroadcastUpdated()},async _onAfterChange(e,t){var o=this;o.$set(o.configs,e,t),await Editor.Profile.setProject("builder","textureCompressConfig.userPreset."+e,t),o.throttledBroadcastUpdated()},async onAddOverwritePlatform(e,t,o){var r=JSON.parse(JSON.stringify(this.configs[e]));lodash_1.default.set(r,"overwrite."+t,r.options[o]||{}),this._onAfterChange(e,r)},async onAddFormat(e,t,o,r){var i=this;const s=JSON.parse(JSON.stringify(i.configs[e]));s[t][o]||(s[t][o]={});var n=Object.assign(Object.assign({},i.compressConfig.formatsInfo),i.compressConfig.customFormats);const a=i.compressConfig.textureFormatConfigs[n[r].formatType].options;s[t][o][r]={},Object.keys(a).forEach(e=>{s[t][o][r][e]=a[e].default}),i._onAfterChange(e,s)},onConfigNameChange(e){this.newConfigName=e.target.value},async onRemoveFormat(e,t,o,r){var i,s=this;if(!o&&!r)return 1===(await Editor.Dialog.info(Editor.I18n.t("builder.project.texture_compress.tips.checkRemoveConfig"),{default:0,cancel:1,buttons:[Editor.I18n.t("builder.confirm"),Editor.I18n.t("builder.cancel")]})).response?void 0:(delete s.configs[e],void s._onAfterChange(e,null));o&&!r?(delete(i=JSON.parse(JSON.stringify(s.configs[e])))[t][o],s._onAfterChange(e,i)):o&&(i=JSON.parse(JSON.stringify(s.configs[e])),r?delete i[t][o][r]:delete i[t][o],s._onAfterChange(e,i))},async onChangeFormatName(e,t){this.configs[e].name=t,await Editor.Profile.setProject("builder","textureCompressConfig.userPreset",this.configs),this.throttledBroadcastUpdated()},async importConfig(){var t=this,o=(await Editor.Dialog.select({title:t.t("import_config"),path:Editor.Project.path,filters:[{name:"JSON",extensions:["json"]}]})).filePaths[0];if(o){var r=await Editor.Dialog.warn(t.t("import_config_options"),{buttons:[t.t("overwrite"),t.t("merge")],default:1});let e;try{if(e=(0,fs_extra_1.readJSONSync)(o),!(0,utils_1.checkCompressOptions)(e))return void console.error(Editor.I18n.t("builder.project.texture_compress.tips.import_failed",{link:Editor.Utils.Url.getDocUrl("editor/project")}));if(1===r.response)for(const i of Object.keys(e))t.$set(t.configs,i,e[i]);else t.configs=e}catch(e){return void console.error(e)}await Editor.Profile.setProject("builder","textureCompressConfig.userPreset",e),console.log(`Import texture compress config from {link(${o})} success!`),t.throttledBroadcastUpdated()}},async exportConfig(){var e=await Editor.Dialog.save({title:this.t("export_config"),path:(0,path_1.join)(Editor.Project.path,"texture-compress-config.json"),filters:[{name:"JSON",extensions:["json"]}]});e.filePath&&(await(0,fs_extra_1.outputFile)(e.filePath,JSON.stringify(this.configs,null,2)),console.log(`Texture compress config has export in {link(${e.filePath})}.`))},broadcastUpdated(){Editor.Message.broadcast("builder:texture-compress-config-updated")}},exports.created=created,exports.mounted=mounted;