"use strict";var __createBinding=this&&this.__createBinding||(Object.create?function(t,o,e,i){void 0===i&&(i=e);var r=Object.getOwnPropertyDescriptor(o,e);r&&("get"in r?o.__esModule:!r.writable&&!r.configurable)||(r={enumerable:!0,get:function(){return o[e]}}),Object.defineProperty(t,i,r)}:function(t,o,e,i){t[i=void 0===i?e:i]=o[e]}),__setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(t,o){Object.defineProperty(t,"default",{enumerable:!0,value:o})}:function(t,o){t.default=o}),__importStar=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var o={};if(null!=t)for(var e in t)"default"!==e&&Object.prototype.hasOwnProperty.call(t,e)&&__createBinding(o,t,e);return __setModuleDefault(o,t),o};Object.defineProperty(exports,"__esModule",{value:!0}),exports.mounted=exports.methods=exports.computed=exports.data=exports.props=exports.template=exports.components=void 0;const fs_extra_1=require("fs-extra"),path_1=require("path"),customConfig=__importStar(require("../comp/custom-config")),configToolbar=__importStar(require("../comp/config-toolbar"));function getDefaultConfig(t){return{id:Editor.Utils.UUID.generate(),name:t,path:"",command:"",format:"png"}}exports.components={"custom-config":customConfig,"config-toolbar":configToolbar},exports.template=(0,fs_extra_1.readFileSync)((0,path_1.join)(__dirname,"../../../../static/contributions/compress-format.html"),"utf8"),exports.props=["compressConfig","customConfigs","overwriteFormats"];const data=function(){return{editConfig:null,searchName:""}};async function mounted(){}exports.data=data,exports.computed={displayConfigs(){const o=this,e={};return o.customConfigs?(Object.keys(o.customConfigs).forEach(t=>{o.customConfigs[t].name.includes(o.searchName)&&(e[t]=o.customConfigs[t])}),e):{}}},exports.methods={t(t){return Editor.I18n.t("builder.project.texture_compress."+t)},async init(){const o=this;o.customConfigs=await Editor.Profile.getProject("builder","textureCompressConfig.customConfigs")||{},o.customConfigs&&Object.keys(o.customConfigs)&&Object.values(o.customConfigs).forEach(t=>{t.overwrite&&(o.overwriteFormats[t.format]&&(o.customConfigs[o.overwriteFormats[t.format]].overwrite=!1,console.debug(`conflic format config ${t.format}(${o.overwriteFormats[t.format]} is invalid.)`)),o.overwriteFormats[t.format]=t.id)}),o.mode=await Editor.Profile.getProject("builder","textureCompressConfig.customConfigsMode")||"config"},async onToolBarChange(t,o){var e=this;switch(t){case"add-config":e.addConfig(o);break;case"import-config":e.importConfig();break;case"export-config":e.exportConfig();break;case"search-name":e.searchName=o}},async addConfig(t){const o=this;let e;t?((e=JSON.parse(JSON.stringify(o.customConfigs[t]))).name+="(copy)",e.id=Editor.Utils.UUID.generate()):e=getDefaultConfig("New Format Config");t=o.customConfigs||{};o.$set(t,e.id,e),o.$root.customConfigs=t,await Editor.Profile.setProject("builder","textureCompressConfig.customConfigs."+e.id,e),o.emitChange(),process.nextTick(()=>{o.jumpToConfig(e.id)})},jumpToConfig(t){if(this.$refs.wrap){const o=this.$refs.wrap.querySelector(`div[id="${t}"]`);o&&(o.scrollIntoView(),o.setAttribute("twinkle","shake"),setTimeout(()=>{o.setAttribute("twinkle","")},900))}},async importConfig(){var t=this,o=(await Editor.Dialog.select({title:t.t("import_config"),path:Editor.Project.path,filters:[{name:"JSON",extensions:["json"]}]})).filePaths[0];if(o){var e,i=await Editor.Dialog.warn(t.t("import_config_options"),{buttons:[t.t("overwrite"),t.t("merge")],default:1});try{e=await(0,fs_extra_1.readJSON)(o);for(const r of Object.keys(e))if(!e[r]||!e[r].format)return void Editor.Dialog.error("Invalid compress config!");if(1===i.response)for(const s of Object.keys(e))t.$set(t.customConfigs,s,e[s]);else t.$root.customConfigs=e;t.$root.calcOverwriteFormats(),t.emitChange(),await Editor.Profile.setProject("builder","textureCompressConfig.customConfigs",t.$root.customConfigs),console.log(`Import custom compress config from {link(${o})} success!`)}catch(t){console.error(t)}}},async exportConfig(){var t=await Editor.Dialog.save({title:this.t("export_config"),path:(0,path_1.join)(Editor.Project.path,"custom-compress-config.json"),filters:[{name:"JSON",extensions:["json"]}]});t.filePath&&(await(0,fs_extra_1.outputFile)(t.filePath,JSON.stringify(this.customConfigs,null,2)),console.log(`Custom compress config has export in {link(${t.filePath})}.`))},async onConfigChange(t,o,e){var i=this,o=Object.assign({},i.customConfigs[t],{[o]:e});i.$set(i.customConfigs,t,o),await Editor.Profile.setProject("builder","textureCompressConfig.customConfigs."+t,i.customConfigs[t]),i.emitChange()},async onRemoveFormat(t){var o=this;o.$set(o.customConfigs,t,null),delete o.customConfigs[t],await Editor.Profile.setProject("builder","textureCompressConfig.customConfigs",o.customConfigs),o.emitChange()},async emitChange(){this.$emit("update"),Editor.Message.broadcast("builder:texture-compress-config-updated")}},exports.mounted=mounted;