"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.Validator=void 0;const fs_1=require("fs");class Validator{constructor(){this.customVerifyRules={}}static addRule(e,s){Validator.internalVerifyRules[e]||(Validator.internalVerifyRules[e]=s)}has(e){e=this.customVerifyRules[e]||Validator.internalVerifyRules[e];return!(!e||!e.func)}queryRuleMessage(e){e=this.customVerifyRules[e]||Validator.internalVerifyRules[e];return e&&e.message}checkWithInternalRule(e,s,...r){var i=Validator.internalVerifyRules[e];return i&&i.func?i.func(s,...r):(console.warn(`Invalid check with ${s}: Rule ${e} is not exist.`),!1)}async check(e,s,...r){return!await this.checkRuleWithMessage(e,s,...r)}async checkRuleWithMessage(e,s,...r){var i=this.customVerifyRules[e]||Validator.internalVerifyRules[e];return i&&i.func?await i.func(s,...r)?"":i.message:`Invalid check with ${s}: Rule ${e} is not exist.`}add(e,s){s&&s.func&&s.message?this.customVerifyRules[e]=s:console.warn(`Add rule ${e} failed!`)}}(exports.Validator=Validator).internalVerifyRules={pathExist:{func:e=>"string"==typeof e&&(e=Editor.UI.__protected__.File.resolveToRaw(e),(0,fs_1.existsSync)(e)),message:"i18n:builder.warn.path_not_exist"},valid:{func:e=>null!=e,message:"i18n:builder.verify_rule_message.valid"},required:{func:e=>null!=e&&""!==e,message:"i18n:builder.verify_rule_message.required"},normalName:{func:e=>/^[a-zA-Z0-9_-]*$/.test(e),message:"i18n:builder.verify_rule_message.normalName"},noChinese:{func:e=>!/.*[\u4e00-\u9fa5]+.*$/.test(e),message:"i18n:builder.verify_rule_message.no_chinese"},array:{func:e=>Array.isArray(e),message:"i18n:builder.verify_rule_message.array"},string:{func:e=>"string"==typeof e,message:"i18n:builder.verify_rule_message.string"},number:{func:e=>"number"==typeof e,message:"i18n:builder.verify_rule_message.number"},http:{func:e=>"string"==typeof e&&e.startsWith("http"),message:"i18n:builder.verify_rule_message.http"},strictPath:{func:()=>!1,message:"i18n:builder.verify_rule_message.strict_path"},normalPath:{func:e=>"string"==typeof e&&/^[a-zA-Z]:[\\]((?! )(?![^\\/]*\s+[\\/])[\w -]+[\\/])*(?! )(?![^.]*\s+\.)[\w -]+$/.test(e),message:"i18n:builder.verify_rule_message.normal_path"}};