const ps=require("path"),expect=require("chai")["expect"],{validatorManager,validator}=require(ps.join(__dirname,"./../dist/share/validator-manager"));describe("校验函数的基础使用",()=>{describe("validator",()=>{it("validator.checkWithInternalRule noChinese",async()=>{expect(validator.checkWithInternalRule("noChinese","有中文")).to.be.false}),it("validator.check noChinese",async()=>{expect(await validator.check("noChinese","有中文")).to.be.false}),it("validator.checkRuleWithMessage noChinese",async()=>{expect(await validator.checkRuleWithMessage("noChinese","有中文")).to.be.string("i18n:builder.verify_rule_message.no_chinese")}),it("validator.checkWithInternalRule http",async()=>{expect(validator.checkWithInternalRule("http","192.168.11")).to.be.false,expect(await validator.checkRuleWithMessage("http","https://192.168.11")).to.equal("")}),it("validator.has",async()=>{expect(validator.has("http")).to.be.true}),it("validator.add",async()=>{validator.add("newTestRul",{message:"not exist",func:function(e){return!!e}}),expect(validator.has("newTestRul")).to.be.true,expect(await validator.check("newTestRul","")).to.be.false,expect(await validator.checkWithInternalRule("newTestRul","")).to.toString()})}),describe("validatorManager",()=>{it("addMessage addRule check",async()=>{validatorManager.addRule("newTestRul2",{message:"newTestRul2 Message",func:function(e){return"test"===e}});var e=await validatorManager.check("fff",["newTestRul2","http"]);expect(e).equal("newTestRul2 Message")})})});