"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.close=exports.importConfig=exports.exportConfig=exports.ready=exports.$=exports.template=exports.style=void 0;const fs_1=require("fs"),path_1=require("path"),Vue=require("vue/dist/vue.js"),vueTemplate=(Vue.config.productionTip=!1,(Vue.config.devtools=!1,fs_1.readFileSync)((0,path_1.join)(__dirname,"../../static/contributions/project-physics.html"),"utf8")),ProjectPhysicsVM=Vue.extend({name:"ProjectPhysicsVM",data(){return{collisionMatrix:{0:1},groups:[],reverseGroups:[],state:"",stateIndex:0,error:""}},mounted(){this.refresh()},methods:{t(t){return Editor.I18n.t(t)},async refresh(){var t=await Editor.Profile.getProject("project","physics.collisionGroups")||[],t=(this.groups=t.concat([{index:0,name:"DEFAULT"}]).sort((t,e)=>t.index-e.index),this.reverseGroups=this.groups.slice().reverse(),await Editor.Profile.getProject("project","physics.collisionMatrix"));t&&(this.collisionMatrix=t)},checked(t,e){e=this.collisionMatrix[e.toString()];return void 0!==e&&!!(e&1<<t)},onChanged(t){var t=t.currentTarget,e=t.getAttribute("y");const o=1<<Number(e);if(e){let s=this.collisionMatrix[e];Array.from(t.getElementsByTagName("ui-checkbox")).forEach(t=>{var e=t.checked,t=t.getAttribute("x"),i=1<<Number(t);let r=this.collisionMatrix[t];e?(s|=i,r|=o):(s&=~i,r&=~o),this.$set(this.collisionMatrix,t,r)}),this.$set(this.collisionMatrix,e,s),Editor.Profile.setProject("project","physics.collisionMatrix",this.collisionMatrix)}},startEdit(t){const e=t.path.find(t=>"TR"===t.tagName);e&&(this.stateIndex=Number(e.getAttribute("y")),this.state="edit",this.$nextTick(()=>{e.after(this.$refs.errorRow)}))},cancelEdit(){this.state="",this.error=""},async saveEdit(t){var t=t.path.find(t=>"TR"===t.tagName);if(t){const i=t.getElementsByClassName("name")[0].value;let e=!0;this.groups.forEach(t=>{i&&i!==t.name||(e=!1)}),e?(this.groups.forEach(t=>{t.index===this.stateIndex&&(t.name=i)}),t=this.groups.filter(t=>0<t.index).sort((t,e)=>t.index-e.index),await Editor.Profile.setProject("project","physics.collisionGroups",t),this.cancelAdd(),this.refresh(),Editor.Message.send("scene","project:update-physics-group")):this.error=this.t("project.physics.edit.error")}},startAdd(){this.state="add",this.$nextTick(()=>{var t=this.$refs.addRow;t&&t.after(this.$refs.errorRow)})},cancelAdd(){this.state="",this.error=""},async saveAdd(){var t=this.$refs.addIndex,i=this.$refs.addName;if(t&&i){const r=t.value,s=i.value.trim();let e=!0;this.groups.forEach(t=>{(r<=0||32<=r||r===t.index)&&(e=!1),s&&s!==t.name||(e=!1)}),e?(t=this.groups.concat([{index:r,name:s}]).filter(t=>0<t.index).sort((t,e)=>t.index-e.index),await Editor.Profile.setProject("project","physics.collisionGroups",t),this.cancelAdd(),this.refresh(),Editor.Message.send("scene","project:update-physics-group")):this.error=this.t("project.physics.add.error")}},async deleteIndex(e){let i=null,r=null;for(let t=0;t<this.groups.length;t++){var s=this.groups[t];if(s.index===e){i=s,r=t;break}}var t;i&&r&&(t=this.t("project.physics.delete.warn").replace("${index}",i.index).replace("${name}",i.name),1!==(await Editor.Dialog.warn(t,{title:this.t("project.delete"),buttons:[this.t("project.delete"),this.t("project.cancel")]})).response)&&(delete this.groups[r],t=this.groups.filter(t=>0<t.index).sort((t,e)=>t.index-e.index),Editor.Profile.setProject("project","physics.collisionGroups",t),this.refresh())},addIndexValue(){let t=-1;for(const e of this.groups)e.index>t&&(t=e.index);return t+1}},template:vueTemplate});function ready(){var t;null!=(t=this.vm)&&t.$destroy(),this.vm=new ProjectPhysicsVM,this.vm.$mount(this.$.container)}async function exportConfig(){var t={};return t["physics.collisionMatrix"]=await Editor.Message.request("project","query-config","project","physics.collisionMatrix")||{},t["physics.collisionGroups"]=await Editor.Message.request("project","query-config","project","physics.collisionGroups")||[],t}async function importConfig(t){t["physics.collisionMatrix"]&&await Editor.Message.request("project","set-config","project","physics.collisionMatrix",t["physics.collisionMatrix"]),t["physics.collisionGroups"]&&await Editor.Message.request("project","set-config","project","physics.collisionGroups",t["physics.collisionGroups"])}function close(){var t;null!=(t=this.vm)&&t.$destroy(),this.vm=null}exports.style=`
.config { display: grid; }
.config >.table { width: 100%; }
.config >.table .td { text-align: center; }

.config >.table .td.mini { width: 40px; }
.config >.table .td.name { width: 130px; }
.config >.table .td.operation { width: 80px; text-align: left; }

.config >.table .td .input { vertical-align: inherit; width: 100%; }
.config >.table .td.error { text-align: left; color: var(--color-danger-fill-weaker); }
.config >.table .td ui-button[type="icon"] { margin: 0 2px; }
.config >.table .gray { color: var(--color-normal-contrast-emphasis); }
.config >.table .td.first { text-align: left; }
.config >.table .td.first .add { width: 200px; margin: 10px 0; }
.config >.table .td.first .add > .icon { margin-right: 8px; }
.config .transform { writing-mode: tb; }
`,exports.template='<div class="container"></div>',exports.$={container:".container"},exports.ready=ready,exports.exportConfig=exportConfig,exports.importConfig=importConfig,exports.close=close;