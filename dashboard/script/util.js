"use strict";const{app,shell}=require("electron"),setting=(exports.app=app,exports.i18n=require("@base/electron-i18n"),exports.metrics=require("@editor/creator/dist/metrics"),require("@editor/setting")),Manager=require("@editor/extension-sdk")["Manager"],Dialog=require("@editor/creator/dist/dialog")["Dialog"],I18n=require("@editor/creator/dist/i18n")["I18n"],Utils=require("@editor/creator/dist/utils")["Utils"],{existsSync,readJSONSync}=require("fs-extra"),{basename,extname,join}=require("path"),spawn=require("child_process")["spawn"],lt=require("semver")["lt"],DOWNLOAD="https://www.cocos.com/creator-download",DASHBOARD_PROTOCOL="cocos-dashboard://",languages=(exports.basenameNoExt=function(e){return basename(e,extname(e))},exports.getName=Utils.File.getName,{zh:require("../i18n/zh"),en:require("../i18n/en")});let initializedI18n=!1;function registerI18n(){initializedI18n=!0,exports.i18n.register(languages.en,"en"),exports.i18n.register(languages.zh,"zh"),app.getLocale().startsWith("zh")&&exports.i18n.switch("zh")}exports.initI18n=async function(e){initializedI18n||(e||app.isReady()||await new Promise(e=>{app.once("ready",e)}),registerI18n())};const t=exports.t=function(e,t){return I18n.t(e,t)},projectMap=(exports.queryDashboardPath=async function(){try{var e=await app.getApplicationInfoForProtocol(DASHBOARD_PROTOCOL);if(existsSync(e.path))return e.path}catch(e){}return""},exports.openDashboard=async function(){try{var e=exports.queryDashboardPath();if(e)return await shell.openPath(e),exports.exitApp(),!0}catch(e){}return!1},exports.goToInstall=async function(){await shell.openExternal(DOWNLOAD)},exports.projectMap=new Map);function getDependNames(t){let n="";for(let e=0;e<t.length;e++)n+=`${e+1}.${t[e]}\n`;return n}exports.exitApp=function(){0===projectMap.size&&app.exit(0)},exports.warnAlreadyOpened=async function(e){await Dialog.warn(t("project_opened"),{title:t("info"),detail:e,buttons:[t("confirm")]})},exports.errorDialog=async function(e,n){await Dialog.error(e,{detail:n||"",buttons:[t("confirm")]})},exports.warnDuplicateProject=async function(){await Dialog.warn(t("message.duplicate_project"),{title:t("warn"),buttons:[t("confirm")]})},exports.chooseProjectPath=async function(e){e=await Dialog.select({type:"directory",title:e});return e&&e.filePaths&&e.filePaths[0]},exports.warnInstallDependFailed=async function(e,n){return console.warn(n),setting.args.build?(console.warn(t("message.install_depend_error",{list:e})),-1):(await Dialog.warn(t("message.install_depend_error"),{title:t("main.title"),detail:""+getDependNames(e),buttons:[t("main.button.quit"),t("main.button.continue")],default:1})).response},exports.showMainDialog=async function(e){return(await Dialog.info(t("main.message"),{title:t("main.title"),detail:t("main.detail"),buttons:[e?t("main.button.dashboard"):t("main.button.install"),t("main.button.empty"),t("main.button.open"),t("main.button.quit")],default:0,cancel:3})).response},exports.installProjectDepend=async function(x){return new Promise(async(t,e)=>{if(void 0!==process.send&&process.env.COCOS_DASHBOARD_VERSION)return t();var n=join(x,"extensions"),n=new Manager({extensionPaths:[n]}),a=await n.queryDepends([x]),r=await n.scanLocalExtensions();const i=[];for(const u of a){var o=r.find(e=>u.name===e.name);if(!o||lt(o.version,u.version)){i.push(u.name);break}}if(0===i.length)return t();await exports.initI18n();n=await exports.queryDashboardPath();if(!n)return 0===await exports.warnInstallDependFailed(i,new Error("Failed to install dependencies, the dashboard does not exist."))?void exports.exitApp():t();try{var s="win32"===process.platform?"../resources":"Contents/Resources";readJSONSync(join(n,s,"dashboard.json"))}catch(e){return 0===await exports.warnInstallDependFailed(i,new Error("Failed to install dependencies, the dashboard does not support this feature."))?void exports.exitApp():t()}let p=[];setting.args.build&&p.push("--project-install-silence"),p=p.concat(["--project-install-plugins","--project="+x]);const l=n+("win32"===process.platform?"":"/Contents/MacOS/CocosDashboard"),c=spawn(l,p,{stdio:[0,1,2,"ipc"]});let d=!1;c.on("exit",()=>{console.log(`spawn ${l} exit, args: `+p),d||exports.exitApp()}),c.on("message",async e=>{if("dashboard-install-project-plugin"===e.channel&&(d=!0,c.kill(),e.stack&&0===await exports.warnInstallDependFailed(i,e.stack)))return void exports.exitApp();return t()}),c.on("error",async e=>{e=await exports.warnInstallDependFailed(i,e);if(0!==e)return t();exports.exitApp()})})};